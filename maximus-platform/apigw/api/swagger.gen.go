// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// BaseData defines model for Base_data.
type BaseData struct {
	Version string `json:"version"`
}

// Error400Data defines model for Error_400_data.
type Error400Data struct {
	// Embedded struct due to allOf(#/components/schemas/Error_data)
	ErrorData
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401Data defines model for Error_401_data.
type Error401Data struct {
	// Embedded struct due to allOf(#/components/schemas/Error_data)
	ErrorData
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404Data defines model for Error_404_data.
type Error404Data struct {
	// Embedded struct due to allOf(#/components/schemas/Error_data)
	ErrorData
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error405Data defines model for Error_405_data.
type Error405Data struct {
	// Embedded struct due to allOf(#/components/schemas/Error_data)
	ErrorData
	// Embedded fields due to inline allOf schema
	Errors  *interface{} `json:"errors,omitempty"`
	Message *string      `json:"message,omitempty"`
}

// Error500Data defines model for Error_500_data.
type Error500Data struct {
	// Embedded struct due to allOf(#/components/schemas/Error_data)
	ErrorData
	// Embedded fields due to inline allOf schema
	Errors  interface{} `json:"errors"`
	Message string      `json:"message"`
}

// ErrorData defines model for Error_data.
type ErrorData struct {
	// Embedded struct due to allOf(#/components/schemas/Base_data)
	BaseData
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// PolicyObject defines model for Policy_object.
type PolicyObject struct {
	BackendHost       string   `json:"backendHost"`
	BackendPath       string   `json:"backendPath"`
	Cache             bool     `json:"cache"`
	Description       string   `json:"description"`
	HeadersToPass     []string `json:"headers_to_pass"`
	KeyCache          int      `json:"key_cache"`
	Method            string   `json:"method"`
	Path              string   `json:"path"`
	QuerystringParams []string `json:"querystring_params"`
	Resource          string   `json:"resource"`
	Roles             []string `json:"roles"`
}

// PolicyObjectPatch defines model for Policy_object_patch.
type PolicyObjectPatch struct {
	BackendHost       *string   `json:"backendHost,omitempty"`
	BackendPath       *string   `json:"backendPath,omitempty"`
	Cache             *bool     `json:"cache,omitempty"`
	Description       *string   `json:"description,omitempty"`
	HeadersToPass     *[]string `json:"headers_to_pass,omitempty"`
	KeyCache          *int      `json:"key_cache,omitempty"`
	Method            *string   `json:"method,omitempty"`
	Path              *string   `json:"path,omitempty"`
	QuerystringParams *[]string `json:"querystring_params,omitempty"`
	Resource          *string   `json:"resource,omitempty"`
	Roles             *[]string `json:"roles,omitempty"`
}

// PolicyObjectWithId defines model for Policy_object_with_id.
type PolicyObjectWithId struct {
	// Embedded fields due to inline allOf schema
	ID string `json:"ID"`
	// Embedded struct due to allOf(#/components/schemas/Policy_object)
	PolicyObject
}

// SuccessData defines model for Success_data.
type SuccessData struct {
	// Embedded struct due to allOf(#/components/schemas/Base_data)
	BaseData
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// PolicyID defines model for policyID.
type PolicyID string

// BaseResponse200 defines model for Base_response_200.
type BaseResponse200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success_data)
	SuccessData
	// Embedded fields due to inline allOf schema
	Data []interface{} `json:"data"`
}

// BaseResponse400 defines model for Base_response_400.
type BaseResponse400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400_data)
	Error400Data
	// Embedded fields due to inline allOf schema
	Errors struct {
		Core       *string                 `json:"core,omitempty"`
		Json       *string                 `json:"json,omitempty"`
		Validation *map[string]interface{} `json:"validation,omitempty"`
	} `json:"errors"`
	Message string `json:"message"`
}

// BaseResponse401 defines model for Base_response_401.
type BaseResponse401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401_data)
	Error401Data
}

// BaseResponse404 defines model for Base_response_404.
type BaseResponse404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404_data)
	Error404Data
}

// BaseResponse405 defines model for Base_response_405.
type BaseResponse405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405_data)
	Error405Data
}

// BaseResponse500 defines model for Base_response_500.
type BaseResponse500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500_data)
	Error500Data
}

// PolicyResponse200 defines model for Policy_response_200.
type PolicyResponse200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success_data)
	SuccessData
	// Embedded fields due to inline allOf schema
	Data []PolicyObjectWithId `json:"data"`
}

// PolicyCreateJSONBody defines parameters for PolicyCreate.
type PolicyCreateJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/Policy_object_with_id)
	PolicyObjectWithId
}

// PolicyPatchJSONBody defines parameters for PolicyPatch.
type PolicyPatchJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/Policy_object_patch)
	PolicyObjectPatch
}

// PolicyCreateRequestBody defines body for PolicyCreate for application/json ContentType.
type PolicyCreateJSONRequestBody PolicyCreateJSONBody

// PolicyPatchRequestBody defines body for PolicyPatch for application/json ContentType.
type PolicyPatchJSONRequestBody PolicyPatchJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Коллекция политик// (GET /policies)
	PolicyCollection(ctx echo.Context) error
	// Создание политики// (POST /policies)
	PolicyCreate(ctx echo.Context) error
	// Удаление политики// (DELETE /policies/{policyID})
	PolicyDelete(ctx echo.Context, policyID PolicyID) error
	// Информация о политике// (GET /policies/{policyID})
	PolicyView(ctx echo.Context, policyID PolicyID) error
	// Изменение политики// (PATCH /policies/{policyID})
	PolicyPatch(ctx echo.Context, policyID PolicyID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PolicyCollection converts echo context to params.
func (w *ServerInterfaceWrapper) PolicyCollection(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PolicyCollection(ctx)
	return err
}

// PolicyCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PolicyCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PolicyCreate(ctx)
	return err
}

// PolicyDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PolicyDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyID" -------------
	var policyID PolicyID

	err = runtime.BindStyledParameter("simple", false, "policyID", ctx.Param("policyID"), &policyID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PolicyDelete(ctx, policyID)
	return err
}

// PolicyView converts echo context to params.
func (w *ServerInterfaceWrapper) PolicyView(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyID" -------------
	var policyID PolicyID

	err = runtime.BindStyledParameter("simple", false, "policyID", ctx.Param("policyID"), &policyID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PolicyView(ctx, policyID)
	return err
}

// PolicyPatch converts echo context to params.
func (w *ServerInterfaceWrapper) PolicyPatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyID" -------------
	var policyID PolicyID

	err = runtime.BindStyledParameter("simple", false, "policyID", ctx.Param("policyID"), &policyID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PolicyPatch(ctx, policyID)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/policies", wrapper.PolicyCollection)
	router.POST("/policies", wrapper.PolicyCreate)
	router.DELETE("/policies/:policyID", wrapper.PolicyDelete)
	router.GET("/policies/:policyID", wrapper.PolicyView)
	router.PATCH("/policies/:policyID", wrapper.PolicyPatch)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

