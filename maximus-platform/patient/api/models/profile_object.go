// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProfileObject Screening_object
// swagger:model Profile_object
type ProfileObject struct {

	// Имя
	// Min Length: 1
	FirstName string `json:"firstName,omitempty"`

	// Фамилия
	// Min Length: 1
	LastName string `json:"lastName,omitempty"`

	// Локаль интерфейса
	// Min Length: 1
	// Pattern: ^[A-Z]{3}$
	Locale string `json:"locale,omitempty"`

	// Отчество
	// Min Length: 1
	Patronymic string `json:"patronymic,omitempty"`

	// Тема интерфейса
	// Enum: [DARK LIGHT]
	Theme string `json:"theme,omitempty"`
}

// Validate validates this profile object
func (m *ProfileObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatronymic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTheme(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProfileObject) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("firstName", "body", string(m.FirstName), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProfileObject) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("lastName", "body", string(m.LastName), 1); err != nil {
		return err
	}

	return nil
}

func (m *ProfileObject) validateLocale(formats strfmt.Registry) error {

	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	if err := validate.MinLength("locale", "body", string(m.Locale), 1); err != nil {
		return err
	}

	if err := validate.Pattern("locale", "body", string(m.Locale), `^[A-Z]{3}$`); err != nil {
		return err
	}

	return nil
}

func (m *ProfileObject) validatePatronymic(formats strfmt.Registry) error {

	if swag.IsZero(m.Patronymic) { // not required
		return nil
	}

	if err := validate.MinLength("patronymic", "body", string(m.Patronymic), 1); err != nil {
		return err
	}

	return nil
}

var profileObjectTypeThemePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DARK","LIGHT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		profileObjectTypeThemePropEnum = append(profileObjectTypeThemePropEnum, v)
	}
}

const (

	// ProfileObjectThemeDARK captures enum value "DARK"
	ProfileObjectThemeDARK string = "DARK"

	// ProfileObjectThemeLIGHT captures enum value "LIGHT"
	ProfileObjectThemeLIGHT string = "LIGHT"
)

// prop value enum
func (m *ProfileObject) validateThemeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, profileObjectTypeThemePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProfileObject) validateTheme(formats strfmt.Registry) error {

	if swag.IsZero(m.Theme) { // not required
		return nil
	}

	// value enum
	if err := m.validateThemeEnum("theme", "body", m.Theme); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProfileObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProfileObject) UnmarshalBinary(b []byte) error {
	var res ProfileObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
