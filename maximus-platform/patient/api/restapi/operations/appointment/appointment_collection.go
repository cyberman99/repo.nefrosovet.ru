// Code generated by go-swagger; DO NOT EDIT.

package appointment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// AppointmentCollectionHandlerFunc turns a function with the right signature into a appointment collection handler
type AppointmentCollectionHandlerFunc func(AppointmentCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppointmentCollectionHandlerFunc) Handle(params AppointmentCollectionParams) middleware.Responder {
	return fn(params)
}

// AppointmentCollectionHandler interface for that can handle valid appointment collection params
type AppointmentCollectionHandler interface {
	Handle(AppointmentCollectionParams) middleware.Responder
}

// NewAppointmentCollection creates a new http.Handler for the appointment collection operation
func NewAppointmentCollection(ctx *middleware.Context, handler AppointmentCollectionHandler) *AppointmentCollection {
	return &AppointmentCollection{Context: ctx, Handler: handler}
}

/*AppointmentCollection swagger:route GET /users/{userID}/appointments Appointment appointmentCollection

Коллекция назначений

*/
type AppointmentCollection struct {
	Context *middleware.Context
	Handler AppointmentCollectionHandler
}

func (o *AppointmentCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppointmentCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AppointmentCollectionBadRequestBody appointment collection bad request body
// swagger:model AppointmentCollectionBadRequestBody
type AppointmentCollectionBadRequestBody struct {
	AppointmentCollectionBadRequestBodyAllOf0

	AppointmentCollectionBadRequestBodyAllOf1

	// errors
	Errors *AppointmentCollectionBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentCollectionBadRequestBody) UnmarshalJSON(raw []byte) error {
	// AppointmentCollectionBadRequestBodyAO0
	var appointmentCollectionBadRequestBodyAO0 AppointmentCollectionBadRequestBodyAllOf0
	if err := swag.ReadJSON(raw, &appointmentCollectionBadRequestBodyAO0); err != nil {
		return err
	}
	o.AppointmentCollectionBadRequestBodyAllOf0 = appointmentCollectionBadRequestBodyAO0

	// AppointmentCollectionBadRequestBodyAO1
	var appointmentCollectionBadRequestBodyAO1 AppointmentCollectionBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &appointmentCollectionBadRequestBodyAO1); err != nil {
		return err
	}
	o.AppointmentCollectionBadRequestBodyAllOf1 = appointmentCollectionBadRequestBodyAO1

	// AppointmentCollectionBadRequestBodyAO2
	var dataAppointmentCollectionBadRequestBodyAO2 struct {
		Errors *AppointmentCollectionBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAppointmentCollectionBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataAppointmentCollectionBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentCollectionBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	appointmentCollectionBadRequestBodyAO0, err := swag.WriteJSON(o.AppointmentCollectionBadRequestBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentCollectionBadRequestBodyAO0)

	appointmentCollectionBadRequestBodyAO1, err := swag.WriteJSON(o.AppointmentCollectionBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentCollectionBadRequestBodyAO1)

	var dataAppointmentCollectionBadRequestBodyAO2 struct {
		Errors *AppointmentCollectionBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataAppointmentCollectionBadRequestBodyAO2.Errors = o.Errors

	jsonDataAppointmentCollectionBadRequestBodyAO2, errAppointmentCollectionBadRequestBodyAO2 := swag.WriteJSON(dataAppointmentCollectionBadRequestBodyAO2)
	if errAppointmentCollectionBadRequestBodyAO2 != nil {
		return nil, errAppointmentCollectionBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataAppointmentCollectionBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment collection bad request body
func (o *AppointmentCollectionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AppointmentCollectionBadRequestBodyAllOf0
	// validation for a type composition with AppointmentCollectionBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AppointmentCollectionBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentCollectionBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentCollectionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentCollectionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AppointmentCollectionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentCollectionBadRequestBodyAO2Errors appointment collection bad request body a o2 errors
// swagger:model AppointmentCollectionBadRequestBodyAO2Errors
type AppointmentCollectionBadRequestBodyAO2Errors struct {

	// validation
	Validation *AppointmentCollectionBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this appointment collection bad request body a o2 errors
func (o *AppointmentCollectionBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AppointmentCollectionBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentCollectionBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentCollectionBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentCollectionBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res AppointmentCollectionBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentCollectionBadRequestBodyAO2ErrorsValidation appointment collection bad request body a o2 errors validation
// swagger:model AppointmentCollectionBadRequestBodyAO2ErrorsValidation
type AppointmentCollectionBadRequestBodyAO2ErrorsValidation struct {

	// date from
	// Enum: [format required]
	DateFrom string `json:"dateFrom,omitempty"`

	// date to
	// Enum: [format required]
	DateTo string `json:"dateTo,omitempty"`

	// status code
	// Enum: [oneof]
	StatusCode string `json:"statusCode,omitempty"`
}

// Validate validates this appointment collection bad request body a o2 errors validation
func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDateTo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateFromPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["format","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateFromPropEnum = append(appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateFromPropEnum, v)
	}
}

const (

	// AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateFromFormat captures enum value "format"
	AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateFromFormat string = "format"

	// AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateFromRequired captures enum value "required"
	AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateFromRequired string = "required"
)

// prop value enum
func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) validateDateFromEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateFromPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) validateDateFrom(formats strfmt.Registry) error {

	if swag.IsZero(o.DateFrom) { // not required
		return nil
	}

	// value enum
	if err := o.validateDateFromEnum("appointmentCollectionBadRequest"+"."+"errors"+"."+"validation"+"."+"dateFrom", "body", o.DateFrom); err != nil {
		return err
	}

	return nil
}

var appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateToPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["format","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateToPropEnum = append(appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateToPropEnum, v)
	}
}

const (

	// AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateToFormat captures enum value "format"
	AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateToFormat string = "format"

	// AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateToRequired captures enum value "required"
	AppointmentCollectionBadRequestBodyAO2ErrorsValidationDateToRequired string = "required"
)

// prop value enum
func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) validateDateToEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeDateToPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) validateDateTo(formats strfmt.Registry) error {

	if swag.IsZero(o.DateTo) { // not required
		return nil
	}

	// value enum
	if err := o.validateDateToEnum("appointmentCollectionBadRequest"+"."+"errors"+"."+"validation"+"."+"dateTo", "body", o.DateTo); err != nil {
		return err
	}

	return nil
}

var appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeStatusCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["oneof"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeStatusCodePropEnum = append(appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeStatusCodePropEnum, v)
	}
}

const (

	// AppointmentCollectionBadRequestBodyAO2ErrorsValidationStatusCodeOneof captures enum value "oneof"
	AppointmentCollectionBadRequestBodyAO2ErrorsValidationStatusCodeOneof string = "oneof"
)

// prop value enum
func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) validateStatusCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, appointmentCollectionBadRequestBodyAO2ErrorsValidationTypeStatusCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) validateStatusCode(formats strfmt.Registry) error {

	if swag.IsZero(o.StatusCode) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusCodeEnum("appointmentCollectionBadRequest"+"."+"errors"+"."+"validation"+"."+"statusCode", "body", o.StatusCode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentCollectionBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res AppointmentCollectionBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentCollectionBadRequestBodyAllOf0 Ошибка валидации
// swagger:model AppointmentCollectionBadRequestBodyAllOf0
type AppointmentCollectionBadRequestBodyAllOf0 interface{}

// AppointmentCollectionBadRequestBodyAllOf1 appointment collection bad request body all of1
// swagger:model AppointmentCollectionBadRequestBodyAllOf1
type AppointmentCollectionBadRequestBodyAllOf1 interface{}

// AppointmentCollectionInternalServerErrorBody appointment collection internal server error body
// swagger:model AppointmentCollectionInternalServerErrorBody
type AppointmentCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// AppointmentCollectionInternalServerErrorBodyAO0
	var appointmentCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &appointmentCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = appointmentCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment collection internal server error body
func (o *AppointmentCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AppointmentCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentCollectionMethodNotAllowedBody appointment collection method not allowed body
// swagger:model AppointmentCollectionMethodNotAllowedBody
type AppointmentCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// AppointmentCollectionMethodNotAllowedBodyAO0
	var appointmentCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &appointmentCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = appointmentCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment collection method not allowed body
func (o *AppointmentCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res AppointmentCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentCollectionNotFoundBody appointment collection not found body
// swagger:model AppointmentCollectionNotFoundBody
type AppointmentCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// AppointmentCollectionNotFoundBodyAO0
	var appointmentCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &appointmentCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = appointmentCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment collection not found body
func (o *AppointmentCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AppointmentCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentCollectionOKBody appointment collection o k body
// swagger:model AppointmentCollectionOKBody
type AppointmentCollectionOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*AppointmentDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// AppointmentCollectionOKBodyAO0
	var appointmentCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &appointmentCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = appointmentCollectionOKBodyAO0

	// AppointmentCollectionOKBodyAO1
	var dataAppointmentCollectionOKBodyAO1 struct {
		Data []*AppointmentDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataAppointmentCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataAppointmentCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	appointmentCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentCollectionOKBodyAO0)

	var dataAppointmentCollectionOKBodyAO1 struct {
		Data []*AppointmentDataItem `json:"data"`
	}

	dataAppointmentCollectionOKBodyAO1.Data = o.Data

	jsonDataAppointmentCollectionOKBodyAO1, errAppointmentCollectionOKBodyAO1 := swag.WriteJSON(dataAppointmentCollectionOKBodyAO1)
	if errAppointmentCollectionOKBodyAO1 != nil {
		return nil, errAppointmentCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataAppointmentCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment collection o k body
func (o *AppointmentCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AppointmentCollectionOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("appointmentCollectionOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointmentCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res AppointmentCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// appointment-data-item appointment data item
// swagger:model appointment-data-item
type AppointmentDataItem struct {
	models.AppointmentObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentDataItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.AppointmentObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.AppointmentObject = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentDataItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.AppointmentObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment data item
func (o *AppointmentDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AppointmentObject
	if err := o.AppointmentObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentDataItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentDataItem) UnmarshalBinary(b []byte) error {
	var res AppointmentDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
