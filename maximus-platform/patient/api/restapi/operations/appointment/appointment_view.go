// Code generated by go-swagger; DO NOT EDIT.

package appointment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// AppointmentViewHandlerFunc turns a function with the right signature into a appointment view handler
type AppointmentViewHandlerFunc func(AppointmentViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppointmentViewHandlerFunc) Handle(params AppointmentViewParams) middleware.Responder {
	return fn(params)
}

// AppointmentViewHandler interface for that can handle valid appointment view params
type AppointmentViewHandler interface {
	Handle(AppointmentViewParams) middleware.Responder
}

// NewAppointmentView creates a new http.Handler for the appointment view operation
func NewAppointmentView(ctx *middleware.Context, handler AppointmentViewHandler) *AppointmentView {
	return &AppointmentView{Context: ctx, Handler: handler}
}

/*AppointmentView swagger:route GET /users/{userID}/appointments/{appointmentID} Appointment appointmentView

Информация о назначении

*/
type AppointmentView struct {
	Context *middleware.Context
	Handler AppointmentViewHandler
}

func (o *AppointmentView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppointmentViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AppointmentViewInternalServerErrorBody appointment view internal server error body
// swagger:model AppointmentViewInternalServerErrorBody
type AppointmentViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// AppointmentViewInternalServerErrorBodyAO0
	var appointmentViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &appointmentViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = appointmentViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment view internal server error body
func (o *AppointmentViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AppointmentViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentViewMethodNotAllowedBody appointment view method not allowed body
// swagger:model AppointmentViewMethodNotAllowedBody
type AppointmentViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// AppointmentViewMethodNotAllowedBodyAO0
	var appointmentViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &appointmentViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = appointmentViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment view method not allowed body
func (o *AppointmentViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res AppointmentViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentViewNotFoundBody appointment view not found body
// swagger:model AppointmentViewNotFoundBody
type AppointmentViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// AppointmentViewNotFoundBodyAO0
	var appointmentViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &appointmentViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = appointmentViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment view not found body
func (o *AppointmentViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AppointmentViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentViewOKBody appointment view o k body
// swagger:model AppointmentViewOKBody
type AppointmentViewOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*AppointmentDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentViewOKBody) UnmarshalJSON(raw []byte) error {
	// AppointmentViewOKBodyAO0
	var appointmentViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &appointmentViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = appointmentViewOKBodyAO0

	// AppointmentViewOKBodyAO1
	var dataAppointmentViewOKBodyAO1 struct {
		Data []*AppointmentDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataAppointmentViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataAppointmentViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	appointmentViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentViewOKBodyAO0)

	var dataAppointmentViewOKBodyAO1 struct {
		Data []*AppointmentDataItem `json:"data"`
	}

	dataAppointmentViewOKBodyAO1.Data = o.Data

	jsonDataAppointmentViewOKBodyAO1, errAppointmentViewOKBodyAO1 := swag.WriteJSON(dataAppointmentViewOKBodyAO1)
	if errAppointmentViewOKBodyAO1 != nil {
		return nil, errAppointmentViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataAppointmentViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment view o k body
func (o *AppointmentViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AppointmentViewOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("appointmentViewOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointmentViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentViewOKBody) UnmarshalBinary(b []byte) error {
	var res AppointmentViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
