// Code generated by go-swagger; DO NOT EDIT.

package appointment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AppointmentCollectionURL generates an URL for the appointment collection operation
type AppointmentCollectionURL struct {
	UserID strfmt.UUID

	DateFrom   strfmt.Date
	DateTo     strfmt.Date
	Limit      *int64
	Offset     *int64
	StatusCode []string
	TypeCode   []string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *AppointmentCollectionURL) WithBasePath(bp string) *AppointmentCollectionURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *AppointmentCollectionURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *AppointmentCollectionURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/users/{userID}/appointments"

	userID := o.UserID.String()
	if userID != "" {
		_path = strings.Replace(_path, "{userID}", userID, -1)
	} else {
		return nil, errors.New("userId is required on AppointmentCollectionURL")
	}

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	dateFromQ := o.DateFrom.String()
	if dateFromQ != "" {
		qs.Set("dateFrom", dateFromQ)
	}

	dateToQ := o.DateTo.String()
	if dateToQ != "" {
		qs.Set("dateTo", dateToQ)
	}

	var limitQ string
	if o.Limit != nil {
		limitQ = swag.FormatInt64(*o.Limit)
	}
	if limitQ != "" {
		qs.Set("limit", limitQ)
	}

	var offsetQ string
	if o.Offset != nil {
		offsetQ = swag.FormatInt64(*o.Offset)
	}
	if offsetQ != "" {
		qs.Set("offset", offsetQ)
	}

	var statusCodeIR []string
	for _, statusCodeI := range o.StatusCode {
		statusCodeIS := statusCodeI
		if statusCodeIS != "" {
			statusCodeIR = append(statusCodeIR, statusCodeIS)
		}
	}

	statusCode := swag.JoinByFormat(statusCodeIR, "")

	if len(statusCode) > 0 {
		qsv := statusCode[0]
		if qsv != "" {
			qs.Set("statusCode", qsv)
		}
	}

	var typeCodeIR []string
	for _, typeCodeI := range o.TypeCode {
		typeCodeIS := typeCodeI
		if typeCodeIS != "" {
			typeCodeIR = append(typeCodeIR, typeCodeIS)
		}
	}

	typeCode := swag.JoinByFormat(typeCodeIR, "")

	if len(typeCode) > 0 {
		qsv := typeCode[0]
		if qsv != "" {
			qs.Set("typeCode", qsv)
		}
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *AppointmentCollectionURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *AppointmentCollectionURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *AppointmentCollectionURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on AppointmentCollectionURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on AppointmentCollectionURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *AppointmentCollectionURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
