// Code generated by go-swagger; DO NOT EDIT.

package appointment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAppointmentCollectionParams creates a new AppointmentCollectionParams object
// no default values defined in spec.
func NewAppointmentCollectionParams() AppointmentCollectionParams {

	return AppointmentCollectionParams{}
}

// AppointmentCollectionParams contains all the bound params for the appointment collection operation
// typically these are obtained from a http.Request
//
// swagger:parameters AppointmentCollection
type AppointmentCollectionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Дата не ранее чем
	  Required: true
	  In: query
	*/
	DateFrom strfmt.Date
	/*Дата не позднее чем
	  Required: true
	  In: query
	*/
	DateTo strfmt.Date
	/*Лимит
	  In: query
	*/
	Limit *int64
	/*Шаг
	  In: query
	*/
	Offset *int64
	/*Кодификатор статуса
	  In: query
	*/
	StatusCode []string
	/*Кодификатор типа
	  In: query
	*/
	TypeCode []string
	/*Идентификатор пользователя
	  Required: true
	  In: path
	*/
	UserID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAppointmentCollectionParams() beforehand.
func (o *AppointmentCollectionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDateFrom, qhkDateFrom, _ := qs.GetOK("dateFrom")
	if err := o.bindDateFrom(qDateFrom, qhkDateFrom, route.Formats); err != nil {
		res = append(res, err)
	}

	qDateTo, qhkDateTo, _ := qs.GetOK("dateTo")
	if err := o.bindDateTo(qDateTo, qhkDateTo, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatusCode, qhkStatusCode, _ := qs.GetOK("statusCode")
	if err := o.bindStatusCode(qStatusCode, qhkStatusCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qTypeCode, qhkTypeCode, _ := qs.GetOK("typeCode")
	if err := o.bindTypeCode(qTypeCode, qhkTypeCode, route.Formats); err != nil {
		res = append(res, err)
	}

	rUserID, rhkUserID, _ := route.Params.GetOK("userID")
	if err := o.bindUserID(rUserID, rhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDateFrom binds and validates parameter DateFrom from query.
func (o *AppointmentCollectionParams) bindDateFrom(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("dateFrom", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("dateFrom", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("dateFrom", "query", "strfmt.Date", raw)
	}
	o.DateFrom = *(value.(*strfmt.Date))

	if err := o.validateDateFrom(formats); err != nil {
		return err
	}

	return nil
}

// validateDateFrom carries on validations for parameter DateFrom
func (o *AppointmentCollectionParams) validateDateFrom(formats strfmt.Registry) error {

	if err := validate.FormatOf("dateFrom", "query", "date", o.DateFrom.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindDateTo binds and validates parameter DateTo from query.
func (o *AppointmentCollectionParams) bindDateTo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("dateTo", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("dateTo", "query", raw); err != nil {
		return err
	}

	// Format: date
	value, err := formats.Parse("date", raw)
	if err != nil {
		return errors.InvalidType("dateTo", "query", "strfmt.Date", raw)
	}
	o.DateTo = *(value.(*strfmt.Date))

	if err := o.validateDateTo(formats); err != nil {
		return err
	}

	return nil
}

// validateDateTo carries on validations for parameter DateTo
func (o *AppointmentCollectionParams) validateDateTo(formats strfmt.Registry) error {

	if err := validate.FormatOf("dateTo", "query", "date", o.DateTo.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *AppointmentCollectionParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *AppointmentCollectionParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindStatusCode binds and validates array parameter StatusCode from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *AppointmentCollectionParams) bindStatusCode(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvStatusCode string
	if len(rawData) > 0 {
		qvStatusCode = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	statusCodeIC := swag.SplitByFormat(qvStatusCode, "")
	if len(statusCodeIC) == 0 {
		return nil
	}

	var statusCodeIR []string
	for i, statusCodeIV := range statusCodeIC {
		statusCodeI := statusCodeIV

		if err := validate.Enum(fmt.Sprintf("%s.%v", "statusCode", i), "query", statusCodeI, []interface{}{"PERFORMED", "NOT_PERFORMED", "HALF_PERFORMED"}); err != nil {
			return err
		}

		statusCodeIR = append(statusCodeIR, statusCodeI)
	}

	o.StatusCode = statusCodeIR

	return nil
}

// bindTypeCode binds and validates array parameter TypeCode from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *AppointmentCollectionParams) bindTypeCode(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvTypeCode string
	if len(rawData) > 0 {
		qvTypeCode = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	typeCodeIC := swag.SplitByFormat(qvTypeCode, "")
	if len(typeCodeIC) == 0 {
		return nil
	}

	var typeCodeIR []string
	for _, typeCodeIV := range typeCodeIC {
		typeCodeI := typeCodeIV

		typeCodeIR = append(typeCodeIR, typeCodeI)
	}

	o.TypeCode = typeCodeIR

	return nil
}

// bindUserID binds and validates parameter UserID from path.
func (o *AppointmentCollectionParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("userID", "path", "strfmt.UUID", raw)
	}
	o.UserID = *(value.(*strfmt.UUID))

	if err := o.validateUserID(formats); err != nil {
		return err
	}

	return nil
}

// validateUserID carries on validations for parameter UserID
func (o *AppointmentCollectionParams) validateUserID(formats strfmt.Registry) error {

	if err := validate.FormatOf("userID", "path", "uuid", o.UserID.String(), formats); err != nil {
		return err
	}
	return nil
}
