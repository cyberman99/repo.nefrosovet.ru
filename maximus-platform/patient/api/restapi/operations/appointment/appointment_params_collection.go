// Code generated by go-swagger; DO NOT EDIT.

package appointment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// AppointmentParamsCollectionHandlerFunc turns a function with the right signature into a appointment params collection handler
type AppointmentParamsCollectionHandlerFunc func(AppointmentParamsCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppointmentParamsCollectionHandlerFunc) Handle(params AppointmentParamsCollectionParams) middleware.Responder {
	return fn(params)
}

// AppointmentParamsCollectionHandler interface for that can handle valid appointment params collection params
type AppointmentParamsCollectionHandler interface {
	Handle(AppointmentParamsCollectionParams) middleware.Responder
}

// NewAppointmentParamsCollection creates a new http.Handler for the appointment params collection operation
func NewAppointmentParamsCollection(ctx *middleware.Context, handler AppointmentParamsCollectionHandler) *AppointmentParamsCollection {
	return &AppointmentParamsCollection{Context: ctx, Handler: handler}
}

/*AppointmentParamsCollection swagger:route GET /users/{userID}/appointments/{appointmentID}/params Appointment appointmentParamsCollection

Параметры назначения

*/
type AppointmentParamsCollection struct {
	Context *middleware.Context
	Handler AppointmentParamsCollectionHandler
}

func (o *AppointmentParamsCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppointmentParamsCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AppointmentParamsCollectionInternalServerErrorBody appointment params collection internal server error body
// swagger:model AppointmentParamsCollectionInternalServerErrorBody
type AppointmentParamsCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentParamsCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// AppointmentParamsCollectionInternalServerErrorBodyAO0
	var appointmentParamsCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &appointmentParamsCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = appointmentParamsCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentParamsCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentParamsCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentParamsCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment params collection internal server error body
func (o *AppointmentParamsCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentParamsCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentParamsCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AppointmentParamsCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentParamsCollectionMethodNotAllowedBody appointment params collection method not allowed body
// swagger:model AppointmentParamsCollectionMethodNotAllowedBody
type AppointmentParamsCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentParamsCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// AppointmentParamsCollectionMethodNotAllowedBodyAO0
	var appointmentParamsCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &appointmentParamsCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = appointmentParamsCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentParamsCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentParamsCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentParamsCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment params collection method not allowed body
func (o *AppointmentParamsCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentParamsCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentParamsCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res AppointmentParamsCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentParamsCollectionNotFoundBody appointment params collection not found body
// swagger:model AppointmentParamsCollectionNotFoundBody
type AppointmentParamsCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentParamsCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// AppointmentParamsCollectionNotFoundBodyAO0
	var appointmentParamsCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &appointmentParamsCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = appointmentParamsCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentParamsCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentParamsCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentParamsCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment params collection not found body
func (o *AppointmentParamsCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentParamsCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentParamsCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AppointmentParamsCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentParamsCollectionOKBody appointment params collection o k body
// swagger:model AppointmentParamsCollectionOKBody
type AppointmentParamsCollectionOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*AppointmentParamsDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentParamsCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// AppointmentParamsCollectionOKBodyAO0
	var appointmentParamsCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &appointmentParamsCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = appointmentParamsCollectionOKBodyAO0

	// AppointmentParamsCollectionOKBodyAO1
	var dataAppointmentParamsCollectionOKBodyAO1 struct {
		Data []*AppointmentParamsDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataAppointmentParamsCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataAppointmentParamsCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentParamsCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	appointmentParamsCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentParamsCollectionOKBodyAO0)

	var dataAppointmentParamsCollectionOKBodyAO1 struct {
		Data []*AppointmentParamsDataItem `json:"data"`
	}

	dataAppointmentParamsCollectionOKBodyAO1.Data = o.Data

	jsonDataAppointmentParamsCollectionOKBodyAO1, errAppointmentParamsCollectionOKBodyAO1 := swag.WriteJSON(dataAppointmentParamsCollectionOKBodyAO1)
	if errAppointmentParamsCollectionOKBodyAO1 != nil {
		return nil, errAppointmentParamsCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataAppointmentParamsCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment params collection o k body
func (o *AppointmentParamsCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AppointmentParamsCollectionOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("appointmentParamsCollectionOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointmentParamsCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentParamsCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentParamsCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res AppointmentParamsCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// appointment-params-data-item appointment params data item
// swagger:model appointment-params-data-item
type AppointmentParamsDataItem struct {
	models.AppointmentParamObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentParamsDataItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.AppointmentParamObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.AppointmentParamObject = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentParamsDataItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.AppointmentParamObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment params data item
func (o *AppointmentParamsDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AppointmentParamObject
	if err := o.AppointmentParamObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentParamsDataItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentParamsDataItem) UnmarshalBinary(b []byte) error {
	var res AppointmentParamsDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
