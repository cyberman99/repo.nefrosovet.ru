// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// CodeConfirmationHandlerFunc turns a function with the right signature into a code confirmation handler
type CodeConfirmationHandlerFunc func(CodeConfirmationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CodeConfirmationHandlerFunc) Handle(params CodeConfirmationParams) middleware.Responder {
	return fn(params)
}

// CodeConfirmationHandler interface for that can handle valid code confirmation params
type CodeConfirmationHandler interface {
	Handle(CodeConfirmationParams) middleware.Responder
}

// NewCodeConfirmation creates a new http.Handler for the code confirmation operation
func NewCodeConfirmation(ctx *middleware.Context, handler CodeConfirmationHandler) *CodeConfirmation {
	return &CodeConfirmation{Context: ctx, Handler: handler}
}

/*CodeConfirmation swagger:route POST /confirm Access codeConfirmation

Подтверждение кода

*/
type CodeConfirmation struct {
	Context *middleware.Context
	Handler CodeConfirmationHandler
}

func (o *CodeConfirmation) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCodeConfirmationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CodeConfirmationBadRequestBody code confirmation bad request body
// swagger:model CodeConfirmationBadRequestBody
type CodeConfirmationBadRequestBody struct {
	CodeConfirmationBadRequestBodyAllOf0

	CodeConfirmationBadRequestBodyAllOf1

	// errors
	Errors *CodeConfirmationBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CodeConfirmationBadRequestBody) UnmarshalJSON(raw []byte) error {
	// CodeConfirmationBadRequestBodyAO0
	var codeConfirmationBadRequestBodyAO0 CodeConfirmationBadRequestBodyAllOf0
	if err := swag.ReadJSON(raw, &codeConfirmationBadRequestBodyAO0); err != nil {
		return err
	}
	o.CodeConfirmationBadRequestBodyAllOf0 = codeConfirmationBadRequestBodyAO0

	// CodeConfirmationBadRequestBodyAO1
	var codeConfirmationBadRequestBodyAO1 CodeConfirmationBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &codeConfirmationBadRequestBodyAO1); err != nil {
		return err
	}
	o.CodeConfirmationBadRequestBodyAllOf1 = codeConfirmationBadRequestBodyAO1

	// CodeConfirmationBadRequestBodyAO2
	var dataCodeConfirmationBadRequestBodyAO2 struct {
		Errors *CodeConfirmationBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCodeConfirmationBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataCodeConfirmationBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CodeConfirmationBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	codeConfirmationBadRequestBodyAO0, err := swag.WriteJSON(o.CodeConfirmationBadRequestBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationBadRequestBodyAO0)

	codeConfirmationBadRequestBodyAO1, err := swag.WriteJSON(o.CodeConfirmationBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationBadRequestBodyAO1)

	var dataCodeConfirmationBadRequestBodyAO2 struct {
		Errors *CodeConfirmationBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataCodeConfirmationBadRequestBodyAO2.Errors = o.Errors

	jsonDataCodeConfirmationBadRequestBodyAO2, errCodeConfirmationBadRequestBodyAO2 := swag.WriteJSON(dataCodeConfirmationBadRequestBodyAO2)
	if errCodeConfirmationBadRequestBodyAO2 != nil {
		return nil, errCodeConfirmationBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataCodeConfirmationBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code confirmation bad request body
func (o *CodeConfirmationBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CodeConfirmationBadRequestBodyAllOf0
	// validation for a type composition with CodeConfirmationBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CodeConfirmationBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codeConfirmationBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationBadRequestBodyAO2Errors code confirmation bad request body a o2 errors
// swagger:model CodeConfirmationBadRequestBodyAO2Errors
type CodeConfirmationBadRequestBodyAO2Errors struct {

	// validation
	Validation *CodeConfirmationBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this code confirmation bad request body a o2 errors
func (o *CodeConfirmationBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CodeConfirmationBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codeConfirmationBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationBadRequestBodyAO2ErrorsValidation code confirmation bad request body a o2 errors validation
// swagger:model CodeConfirmationBadRequestBodyAO2ErrorsValidation
type CodeConfirmationBadRequestBodyAO2ErrorsValidation struct {

	// code
	// Enum: [string required]
	Code string `json:"code,omitempty"`

	// password
	// Enum: [string required]
	Password string `json:"password,omitempty"`
}

// Validate validates this code confirmation bad request body a o2 errors validation
func (o *CodeConfirmationBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var codeConfirmationBadRequestBodyAO2ErrorsValidationTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		codeConfirmationBadRequestBodyAO2ErrorsValidationTypeCodePropEnum = append(codeConfirmationBadRequestBodyAO2ErrorsValidationTypeCodePropEnum, v)
	}
}

const (

	// CodeConfirmationBadRequestBodyAO2ErrorsValidationCodeString captures enum value "string"
	CodeConfirmationBadRequestBodyAO2ErrorsValidationCodeString string = "string"

	// CodeConfirmationBadRequestBodyAO2ErrorsValidationCodeRequired captures enum value "required"
	CodeConfirmationBadRequestBodyAO2ErrorsValidationCodeRequired string = "required"
)

// prop value enum
func (o *CodeConfirmationBadRequestBodyAO2ErrorsValidation) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, codeConfirmationBadRequestBodyAO2ErrorsValidationTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CodeConfirmationBadRequestBodyAO2ErrorsValidation) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(o.Code) { // not required
		return nil
	}

	// value enum
	if err := o.validateCodeEnum("codeConfirmationBadRequest"+"."+"errors"+"."+"validation"+"."+"code", "body", o.Code); err != nil {
		return err
	}

	return nil
}

var codeConfirmationBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		codeConfirmationBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum = append(codeConfirmationBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum, v)
	}
}

const (

	// CodeConfirmationBadRequestBodyAO2ErrorsValidationPasswordString captures enum value "string"
	CodeConfirmationBadRequestBodyAO2ErrorsValidationPasswordString string = "string"

	// CodeConfirmationBadRequestBodyAO2ErrorsValidationPasswordRequired captures enum value "required"
	CodeConfirmationBadRequestBodyAO2ErrorsValidationPasswordRequired string = "required"
)

// prop value enum
func (o *CodeConfirmationBadRequestBodyAO2ErrorsValidation) validatePasswordEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, codeConfirmationBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CodeConfirmationBadRequestBodyAO2ErrorsValidation) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(o.Password) { // not required
		return nil
	}

	// value enum
	if err := o.validatePasswordEnum("codeConfirmationBadRequest"+"."+"errors"+"."+"validation"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationBadRequestBodyAllOf0 Ошибка валидации
// swagger:model CodeConfirmationBadRequestBodyAllOf0
type CodeConfirmationBadRequestBodyAllOf0 interface{}

// CodeConfirmationBadRequestBodyAllOf1 code confirmation bad request body all of1
// swagger:model CodeConfirmationBadRequestBodyAllOf1
type CodeConfirmationBadRequestBodyAllOf1 interface{}

// CodeConfirmationBody code confirmation body
// swagger:model CodeConfirmationBody
type CodeConfirmationBody struct {
	models.ConfirmationObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CodeConfirmationBody) UnmarshalJSON(raw []byte) error {
	// CodeConfirmationParamsBodyAO0
	var codeConfirmationParamsBodyAO0 models.ConfirmationObject
	if err := swag.ReadJSON(raw, &codeConfirmationParamsBodyAO0); err != nil {
		return err
	}
	o.ConfirmationObject = codeConfirmationParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CodeConfirmationBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	codeConfirmationParamsBodyAO0, err := swag.WriteJSON(o.ConfirmationObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code confirmation body
func (o *CodeConfirmationBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ConfirmationObject
	if err := o.ConfirmationObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationBody) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationInternalServerErrorBody code confirmation internal server error body
// swagger:model CodeConfirmationInternalServerErrorBody
type CodeConfirmationInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CodeConfirmationInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// CodeConfirmationInternalServerErrorBodyAO0
	var codeConfirmationInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &codeConfirmationInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = codeConfirmationInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CodeConfirmationInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	codeConfirmationInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code confirmation internal server error body
func (o *CodeConfirmationInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationMethodNotAllowedBody code confirmation method not allowed body
// swagger:model CodeConfirmationMethodNotAllowedBody
type CodeConfirmationMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CodeConfirmationMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// CodeConfirmationMethodNotAllowedBodyAO0
	var codeConfirmationMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &codeConfirmationMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = codeConfirmationMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CodeConfirmationMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	codeConfirmationMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code confirmation method not allowed body
func (o *CodeConfirmationMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationNotFoundBody code confirmation not found body
// swagger:model CodeConfirmationNotFoundBody
type CodeConfirmationNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CodeConfirmationNotFoundBody) UnmarshalJSON(raw []byte) error {
	// CodeConfirmationNotFoundBodyAO0
	var codeConfirmationNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &codeConfirmationNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = codeConfirmationNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CodeConfirmationNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	codeConfirmationNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code confirmation not found body
func (o *CodeConfirmationNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationOKBody code confirmation o k body
// swagger:model CodeConfirmationOKBody
type CodeConfirmationOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []interface{} `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CodeConfirmationOKBody) UnmarshalJSON(raw []byte) error {
	// CodeConfirmationOKBodyAO0
	var codeConfirmationOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &codeConfirmationOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = codeConfirmationOKBodyAO0

	// CodeConfirmationOKBodyAO1
	var dataCodeConfirmationOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataCodeConfirmationOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataCodeConfirmationOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CodeConfirmationOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	codeConfirmationOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationOKBodyAO0)

	var dataCodeConfirmationOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}

	dataCodeConfirmationOKBodyAO1.Data = o.Data

	jsonDataCodeConfirmationOKBodyAO1, errCodeConfirmationOKBodyAO1 := swag.WriteJSON(dataCodeConfirmationOKBodyAO1)
	if errCodeConfirmationOKBodyAO1 != nil {
		return nil, errCodeConfirmationOKBodyAO1
	}
	_parts = append(_parts, jsonDataCodeConfirmationOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code confirmation o k body
func (o *CodeConfirmationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CodeConfirmationOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("codeConfirmationOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationOKBody) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CodeConfirmationUnauthorizedBody code confirmation unauthorized body
// swagger:model CodeConfirmationUnauthorizedBody
type CodeConfirmationUnauthorizedBody struct {
	models.Error401Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CodeConfirmationUnauthorizedBody) UnmarshalJSON(raw []byte) error {
	// CodeConfirmationUnauthorizedBodyAO0
	var codeConfirmationUnauthorizedBodyAO0 models.Error401Data
	if err := swag.ReadJSON(raw, &codeConfirmationUnauthorizedBodyAO0); err != nil {
		return err
	}
	o.Error401Data = codeConfirmationUnauthorizedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CodeConfirmationUnauthorizedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	codeConfirmationUnauthorizedBodyAO0, err := swag.WriteJSON(o.Error401Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, codeConfirmationUnauthorizedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this code confirmation unauthorized body
func (o *CodeConfirmationUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error401Data
	if err := o.Error401Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CodeConfirmationUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CodeConfirmationUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res CodeConfirmationUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
