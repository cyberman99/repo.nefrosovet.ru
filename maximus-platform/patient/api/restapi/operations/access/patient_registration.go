// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// PatientRegistrationHandlerFunc turns a function with the right signature into a patient registration handler
type PatientRegistrationHandlerFunc func(PatientRegistrationParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatientRegistrationHandlerFunc) Handle(params PatientRegistrationParams) middleware.Responder {
	return fn(params)
}

// PatientRegistrationHandler interface for that can handle valid patient registration params
type PatientRegistrationHandler interface {
	Handle(PatientRegistrationParams) middleware.Responder
}

// NewPatientRegistration creates a new http.Handler for the patient registration operation
func NewPatientRegistration(ctx *middleware.Context, handler PatientRegistrationHandler) *PatientRegistration {
	return &PatientRegistration{Context: ctx, Handler: handler}
}

/*PatientRegistration swagger:route POST /registration Access patientRegistration

Регистрация пациента

*/
type PatientRegistration struct {
	Context *middleware.Context
	Handler PatientRegistrationHandler
}

func (o *PatientRegistration) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatientRegistrationParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatientRegistrationBadRequestBody patient registration bad request body
// swagger:model PatientRegistrationBadRequestBody
type PatientRegistrationBadRequestBody struct {
	PatientRegistrationBadRequestBodyAllOf0

	PatientRegistrationBadRequestBodyAllOf1

	// errors
	Errors *PatientRegistrationBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientRegistrationBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PatientRegistrationBadRequestBodyAO0
	var patientRegistrationBadRequestBodyAO0 PatientRegistrationBadRequestBodyAllOf0
	if err := swag.ReadJSON(raw, &patientRegistrationBadRequestBodyAO0); err != nil {
		return err
	}
	o.PatientRegistrationBadRequestBodyAllOf0 = patientRegistrationBadRequestBodyAO0

	// PatientRegistrationBadRequestBodyAO1
	var patientRegistrationBadRequestBodyAO1 PatientRegistrationBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &patientRegistrationBadRequestBodyAO1); err != nil {
		return err
	}
	o.PatientRegistrationBadRequestBodyAllOf1 = patientRegistrationBadRequestBodyAO1

	// PatientRegistrationBadRequestBodyAO2
	var dataPatientRegistrationBadRequestBodyAO2 struct {
		Errors *PatientRegistrationBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPatientRegistrationBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataPatientRegistrationBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientRegistrationBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	patientRegistrationBadRequestBodyAO0, err := swag.WriteJSON(o.PatientRegistrationBadRequestBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientRegistrationBadRequestBodyAO0)

	patientRegistrationBadRequestBodyAO1, err := swag.WriteJSON(o.PatientRegistrationBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientRegistrationBadRequestBodyAO1)

	var dataPatientRegistrationBadRequestBodyAO2 struct {
		Errors *PatientRegistrationBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataPatientRegistrationBadRequestBodyAO2.Errors = o.Errors

	jsonDataPatientRegistrationBadRequestBodyAO2, errPatientRegistrationBadRequestBodyAO2 := swag.WriteJSON(dataPatientRegistrationBadRequestBodyAO2)
	if errPatientRegistrationBadRequestBodyAO2 != nil {
		return nil, errPatientRegistrationBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataPatientRegistrationBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient registration bad request body
func (o *PatientRegistrationBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PatientRegistrationBadRequestBodyAllOf0
	// validation for a type composition with PatientRegistrationBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientRegistrationBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patientRegistrationBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientRegistrationBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientRegistrationBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatientRegistrationBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientRegistrationBadRequestBodyAO2Errors patient registration bad request body a o2 errors
// swagger:model PatientRegistrationBadRequestBodyAO2Errors
type PatientRegistrationBadRequestBodyAO2Errors struct {

	// validation
	Validation *PatientRegistrationBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this patient registration bad request body a o2 errors
func (o *PatientRegistrationBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientRegistrationBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patientRegistrationBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientRegistrationBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientRegistrationBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res PatientRegistrationBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientRegistrationBadRequestBodyAO2ErrorsValidation patient registration bad request body a o2 errors validation
// swagger:model PatientRegistrationBadRequestBodyAO2ErrorsValidation
type PatientRegistrationBadRequestBodyAO2ErrorsValidation struct {

	// email
	// Enum: [string format]
	Email string `json:"email,omitempty"`

	// mobile
	// Enum: [string format]
	Mobile string `json:"mobile,omitempty"`
}

// Validate validates this patient registration bad request body a o2 errors validation
func (o *PatientRegistrationBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMobile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patientRegistrationBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","format"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patientRegistrationBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum = append(patientRegistrationBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum, v)
	}
}

const (

	// PatientRegistrationBadRequestBodyAO2ErrorsValidationEmailString captures enum value "string"
	PatientRegistrationBadRequestBodyAO2ErrorsValidationEmailString string = "string"

	// PatientRegistrationBadRequestBodyAO2ErrorsValidationEmailFormat captures enum value "format"
	PatientRegistrationBadRequestBodyAO2ErrorsValidationEmailFormat string = "format"
)

// prop value enum
func (o *PatientRegistrationBadRequestBodyAO2ErrorsValidation) validateEmailEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patientRegistrationBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatientRegistrationBadRequestBodyAO2ErrorsValidation) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	// value enum
	if err := o.validateEmailEnum("patientRegistrationBadRequest"+"."+"errors"+"."+"validation"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

var patientRegistrationBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","format"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patientRegistrationBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum = append(patientRegistrationBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum, v)
	}
}

const (

	// PatientRegistrationBadRequestBodyAO2ErrorsValidationMobileString captures enum value "string"
	PatientRegistrationBadRequestBodyAO2ErrorsValidationMobileString string = "string"

	// PatientRegistrationBadRequestBodyAO2ErrorsValidationMobileFormat captures enum value "format"
	PatientRegistrationBadRequestBodyAO2ErrorsValidationMobileFormat string = "format"
)

// prop value enum
func (o *PatientRegistrationBadRequestBodyAO2ErrorsValidation) validateMobileEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patientRegistrationBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatientRegistrationBadRequestBodyAO2ErrorsValidation) validateMobile(formats strfmt.Registry) error {

	if swag.IsZero(o.Mobile) { // not required
		return nil
	}

	// value enum
	if err := o.validateMobileEnum("patientRegistrationBadRequest"+"."+"errors"+"."+"validation"+"."+"mobile", "body", o.Mobile); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientRegistrationBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientRegistrationBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res PatientRegistrationBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientRegistrationBadRequestBodyAllOf0 Ошибка валидации
// swagger:model PatientRegistrationBadRequestBodyAllOf0
type PatientRegistrationBadRequestBodyAllOf0 interface{}

// PatientRegistrationBadRequestBodyAllOf1 patient registration bad request body all of1
// swagger:model PatientRegistrationBadRequestBodyAllOf1
type PatientRegistrationBadRequestBodyAllOf1 interface{}

// PatientRegistrationBody patient registration body
// swagger:model PatientRegistrationBody
type PatientRegistrationBody struct {
	models.RegistrationObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientRegistrationBody) UnmarshalJSON(raw []byte) error {
	// PatientRegistrationParamsBodyAO0
	var patientRegistrationParamsBodyAO0 models.RegistrationObject
	if err := swag.ReadJSON(raw, &patientRegistrationParamsBodyAO0); err != nil {
		return err
	}
	o.RegistrationObject = patientRegistrationParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientRegistrationBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientRegistrationParamsBodyAO0, err := swag.WriteJSON(o.RegistrationObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientRegistrationParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient registration body
func (o *PatientRegistrationBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.RegistrationObject
	if err := o.RegistrationObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientRegistrationBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientRegistrationBody) UnmarshalBinary(b []byte) error {
	var res PatientRegistrationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientRegistrationInternalServerErrorBody patient registration internal server error body
// swagger:model PatientRegistrationInternalServerErrorBody
type PatientRegistrationInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientRegistrationInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PatientRegistrationInternalServerErrorBodyAO0
	var patientRegistrationInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &patientRegistrationInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = patientRegistrationInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientRegistrationInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientRegistrationInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientRegistrationInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient registration internal server error body
func (o *PatientRegistrationInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientRegistrationInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientRegistrationInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatientRegistrationInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientRegistrationMethodNotAllowedBody patient registration method not allowed body
// swagger:model PatientRegistrationMethodNotAllowedBody
type PatientRegistrationMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientRegistrationMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PatientRegistrationMethodNotAllowedBodyAO0
	var patientRegistrationMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &patientRegistrationMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = patientRegistrationMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientRegistrationMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientRegistrationMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientRegistrationMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient registration method not allowed body
func (o *PatientRegistrationMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientRegistrationMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientRegistrationMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PatientRegistrationMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientRegistrationOKBody patient registration o k body
// swagger:model PatientRegistrationOKBody
type PatientRegistrationOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []interface{} `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientRegistrationOKBody) UnmarshalJSON(raw []byte) error {
	// PatientRegistrationOKBodyAO0
	var patientRegistrationOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &patientRegistrationOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = patientRegistrationOKBodyAO0

	// PatientRegistrationOKBodyAO1
	var dataPatientRegistrationOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPatientRegistrationOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPatientRegistrationOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientRegistrationOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patientRegistrationOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientRegistrationOKBodyAO0)

	var dataPatientRegistrationOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}

	dataPatientRegistrationOKBodyAO1.Data = o.Data

	jsonDataPatientRegistrationOKBodyAO1, errPatientRegistrationOKBodyAO1 := swag.WriteJSON(dataPatientRegistrationOKBodyAO1)
	if errPatientRegistrationOKBodyAO1 != nil {
		return nil, errPatientRegistrationOKBodyAO1
	}
	_parts = append(_parts, jsonDataPatientRegistrationOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient registration o k body
func (o *PatientRegistrationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientRegistrationOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("patientRegistrationOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientRegistrationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientRegistrationOKBody) UnmarshalBinary(b []byte) error {
	var res PatientRegistrationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
