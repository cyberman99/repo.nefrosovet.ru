// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// PasswordRecoveryHandlerFunc turns a function with the right signature into a password recovery handler
type PasswordRecoveryHandlerFunc func(PasswordRecoveryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PasswordRecoveryHandlerFunc) Handle(params PasswordRecoveryParams) middleware.Responder {
	return fn(params)
}

// PasswordRecoveryHandler interface for that can handle valid password recovery params
type PasswordRecoveryHandler interface {
	Handle(PasswordRecoveryParams) middleware.Responder
}

// NewPasswordRecovery creates a new http.Handler for the password recovery operation
func NewPasswordRecovery(ctx *middleware.Context, handler PasswordRecoveryHandler) *PasswordRecovery {
	return &PasswordRecovery{Context: ctx, Handler: handler}
}

/*PasswordRecovery swagger:route POST /recovery Access passwordRecovery

Восстановление доступа пациента

*/
type PasswordRecovery struct {
	Context *middleware.Context
	Handler PasswordRecoveryHandler
}

func (o *PasswordRecovery) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPasswordRecoveryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PasswordRecoveryBadRequestBody password recovery bad request body
// swagger:model PasswordRecoveryBadRequestBody
type PasswordRecoveryBadRequestBody struct {
	PasswordRecoveryBadRequestBodyAllOf0

	PasswordRecoveryBadRequestBodyAllOf1

	// errors
	Errors *PasswordRecoveryBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PasswordRecoveryBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PasswordRecoveryBadRequestBodyAO0
	var passwordRecoveryBadRequestBodyAO0 PasswordRecoveryBadRequestBodyAllOf0
	if err := swag.ReadJSON(raw, &passwordRecoveryBadRequestBodyAO0); err != nil {
		return err
	}
	o.PasswordRecoveryBadRequestBodyAllOf0 = passwordRecoveryBadRequestBodyAO0

	// PasswordRecoveryBadRequestBodyAO1
	var passwordRecoveryBadRequestBodyAO1 PasswordRecoveryBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &passwordRecoveryBadRequestBodyAO1); err != nil {
		return err
	}
	o.PasswordRecoveryBadRequestBodyAllOf1 = passwordRecoveryBadRequestBodyAO1

	// PasswordRecoveryBadRequestBodyAO2
	var dataPasswordRecoveryBadRequestBodyAO2 struct {
		Errors *PasswordRecoveryBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPasswordRecoveryBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataPasswordRecoveryBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PasswordRecoveryBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	passwordRecoveryBadRequestBodyAO0, err := swag.WriteJSON(o.PasswordRecoveryBadRequestBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, passwordRecoveryBadRequestBodyAO0)

	passwordRecoveryBadRequestBodyAO1, err := swag.WriteJSON(o.PasswordRecoveryBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, passwordRecoveryBadRequestBodyAO1)

	var dataPasswordRecoveryBadRequestBodyAO2 struct {
		Errors *PasswordRecoveryBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataPasswordRecoveryBadRequestBodyAO2.Errors = o.Errors

	jsonDataPasswordRecoveryBadRequestBodyAO2, errPasswordRecoveryBadRequestBodyAO2 := swag.WriteJSON(dataPasswordRecoveryBadRequestBodyAO2)
	if errPasswordRecoveryBadRequestBodyAO2 != nil {
		return nil, errPasswordRecoveryBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataPasswordRecoveryBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this password recovery bad request body
func (o *PasswordRecoveryBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PasswordRecoveryBadRequestBodyAllOf0
	// validation for a type composition with PasswordRecoveryBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PasswordRecoveryBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordRecoveryBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PasswordRecoveryBadRequestBodyAO2Errors password recovery bad request body a o2 errors
// swagger:model PasswordRecoveryBadRequestBodyAO2Errors
type PasswordRecoveryBadRequestBodyAO2Errors struct {

	// validation
	Validation *PasswordRecoveryBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this password recovery bad request body a o2 errors
func (o *PasswordRecoveryBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PasswordRecoveryBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordRecoveryBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PasswordRecoveryBadRequestBodyAO2ErrorsValidation password recovery bad request body a o2 errors validation
// swagger:model PasswordRecoveryBadRequestBodyAO2ErrorsValidation
type PasswordRecoveryBadRequestBodyAO2ErrorsValidation struct {

	// email
	// Enum: [string format]
	Email string `json:"email,omitempty"`

	// mobile
	// Enum: [string format]
	Mobile string `json:"mobile,omitempty"`
}

// Validate validates this password recovery bad request body a o2 errors validation
func (o *PasswordRecoveryBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMobile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","format"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum = append(passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum, v)
	}
}

const (

	// PasswordRecoveryBadRequestBodyAO2ErrorsValidationEmailString captures enum value "string"
	PasswordRecoveryBadRequestBodyAO2ErrorsValidationEmailString string = "string"

	// PasswordRecoveryBadRequestBodyAO2ErrorsValidationEmailFormat captures enum value "format"
	PasswordRecoveryBadRequestBodyAO2ErrorsValidationEmailFormat string = "format"
)

// prop value enum
func (o *PasswordRecoveryBadRequestBodyAO2ErrorsValidation) validateEmailEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PasswordRecoveryBadRequestBodyAO2ErrorsValidation) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	// value enum
	if err := o.validateEmailEnum("passwordRecoveryBadRequest"+"."+"errors"+"."+"validation"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

var passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","format"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum = append(passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum, v)
	}
}

const (

	// PasswordRecoveryBadRequestBodyAO2ErrorsValidationMobileString captures enum value "string"
	PasswordRecoveryBadRequestBodyAO2ErrorsValidationMobileString string = "string"

	// PasswordRecoveryBadRequestBodyAO2ErrorsValidationMobileFormat captures enum value "format"
	PasswordRecoveryBadRequestBodyAO2ErrorsValidationMobileFormat string = "format"
)

// prop value enum
func (o *PasswordRecoveryBadRequestBodyAO2ErrorsValidation) validateMobileEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, passwordRecoveryBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PasswordRecoveryBadRequestBodyAO2ErrorsValidation) validateMobile(formats strfmt.Registry) error {

	if swag.IsZero(o.Mobile) { // not required
		return nil
	}

	// value enum
	if err := o.validateMobileEnum("passwordRecoveryBadRequest"+"."+"errors"+"."+"validation"+"."+"mobile", "body", o.Mobile); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PasswordRecoveryBadRequestBodyAllOf0 Ошибка валидации
// swagger:model PasswordRecoveryBadRequestBodyAllOf0
type PasswordRecoveryBadRequestBodyAllOf0 interface{}

// PasswordRecoveryBadRequestBodyAllOf1 password recovery bad request body all of1
// swagger:model PasswordRecoveryBadRequestBodyAllOf1
type PasswordRecoveryBadRequestBodyAllOf1 interface{}

// PasswordRecoveryBody password recovery body
// swagger:model PasswordRecoveryBody
type PasswordRecoveryBody struct {
	models.RegistrationObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PasswordRecoveryBody) UnmarshalJSON(raw []byte) error {
	// PasswordRecoveryParamsBodyAO0
	var passwordRecoveryParamsBodyAO0 models.RegistrationObject
	if err := swag.ReadJSON(raw, &passwordRecoveryParamsBodyAO0); err != nil {
		return err
	}
	o.RegistrationObject = passwordRecoveryParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PasswordRecoveryBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	passwordRecoveryParamsBodyAO0, err := swag.WriteJSON(o.RegistrationObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, passwordRecoveryParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this password recovery body
func (o *PasswordRecoveryBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.RegistrationObject
	if err := o.RegistrationObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryBody) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PasswordRecoveryInternalServerErrorBody password recovery internal server error body
// swagger:model PasswordRecoveryInternalServerErrorBody
type PasswordRecoveryInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PasswordRecoveryInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PasswordRecoveryInternalServerErrorBodyAO0
	var passwordRecoveryInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &passwordRecoveryInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = passwordRecoveryInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PasswordRecoveryInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	passwordRecoveryInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, passwordRecoveryInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this password recovery internal server error body
func (o *PasswordRecoveryInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PasswordRecoveryMethodNotAllowedBody password recovery method not allowed body
// swagger:model PasswordRecoveryMethodNotAllowedBody
type PasswordRecoveryMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PasswordRecoveryMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PasswordRecoveryMethodNotAllowedBodyAO0
	var passwordRecoveryMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &passwordRecoveryMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = passwordRecoveryMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PasswordRecoveryMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	passwordRecoveryMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, passwordRecoveryMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this password recovery method not allowed body
func (o *PasswordRecoveryMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PasswordRecoveryNotFoundBody password recovery not found body
// swagger:model PasswordRecoveryNotFoundBody
type PasswordRecoveryNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PasswordRecoveryNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PasswordRecoveryNotFoundBodyAO0
	var passwordRecoveryNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &passwordRecoveryNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = passwordRecoveryNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PasswordRecoveryNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	passwordRecoveryNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, passwordRecoveryNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this password recovery not found body
func (o *PasswordRecoveryNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PasswordRecoveryOKBody password recovery o k body
// swagger:model PasswordRecoveryOKBody
type PasswordRecoveryOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []interface{} `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PasswordRecoveryOKBody) UnmarshalJSON(raw []byte) error {
	// PasswordRecoveryOKBodyAO0
	var passwordRecoveryOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &passwordRecoveryOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = passwordRecoveryOKBodyAO0

	// PasswordRecoveryOKBodyAO1
	var dataPasswordRecoveryOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPasswordRecoveryOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPasswordRecoveryOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PasswordRecoveryOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	passwordRecoveryOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, passwordRecoveryOKBodyAO0)

	var dataPasswordRecoveryOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}

	dataPasswordRecoveryOKBodyAO1.Data = o.Data

	jsonDataPasswordRecoveryOKBodyAO1, errPasswordRecoveryOKBodyAO1 := swag.WriteJSON(dataPasswordRecoveryOKBodyAO1)
	if errPasswordRecoveryOKBodyAO1 != nil {
		return nil, errPasswordRecoveryOKBodyAO1
	}
	_parts = append(_parts, jsonDataPasswordRecoveryOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this password recovery o k body
func (o *PasswordRecoveryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PasswordRecoveryOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("passwordRecoveryOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PasswordRecoveryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PasswordRecoveryOKBody) UnmarshalBinary(b []byte) error {
	var res PasswordRecoveryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
