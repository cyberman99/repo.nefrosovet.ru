// Code generated by go-swagger; DO NOT EDIT.

package access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// CodeConfirmationOKCode is the HTTP code returned for type CodeConfirmationOK
const CodeConfirmationOKCode int = 200

/*CodeConfirmationOK SUCCESS

swagger:response codeConfirmationOK
*/
type CodeConfirmationOK struct {

	/*
	  In: Body
	*/
	Payload *CodeConfirmationOKBody `json:"body,omitempty"`
}

// NewCodeConfirmationOK creates CodeConfirmationOK with default headers values
func NewCodeConfirmationOK() *CodeConfirmationOK {

	return &CodeConfirmationOK{}
}

// WithPayload adds the payload to the code confirmation o k response
func (o *CodeConfirmationOK) WithPayload(payload *CodeConfirmationOKBody) *CodeConfirmationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the code confirmation o k response
func (o *CodeConfirmationOK) SetPayload(payload *CodeConfirmationOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CodeConfirmationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CodeConfirmationBadRequestCode is the HTTP code returned for type CodeConfirmationBadRequest
const CodeConfirmationBadRequestCode int = 400

/*CodeConfirmationBadRequest Validation error

swagger:response codeConfirmationBadRequest
*/
type CodeConfirmationBadRequest struct {

	/*
	  In: Body
	*/
	Payload *CodeConfirmationBadRequestBody `json:"body,omitempty"`
}

// NewCodeConfirmationBadRequest creates CodeConfirmationBadRequest with default headers values
func NewCodeConfirmationBadRequest() *CodeConfirmationBadRequest {

	return &CodeConfirmationBadRequest{}
}

// WithPayload adds the payload to the code confirmation bad request response
func (o *CodeConfirmationBadRequest) WithPayload(payload *CodeConfirmationBadRequestBody) *CodeConfirmationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the code confirmation bad request response
func (o *CodeConfirmationBadRequest) SetPayload(payload *CodeConfirmationBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CodeConfirmationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CodeConfirmationUnauthorizedCode is the HTTP code returned for type CodeConfirmationUnauthorized
const CodeConfirmationUnauthorizedCode int = 401

/*CodeConfirmationUnauthorized Access denied

swagger:response codeConfirmationUnauthorized
*/
type CodeConfirmationUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *CodeConfirmationUnauthorizedBody `json:"body,omitempty"`
}

// NewCodeConfirmationUnauthorized creates CodeConfirmationUnauthorized with default headers values
func NewCodeConfirmationUnauthorized() *CodeConfirmationUnauthorized {

	return &CodeConfirmationUnauthorized{}
}

// WithPayload adds the payload to the code confirmation unauthorized response
func (o *CodeConfirmationUnauthorized) WithPayload(payload *CodeConfirmationUnauthorizedBody) *CodeConfirmationUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the code confirmation unauthorized response
func (o *CodeConfirmationUnauthorized) SetPayload(payload *CodeConfirmationUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CodeConfirmationUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CodeConfirmationNotFoundCode is the HTTP code returned for type CodeConfirmationNotFound
const CodeConfirmationNotFoundCode int = 404

/*CodeConfirmationNotFound Not found

swagger:response codeConfirmationNotFound
*/
type CodeConfirmationNotFound struct {

	/*
	  In: Body
	*/
	Payload *CodeConfirmationNotFoundBody `json:"body,omitempty"`
}

// NewCodeConfirmationNotFound creates CodeConfirmationNotFound with default headers values
func NewCodeConfirmationNotFound() *CodeConfirmationNotFound {

	return &CodeConfirmationNotFound{}
}

// WithPayload adds the payload to the code confirmation not found response
func (o *CodeConfirmationNotFound) WithPayload(payload *CodeConfirmationNotFoundBody) *CodeConfirmationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the code confirmation not found response
func (o *CodeConfirmationNotFound) SetPayload(payload *CodeConfirmationNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CodeConfirmationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CodeConfirmationMethodNotAllowedCode is the HTTP code returned for type CodeConfirmationMethodNotAllowed
const CodeConfirmationMethodNotAllowedCode int = 405

/*CodeConfirmationMethodNotAllowed Invalid Method

swagger:response codeConfirmationMethodNotAllowed
*/
type CodeConfirmationMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *CodeConfirmationMethodNotAllowedBody `json:"body,omitempty"`
}

// NewCodeConfirmationMethodNotAllowed creates CodeConfirmationMethodNotAllowed with default headers values
func NewCodeConfirmationMethodNotAllowed() *CodeConfirmationMethodNotAllowed {

	return &CodeConfirmationMethodNotAllowed{}
}

// WithPayload adds the payload to the code confirmation method not allowed response
func (o *CodeConfirmationMethodNotAllowed) WithPayload(payload *CodeConfirmationMethodNotAllowedBody) *CodeConfirmationMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the code confirmation method not allowed response
func (o *CodeConfirmationMethodNotAllowed) SetPayload(payload *CodeConfirmationMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CodeConfirmationMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CodeConfirmationInternalServerErrorCode is the HTTP code returned for type CodeConfirmationInternalServerError
const CodeConfirmationInternalServerErrorCode int = 500

/*CodeConfirmationInternalServerError Internal server error

swagger:response codeConfirmationInternalServerError
*/
type CodeConfirmationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *CodeConfirmationInternalServerErrorBody `json:"body,omitempty"`
}

// NewCodeConfirmationInternalServerError creates CodeConfirmationInternalServerError with default headers values
func NewCodeConfirmationInternalServerError() *CodeConfirmationInternalServerError {

	return &CodeConfirmationInternalServerError{}
}

// WithPayload adds the payload to the code confirmation internal server error response
func (o *CodeConfirmationInternalServerError) WithPayload(payload *CodeConfirmationInternalServerErrorBody) *CodeConfirmationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the code confirmation internal server error response
func (o *CodeConfirmationInternalServerError) SetPayload(payload *CodeConfirmationInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CodeConfirmationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
