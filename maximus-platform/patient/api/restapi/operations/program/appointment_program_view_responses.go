// Code generated by go-swagger; DO NOT EDIT.

package program

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// AppointmentProgramViewOKCode is the HTTP code returned for type AppointmentProgramViewOK
const AppointmentProgramViewOKCode int = 200

/*AppointmentProgramViewOK Коллекция объектов программ медицинских назначений

swagger:response appointmentProgramViewOK
*/
type AppointmentProgramViewOK struct {

	/*
	  In: Body
	*/
	Payload *AppointmentProgramViewOKBody `json:"body,omitempty"`
}

// NewAppointmentProgramViewOK creates AppointmentProgramViewOK with default headers values
func NewAppointmentProgramViewOK() *AppointmentProgramViewOK {

	return &AppointmentProgramViewOK{}
}

// WithPayload adds the payload to the appointment program view o k response
func (o *AppointmentProgramViewOK) WithPayload(payload *AppointmentProgramViewOKBody) *AppointmentProgramViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the appointment program view o k response
func (o *AppointmentProgramViewOK) SetPayload(payload *AppointmentProgramViewOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppointmentProgramViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppointmentProgramViewNotFoundCode is the HTTP code returned for type AppointmentProgramViewNotFound
const AppointmentProgramViewNotFoundCode int = 404

/*AppointmentProgramViewNotFound Not found

swagger:response appointmentProgramViewNotFound
*/
type AppointmentProgramViewNotFound struct {

	/*
	  In: Body
	*/
	Payload *AppointmentProgramViewNotFoundBody `json:"body,omitempty"`
}

// NewAppointmentProgramViewNotFound creates AppointmentProgramViewNotFound with default headers values
func NewAppointmentProgramViewNotFound() *AppointmentProgramViewNotFound {

	return &AppointmentProgramViewNotFound{}
}

// WithPayload adds the payload to the appointment program view not found response
func (o *AppointmentProgramViewNotFound) WithPayload(payload *AppointmentProgramViewNotFoundBody) *AppointmentProgramViewNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the appointment program view not found response
func (o *AppointmentProgramViewNotFound) SetPayload(payload *AppointmentProgramViewNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppointmentProgramViewNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppointmentProgramViewMethodNotAllowedCode is the HTTP code returned for type AppointmentProgramViewMethodNotAllowed
const AppointmentProgramViewMethodNotAllowedCode int = 405

/*AppointmentProgramViewMethodNotAllowed Invalid Method

swagger:response appointmentProgramViewMethodNotAllowed
*/
type AppointmentProgramViewMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *AppointmentProgramViewMethodNotAllowedBody `json:"body,omitempty"`
}

// NewAppointmentProgramViewMethodNotAllowed creates AppointmentProgramViewMethodNotAllowed with default headers values
func NewAppointmentProgramViewMethodNotAllowed() *AppointmentProgramViewMethodNotAllowed {

	return &AppointmentProgramViewMethodNotAllowed{}
}

// WithPayload adds the payload to the appointment program view method not allowed response
func (o *AppointmentProgramViewMethodNotAllowed) WithPayload(payload *AppointmentProgramViewMethodNotAllowedBody) *AppointmentProgramViewMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the appointment program view method not allowed response
func (o *AppointmentProgramViewMethodNotAllowed) SetPayload(payload *AppointmentProgramViewMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppointmentProgramViewMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AppointmentProgramViewInternalServerErrorCode is the HTTP code returned for type AppointmentProgramViewInternalServerError
const AppointmentProgramViewInternalServerErrorCode int = 500

/*AppointmentProgramViewInternalServerError Internal server error

swagger:response appointmentProgramViewInternalServerError
*/
type AppointmentProgramViewInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *AppointmentProgramViewInternalServerErrorBody `json:"body,omitempty"`
}

// NewAppointmentProgramViewInternalServerError creates AppointmentProgramViewInternalServerError with default headers values
func NewAppointmentProgramViewInternalServerError() *AppointmentProgramViewInternalServerError {

	return &AppointmentProgramViewInternalServerError{}
}

// WithPayload adds the payload to the appointment program view internal server error response
func (o *AppointmentProgramViewInternalServerError) WithPayload(payload *AppointmentProgramViewInternalServerErrorBody) *AppointmentProgramViewInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the appointment program view internal server error response
func (o *AppointmentProgramViewInternalServerError) SetPayload(payload *AppointmentProgramViewInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AppointmentProgramViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
