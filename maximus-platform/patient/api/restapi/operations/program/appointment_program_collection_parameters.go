// Code generated by go-swagger; DO NOT EDIT.

package program

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAppointmentProgramCollectionParams creates a new AppointmentProgramCollectionParams object
// no default values defined in spec.
func NewAppointmentProgramCollectionParams() AppointmentProgramCollectionParams {

	return AppointmentProgramCollectionParams{}
}

// AppointmentProgramCollectionParams contains all the bound params for the appointment program collection operation
// typically these are obtained from a http.Request
//
// swagger:parameters AppointmentProgramCollection
type AppointmentProgramCollectionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Лимит
	  In: query
	*/
	Limit *int64
	/*Шаг
	  In: query
	*/
	Offset *int64
	/*Идентификатор пользователя
	  Required: true
	  In: path
	*/
	UserID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAppointmentProgramCollectionParams() beforehand.
func (o *AppointmentProgramCollectionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	rUserID, rhkUserID, _ := route.Params.GetOK("userID")
	if err := o.bindUserID(rUserID, rhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *AppointmentProgramCollectionParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *AppointmentProgramCollectionParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindUserID binds and validates parameter UserID from path.
func (o *AppointmentProgramCollectionParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("userID", "path", "strfmt.UUID", raw)
	}
	o.UserID = *(value.(*strfmt.UUID))

	if err := o.validateUserID(formats); err != nil {
		return err
	}

	return nil
}

// validateUserID carries on validations for parameter UserID
func (o *AppointmentProgramCollectionParams) validateUserID(formats strfmt.Registry) error {

	if err := validate.FormatOf("userID", "path", "uuid", o.UserID.String(), formats); err != nil {
		return err
	}
	return nil
}
