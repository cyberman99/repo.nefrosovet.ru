// Code generated by go-swagger; DO NOT EDIT.

package program

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAppointmentProgramViewParams creates a new AppointmentProgramViewParams object
// no default values defined in spec.
func NewAppointmentProgramViewParams() AppointmentProgramViewParams {

	return AppointmentProgramViewParams{}
}

// AppointmentProgramViewParams contains all the bound params for the appointment program view operation
// typically these are obtained from a http.Request
//
// swagger:parameters AppointmentProgramView
type AppointmentProgramViewParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Идентификатор программы медицинских назначений
	  Required: true
	  In: path
	*/
	ProgramID strfmt.UUID
	/*Идентификатор пользователя
	  Required: true
	  In: path
	*/
	UserID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewAppointmentProgramViewParams() beforehand.
func (o *AppointmentProgramViewParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rProgramID, rhkProgramID, _ := route.Params.GetOK("programID")
	if err := o.bindProgramID(rProgramID, rhkProgramID, route.Formats); err != nil {
		res = append(res, err)
	}

	rUserID, rhkUserID, _ := route.Params.GetOK("userID")
	if err := o.bindUserID(rUserID, rhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindProgramID binds and validates parameter ProgramID from path.
func (o *AppointmentProgramViewParams) bindProgramID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("programID", "path", "strfmt.UUID", raw)
	}
	o.ProgramID = *(value.(*strfmt.UUID))

	if err := o.validateProgramID(formats); err != nil {
		return err
	}

	return nil
}

// validateProgramID carries on validations for parameter ProgramID
func (o *AppointmentProgramViewParams) validateProgramID(formats strfmt.Registry) error {

	if err := validate.FormatOf("programID", "path", "uuid", o.ProgramID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindUserID binds and validates parameter UserID from path.
func (o *AppointmentProgramViewParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("userID", "path", "strfmt.UUID", raw)
	}
	o.UserID = *(value.(*strfmt.UUID))

	if err := o.validateUserID(formats); err != nil {
		return err
	}

	return nil
}

// validateUserID carries on validations for parameter UserID
func (o *AppointmentProgramViewParams) validateUserID(formats strfmt.Registry) error {

	if err := validate.FormatOf("userID", "path", "uuid", o.UserID.String(), formats); err != nil {
		return err
	}
	return nil
}
