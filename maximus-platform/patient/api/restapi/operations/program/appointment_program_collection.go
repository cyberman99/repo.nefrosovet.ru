// Code generated by go-swagger; DO NOT EDIT.

package program

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// AppointmentProgramCollectionHandlerFunc turns a function with the right signature into a appointment program collection handler
type AppointmentProgramCollectionHandlerFunc func(AppointmentProgramCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppointmentProgramCollectionHandlerFunc) Handle(params AppointmentProgramCollectionParams) middleware.Responder {
	return fn(params)
}

// AppointmentProgramCollectionHandler interface for that can handle valid appointment program collection params
type AppointmentProgramCollectionHandler interface {
	Handle(AppointmentProgramCollectionParams) middleware.Responder
}

// NewAppointmentProgramCollection creates a new http.Handler for the appointment program collection operation
func NewAppointmentProgramCollection(ctx *middleware.Context, handler AppointmentProgramCollectionHandler) *AppointmentProgramCollection {
	return &AppointmentProgramCollection{Context: ctx, Handler: handler}
}

/*AppointmentProgramCollection swagger:route GET /users/{userID}/programs Program appointmentProgramCollection

Коллекция программ назначений

*/
type AppointmentProgramCollection struct {
	Context *middleware.Context
	Handler AppointmentProgramCollectionHandler
}

func (o *AppointmentProgramCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppointmentProgramCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AppointmentProgramCollectionInternalServerErrorBody appointment program collection internal server error body
// swagger:model AppointmentProgramCollectionInternalServerErrorBody
type AppointmentProgramCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramCollectionInternalServerErrorBodyAO0
	var appointmentProgramCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &appointmentProgramCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = appointmentProgramCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentProgramCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program collection internal server error body
func (o *AppointmentProgramCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentProgramCollectionMethodNotAllowedBody appointment program collection method not allowed body
// swagger:model AppointmentProgramCollectionMethodNotAllowedBody
type AppointmentProgramCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramCollectionMethodNotAllowedBodyAO0
	var appointmentProgramCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &appointmentProgramCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = appointmentProgramCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentProgramCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program collection method not allowed body
func (o *AppointmentProgramCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentProgramCollectionNotFoundBody appointment program collection not found body
// swagger:model AppointmentProgramCollectionNotFoundBody
type AppointmentProgramCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramCollectionNotFoundBodyAO0
	var appointmentProgramCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &appointmentProgramCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = appointmentProgramCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentProgramCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program collection not found body
func (o *AppointmentProgramCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentProgramCollectionOKBody appointment program collection o k body
// swagger:model AppointmentProgramCollectionOKBody
type AppointmentProgramCollectionOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*ProgramDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramCollectionOKBodyAO0
	var appointmentProgramCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &appointmentProgramCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = appointmentProgramCollectionOKBodyAO0

	// AppointmentProgramCollectionOKBodyAO1
	var dataAppointmentProgramCollectionOKBodyAO1 struct {
		Data []*ProgramDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataAppointmentProgramCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataAppointmentProgramCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	appointmentProgramCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramCollectionOKBodyAO0)

	var dataAppointmentProgramCollectionOKBodyAO1 struct {
		Data []*ProgramDataItem `json:"data"`
	}

	dataAppointmentProgramCollectionOKBodyAO1.Data = o.Data

	jsonDataAppointmentProgramCollectionOKBodyAO1, errAppointmentProgramCollectionOKBodyAO1 := swag.WriteJSON(dataAppointmentProgramCollectionOKBodyAO1)
	if errAppointmentProgramCollectionOKBodyAO1 != nil {
		return nil, errAppointmentProgramCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataAppointmentProgramCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program collection o k body
func (o *AppointmentProgramCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AppointmentProgramCollectionOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("appointmentProgramCollectionOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointmentProgramCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentProgramCollectionUnauthorizedBody appointment program collection unauthorized body
// swagger:model AppointmentProgramCollectionUnauthorizedBody
type AppointmentProgramCollectionUnauthorizedBody struct {
	models.Error401Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramCollectionUnauthorizedBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramCollectionUnauthorizedBodyAO0
	var appointmentProgramCollectionUnauthorizedBodyAO0 models.Error401Data
	if err := swag.ReadJSON(raw, &appointmentProgramCollectionUnauthorizedBodyAO0); err != nil {
		return err
	}
	o.Error401Data = appointmentProgramCollectionUnauthorizedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramCollectionUnauthorizedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentProgramCollectionUnauthorizedBodyAO0, err := swag.WriteJSON(o.Error401Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramCollectionUnauthorizedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program collection unauthorized body
func (o *AppointmentProgramCollectionUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error401Data
	if err := o.Error401Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramCollectionUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramCollectionUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramCollectionUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// program-data-item program data item
// swagger:model program-data-item
type ProgramDataItem struct {
	models.AppointmentProgramObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ProgramDataItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.AppointmentProgramObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.AppointmentProgramObject = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ProgramDataItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.AppointmentProgramObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this program data item
func (o *ProgramDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AppointmentProgramObject
	if err := o.AppointmentProgramObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ProgramDataItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ProgramDataItem) UnmarshalBinary(b []byte) error {
	var res ProgramDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
