// Code generated by go-swagger; DO NOT EDIT.

package program

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// AppointmentProgramViewHandlerFunc turns a function with the right signature into a appointment program view handler
type AppointmentProgramViewHandlerFunc func(AppointmentProgramViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AppointmentProgramViewHandlerFunc) Handle(params AppointmentProgramViewParams) middleware.Responder {
	return fn(params)
}

// AppointmentProgramViewHandler interface for that can handle valid appointment program view params
type AppointmentProgramViewHandler interface {
	Handle(AppointmentProgramViewParams) middleware.Responder
}

// NewAppointmentProgramView creates a new http.Handler for the appointment program view operation
func NewAppointmentProgramView(ctx *middleware.Context, handler AppointmentProgramViewHandler) *AppointmentProgramView {
	return &AppointmentProgramView{Context: ctx, Handler: handler}
}

/*AppointmentProgramView swagger:route GET /users/{userID}/programs/{programID} Program appointmentProgramView

Информация о программе назначений

*/
type AppointmentProgramView struct {
	Context *middleware.Context
	Handler AppointmentProgramViewHandler
}

func (o *AppointmentProgramView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewAppointmentProgramViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AppointmentProgramViewInternalServerErrorBody appointment program view internal server error body
// swagger:model AppointmentProgramViewInternalServerErrorBody
type AppointmentProgramViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramViewInternalServerErrorBodyAO0
	var appointmentProgramViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &appointmentProgramViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = appointmentProgramViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentProgramViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program view internal server error body
func (o *AppointmentProgramViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentProgramViewMethodNotAllowedBody appointment program view method not allowed body
// swagger:model AppointmentProgramViewMethodNotAllowedBody
type AppointmentProgramViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramViewMethodNotAllowedBodyAO0
	var appointmentProgramViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &appointmentProgramViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = appointmentProgramViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentProgramViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program view method not allowed body
func (o *AppointmentProgramViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentProgramViewNotFoundBody appointment program view not found body
// swagger:model AppointmentProgramViewNotFoundBody
type AppointmentProgramViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramViewNotFoundBodyAO0
	var appointmentProgramViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &appointmentProgramViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = appointmentProgramViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	appointmentProgramViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program view not found body
func (o *AppointmentProgramViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AppointmentProgramViewOKBody appointment program view o k body
// swagger:model AppointmentProgramViewOKBody
type AppointmentProgramViewOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*ProgramDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppointmentProgramViewOKBody) UnmarshalJSON(raw []byte) error {
	// AppointmentProgramViewOKBodyAO0
	var appointmentProgramViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &appointmentProgramViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = appointmentProgramViewOKBodyAO0

	// AppointmentProgramViewOKBodyAO1
	var dataAppointmentProgramViewOKBodyAO1 struct {
		Data []*ProgramDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataAppointmentProgramViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataAppointmentProgramViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppointmentProgramViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	appointmentProgramViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appointmentProgramViewOKBodyAO0)

	var dataAppointmentProgramViewOKBodyAO1 struct {
		Data []*ProgramDataItem `json:"data"`
	}

	dataAppointmentProgramViewOKBodyAO1.Data = o.Data

	jsonDataAppointmentProgramViewOKBodyAO1, errAppointmentProgramViewOKBodyAO1 := swag.WriteJSON(dataAppointmentProgramViewOKBodyAO1)
	if errAppointmentProgramViewOKBodyAO1 != nil {
		return nil, errAppointmentProgramViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataAppointmentProgramViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this appointment program view o k body
func (o *AppointmentProgramViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AppointmentProgramViewOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("appointmentProgramViewOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointmentProgramViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AppointmentProgramViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppointmentProgramViewOKBody) UnmarshalBinary(b []byte) error {
	var res AppointmentProgramViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
