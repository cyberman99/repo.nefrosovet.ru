// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"repo.nefrosovet.ru/maximus-platform/patient/api/restapi/operations/access"
	"repo.nefrosovet.ru/maximus-platform/patient/api/restapi/operations/appointment"
	"repo.nefrosovet.ru/maximus-platform/patient/api/restapi/operations/employee"
	"repo.nefrosovet.ru/maximus-platform/patient/api/restapi/operations/profile"
	"repo.nefrosovet.ru/maximus-platform/patient/api/restapi/operations/program"
)

// NewPatientWPAPI creates a new PatientWP instance
func NewPatientWPAPI(spec *loads.Document) *PatientWPAPI {
	return &PatientWPAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		AppointmentAppointmentCollectionHandler: appointment.AppointmentCollectionHandlerFunc(func(params appointment.AppointmentCollectionParams) middleware.Responder {
			return middleware.NotImplemented("operation AppointmentAppointmentCollection has not yet been implemented")
		}),
		AppointmentAppointmentParamsCollectionHandler: appointment.AppointmentParamsCollectionHandlerFunc(func(params appointment.AppointmentParamsCollectionParams) middleware.Responder {
			return middleware.NotImplemented("operation AppointmentAppointmentParamsCollection has not yet been implemented")
		}),
		ProgramAppointmentProgramCollectionHandler: program.AppointmentProgramCollectionHandlerFunc(func(params program.AppointmentProgramCollectionParams) middleware.Responder {
			return middleware.NotImplemented("operation ProgramAppointmentProgramCollection has not yet been implemented")
		}),
		ProgramAppointmentProgramViewHandler: program.AppointmentProgramViewHandlerFunc(func(params program.AppointmentProgramViewParams) middleware.Responder {
			return middleware.NotImplemented("operation ProgramAppointmentProgramView has not yet been implemented")
		}),
		AppointmentAppointmentViewHandler: appointment.AppointmentViewHandlerFunc(func(params appointment.AppointmentViewParams) middleware.Responder {
			return middleware.NotImplemented("operation AppointmentAppointmentView has not yet been implemented")
		}),
		AccessCodeConfirmationHandler: access.CodeConfirmationHandlerFunc(func(params access.CodeConfirmationParams) middleware.Responder {
			return middleware.NotImplemented("operation AccessCodeConfirmation has not yet been implemented")
		}),
		EmployeeEmployeeViewHandler: employee.EmployeeViewHandlerFunc(func(params employee.EmployeeViewParams) middleware.Responder {
			return middleware.NotImplemented("operation EmployeeEmployeeView has not yet been implemented")
		}),
		AccessPasswordRecoveryHandler: access.PasswordRecoveryHandlerFunc(func(params access.PasswordRecoveryParams) middleware.Responder {
			return middleware.NotImplemented("operation AccessPasswordRecovery has not yet been implemented")
		}),
		ProfilePatientContactUpdateHandler: profile.PatientContactUpdateHandlerFunc(func(params profile.PatientContactUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfilePatientContactUpdate has not yet been implemented")
		}),
		ProfilePatientProfileUpdateHandler: profile.PatientProfileUpdateHandlerFunc(func(params profile.PatientProfileUpdateParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfilePatientProfileUpdate has not yet been implemented")
		}),
		ProfilePatientProfileViewHandler: profile.PatientProfileViewHandlerFunc(func(params profile.PatientProfileViewParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfilePatientProfileView has not yet been implemented")
		}),
		AccessPatientRegistrationHandler: access.PatientRegistrationHandlerFunc(func(params access.PatientRegistrationParams) middleware.Responder {
			return middleware.NotImplemented("operation AccessPatientRegistration has not yet been implemented")
		}),
		ProfilePatientcontactViewHandler: profile.PatientcontactViewHandlerFunc(func(params profile.PatientcontactViewParams) middleware.Responder {
			return middleware.NotImplemented("operation ProfilePatientcontactView has not yet been implemented")
		}),
	}
}

/*PatientWPAPI #### RESTFUL PATIENT WP API
 */
type PatientWPAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// AppointmentAppointmentCollectionHandler sets the operation handler for the appointment collection operation
	AppointmentAppointmentCollectionHandler appointment.AppointmentCollectionHandler
	// AppointmentAppointmentParamsCollectionHandler sets the operation handler for the appointment params collection operation
	AppointmentAppointmentParamsCollectionHandler appointment.AppointmentParamsCollectionHandler
	// ProgramAppointmentProgramCollectionHandler sets the operation handler for the appointment program collection operation
	ProgramAppointmentProgramCollectionHandler program.AppointmentProgramCollectionHandler
	// ProgramAppointmentProgramViewHandler sets the operation handler for the appointment program view operation
	ProgramAppointmentProgramViewHandler program.AppointmentProgramViewHandler
	// AppointmentAppointmentViewHandler sets the operation handler for the appointment view operation
	AppointmentAppointmentViewHandler appointment.AppointmentViewHandler
	// AccessCodeConfirmationHandler sets the operation handler for the code confirmation operation
	AccessCodeConfirmationHandler access.CodeConfirmationHandler
	// EmployeeEmployeeViewHandler sets the operation handler for the employee view operation
	EmployeeEmployeeViewHandler employee.EmployeeViewHandler
	// AccessPasswordRecoveryHandler sets the operation handler for the password recovery operation
	AccessPasswordRecoveryHandler access.PasswordRecoveryHandler
	// ProfilePatientContactUpdateHandler sets the operation handler for the patient contact update operation
	ProfilePatientContactUpdateHandler profile.PatientContactUpdateHandler
	// ProfilePatientProfileUpdateHandler sets the operation handler for the patient profile update operation
	ProfilePatientProfileUpdateHandler profile.PatientProfileUpdateHandler
	// ProfilePatientProfileViewHandler sets the operation handler for the patient profile view operation
	ProfilePatientProfileViewHandler profile.PatientProfileViewHandler
	// AccessPatientRegistrationHandler sets the operation handler for the patient registration operation
	AccessPatientRegistrationHandler access.PatientRegistrationHandler
	// ProfilePatientcontactViewHandler sets the operation handler for the patientcontact view operation
	ProfilePatientcontactViewHandler profile.PatientcontactViewHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *PatientWPAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *PatientWPAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *PatientWPAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *PatientWPAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *PatientWPAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *PatientWPAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *PatientWPAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the PatientWPAPI
func (o *PatientWPAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AppointmentAppointmentCollectionHandler == nil {
		unregistered = append(unregistered, "appointment.AppointmentCollectionHandler")
	}

	if o.AppointmentAppointmentParamsCollectionHandler == nil {
		unregistered = append(unregistered, "appointment.AppointmentParamsCollectionHandler")
	}

	if o.ProgramAppointmentProgramCollectionHandler == nil {
		unregistered = append(unregistered, "program.AppointmentProgramCollectionHandler")
	}

	if o.ProgramAppointmentProgramViewHandler == nil {
		unregistered = append(unregistered, "program.AppointmentProgramViewHandler")
	}

	if o.AppointmentAppointmentViewHandler == nil {
		unregistered = append(unregistered, "appointment.AppointmentViewHandler")
	}

	if o.AccessCodeConfirmationHandler == nil {
		unregistered = append(unregistered, "access.CodeConfirmationHandler")
	}

	if o.EmployeeEmployeeViewHandler == nil {
		unregistered = append(unregistered, "employee.EmployeeViewHandler")
	}

	if o.AccessPasswordRecoveryHandler == nil {
		unregistered = append(unregistered, "access.PasswordRecoveryHandler")
	}

	if o.ProfilePatientContactUpdateHandler == nil {
		unregistered = append(unregistered, "profile.PatientContactUpdateHandler")
	}

	if o.ProfilePatientProfileUpdateHandler == nil {
		unregistered = append(unregistered, "profile.PatientProfileUpdateHandler")
	}

	if o.ProfilePatientProfileViewHandler == nil {
		unregistered = append(unregistered, "profile.PatientProfileViewHandler")
	}

	if o.AccessPatientRegistrationHandler == nil {
		unregistered = append(unregistered, "access.PatientRegistrationHandler")
	}

	if o.ProfilePatientcontactViewHandler == nil {
		unregistered = append(unregistered, "profile.PatientcontactViewHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *PatientWPAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *PatientWPAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *PatientWPAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *PatientWPAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *PatientWPAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *PatientWPAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the patient w p API
func (o *PatientWPAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *PatientWPAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/appointments"] = appointment.NewAppointmentCollection(o.context, o.AppointmentAppointmentCollectionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/appointments/{appointmentID}/params"] = appointment.NewAppointmentParamsCollection(o.context, o.AppointmentAppointmentParamsCollectionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/programs"] = program.NewAppointmentProgramCollection(o.context, o.ProgramAppointmentProgramCollectionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/programs/{programID}"] = program.NewAppointmentProgramView(o.context, o.ProgramAppointmentProgramViewHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/appointments/{appointmentID}"] = appointment.NewAppointmentView(o.context, o.AppointmentAppointmentViewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/confirm"] = access.NewCodeConfirmation(o.context, o.AccessCodeConfirmationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/employees/{employeeID}"] = employee.NewEmployeeView(o.context, o.EmployeeEmployeeViewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/recovery"] = access.NewPasswordRecovery(o.context, o.AccessPasswordRecoveryHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/{userID}/contacts"] = profile.NewPatientContactUpdate(o.context, o.ProfilePatientContactUpdateHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/users/{userID}"] = profile.NewPatientProfileUpdate(o.context, o.ProfilePatientProfileUpdateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}"] = profile.NewPatientProfileView(o.context, o.ProfilePatientProfileViewHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/registration"] = access.NewPatientRegistration(o.context, o.AccessPatientRegistrationHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{userID}/contacts"] = profile.NewPatientcontactView(o.context, o.ProfilePatientcontactViewHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *PatientWPAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *PatientWPAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *PatientWPAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *PatientWPAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
