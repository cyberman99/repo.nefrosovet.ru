// Code generated by go-swagger; DO NOT EDIT.

package employee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// EmployeeViewHandlerFunc turns a function with the right signature into a employee view handler
type EmployeeViewHandlerFunc func(EmployeeViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EmployeeViewHandlerFunc) Handle(params EmployeeViewParams) middleware.Responder {
	return fn(params)
}

// EmployeeViewHandler interface for that can handle valid employee view params
type EmployeeViewHandler interface {
	Handle(EmployeeViewParams) middleware.Responder
}

// NewEmployeeView creates a new http.Handler for the employee view operation
func NewEmployeeView(ctx *middleware.Context, handler EmployeeViewHandler) *EmployeeView {
	return &EmployeeView{Context: ctx, Handler: handler}
}

/*EmployeeView swagger:route GET /employees/{employeeID} Employee employeeView

Информация о сотруднике клиники

*/
type EmployeeView struct {
	Context *middleware.Context
	Handler EmployeeViewHandler
}

func (o *EmployeeView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewEmployeeViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// EmployeeViewInternalServerErrorBody employee view internal server error body
// swagger:model EmployeeViewInternalServerErrorBody
type EmployeeViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EmployeeViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// EmployeeViewInternalServerErrorBodyAO0
	var employeeViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &employeeViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = employeeViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EmployeeViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	employeeViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, employeeViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this employee view internal server error body
func (o *EmployeeViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EmployeeViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EmployeeViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res EmployeeViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EmployeeViewMethodNotAllowedBody employee view method not allowed body
// swagger:model EmployeeViewMethodNotAllowedBody
type EmployeeViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EmployeeViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// EmployeeViewMethodNotAllowedBodyAO0
	var employeeViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &employeeViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = employeeViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EmployeeViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	employeeViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, employeeViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this employee view method not allowed body
func (o *EmployeeViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EmployeeViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EmployeeViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res EmployeeViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EmployeeViewNotFoundBody employee view not found body
// swagger:model EmployeeViewNotFoundBody
type EmployeeViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EmployeeViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// EmployeeViewNotFoundBodyAO0
	var employeeViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &employeeViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = employeeViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EmployeeViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	employeeViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, employeeViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this employee view not found body
func (o *EmployeeViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EmployeeViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EmployeeViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res EmployeeViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EmployeeViewOKBody employee view o k body
// swagger:model EmployeeViewOKBody
type EmployeeViewOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*EmployeeDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EmployeeViewOKBody) UnmarshalJSON(raw []byte) error {
	// EmployeeViewOKBodyAO0
	var employeeViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &employeeViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = employeeViewOKBodyAO0

	// EmployeeViewOKBodyAO1
	var dataEmployeeViewOKBodyAO1 struct {
		Data []*EmployeeDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataEmployeeViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataEmployeeViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EmployeeViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	employeeViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, employeeViewOKBodyAO0)

	var dataEmployeeViewOKBodyAO1 struct {
		Data []*EmployeeDataItem `json:"data"`
	}

	dataEmployeeViewOKBodyAO1.Data = o.Data

	jsonDataEmployeeViewOKBodyAO1, errEmployeeViewOKBodyAO1 := swag.WriteJSON(dataEmployeeViewOKBodyAO1)
	if errEmployeeViewOKBodyAO1 != nil {
		return nil, errEmployeeViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataEmployeeViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this employee view o k body
func (o *EmployeeViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EmployeeViewOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("employeeViewOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("employeeViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *EmployeeViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EmployeeViewOKBody) UnmarshalBinary(b []byte) error {
	var res EmployeeViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// employee-data-item employee data item
// swagger:model employee-data-item
type EmployeeDataItem struct {
	models.EmployeeObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EmployeeDataItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.EmployeeObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.EmployeeObject = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EmployeeDataItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.EmployeeObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this employee data item
func (o *EmployeeDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.EmployeeObject
	if err := o.EmployeeObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EmployeeDataItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EmployeeDataItem) UnmarshalBinary(b []byte) error {
	var res EmployeeDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
