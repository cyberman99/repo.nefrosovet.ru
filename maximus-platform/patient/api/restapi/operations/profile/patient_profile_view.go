// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// PatientProfileViewHandlerFunc turns a function with the right signature into a patient profile view handler
type PatientProfileViewHandlerFunc func(PatientProfileViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatientProfileViewHandlerFunc) Handle(params PatientProfileViewParams) middleware.Responder {
	return fn(params)
}

// PatientProfileViewHandler interface for that can handle valid patient profile view params
type PatientProfileViewHandler interface {
	Handle(PatientProfileViewParams) middleware.Responder
}

// NewPatientProfileView creates a new http.Handler for the patient profile view operation
func NewPatientProfileView(ctx *middleware.Context, handler PatientProfileViewHandler) *PatientProfileView {
	return &PatientProfileView{Context: ctx, Handler: handler}
}

/*PatientProfileView swagger:route GET /users/{userID} Profile patientProfileView

Профиль пациента

*/
type PatientProfileView struct {
	Context *middleware.Context
	Handler PatientProfileViewHandler
}

func (o *PatientProfileView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatientProfileViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatientProfileViewInternalServerErrorBody patient profile view internal server error body
// swagger:model PatientProfileViewInternalServerErrorBody
type PatientProfileViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientProfileViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PatientProfileViewInternalServerErrorBodyAO0
	var patientProfileViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &patientProfileViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = patientProfileViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientProfileViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientProfileViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientProfileViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient profile view internal server error body
func (o *PatientProfileViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientProfileViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientProfileViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatientProfileViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientProfileViewMethodNotAllowedBody patient profile view method not allowed body
// swagger:model PatientProfileViewMethodNotAllowedBody
type PatientProfileViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientProfileViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PatientProfileViewMethodNotAllowedBodyAO0
	var patientProfileViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &patientProfileViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = patientProfileViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientProfileViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientProfileViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientProfileViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient profile view method not allowed body
func (o *PatientProfileViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientProfileViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientProfileViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PatientProfileViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientProfileViewNotFoundBody patient profile view not found body
// swagger:model PatientProfileViewNotFoundBody
type PatientProfileViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientProfileViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PatientProfileViewNotFoundBodyAO0
	var patientProfileViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &patientProfileViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = patientProfileViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientProfileViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientProfileViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientProfileViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient profile view not found body
func (o *PatientProfileViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientProfileViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientProfileViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatientProfileViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientProfileViewOKBody patient profile view o k body
// swagger:model PatientProfileViewOKBody
type PatientProfileViewOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*ProfileDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientProfileViewOKBody) UnmarshalJSON(raw []byte) error {
	// PatientProfileViewOKBodyAO0
	var patientProfileViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &patientProfileViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = patientProfileViewOKBodyAO0

	// PatientProfileViewOKBodyAO1
	var dataPatientProfileViewOKBodyAO1 struct {
		Data []*ProfileDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPatientProfileViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPatientProfileViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientProfileViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patientProfileViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientProfileViewOKBodyAO0)

	var dataPatientProfileViewOKBodyAO1 struct {
		Data []*ProfileDataItem `json:"data"`
	}

	dataPatientProfileViewOKBodyAO1.Data = o.Data

	jsonDataPatientProfileViewOKBodyAO1, errPatientProfileViewOKBodyAO1 := swag.WriteJSON(dataPatientProfileViewOKBodyAO1)
	if errPatientProfileViewOKBodyAO1 != nil {
		return nil, errPatientProfileViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataPatientProfileViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient profile view o k body
func (o *PatientProfileViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientProfileViewOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("patientProfileViewOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patientProfileViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientProfileViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientProfileViewOKBody) UnmarshalBinary(b []byte) error {
	var res PatientProfileViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
