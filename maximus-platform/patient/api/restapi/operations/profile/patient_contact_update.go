// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// PatientContactUpdateHandlerFunc turns a function with the right signature into a patient contact update handler
type PatientContactUpdateHandlerFunc func(PatientContactUpdateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatientContactUpdateHandlerFunc) Handle(params PatientContactUpdateParams) middleware.Responder {
	return fn(params)
}

// PatientContactUpdateHandler interface for that can handle valid patient contact update params
type PatientContactUpdateHandler interface {
	Handle(PatientContactUpdateParams) middleware.Responder
}

// NewPatientContactUpdate creates a new http.Handler for the patient contact update operation
func NewPatientContactUpdate(ctx *middleware.Context, handler PatientContactUpdateHandler) *PatientContactUpdate {
	return &PatientContactUpdate{Context: ctx, Handler: handler}
}

/*PatientContactUpdate swagger:route PATCH /users/{userID}/contacts Profile patientContactUpdate

Редактирование контактов пациента

*/
type PatientContactUpdate struct {
	Context *middleware.Context
	Handler PatientContactUpdateHandler
}

func (o *PatientContactUpdate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatientContactUpdateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatientContactUpdateBadRequestBody patient contact update bad request body
// swagger:model PatientContactUpdateBadRequestBody
type PatientContactUpdateBadRequestBody struct {
	PatientContactUpdateBadRequestBodyAllOf0

	PatientContactUpdateBadRequestBodyAllOf1

	// errors
	Errors *PatientContactUpdateBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientContactUpdateBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PatientContactUpdateBadRequestBodyAO0
	var patientContactUpdateBadRequestBodyAO0 PatientContactUpdateBadRequestBodyAllOf0
	if err := swag.ReadJSON(raw, &patientContactUpdateBadRequestBodyAO0); err != nil {
		return err
	}
	o.PatientContactUpdateBadRequestBodyAllOf0 = patientContactUpdateBadRequestBodyAO0

	// PatientContactUpdateBadRequestBodyAO1
	var patientContactUpdateBadRequestBodyAO1 PatientContactUpdateBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &patientContactUpdateBadRequestBodyAO1); err != nil {
		return err
	}
	o.PatientContactUpdateBadRequestBodyAllOf1 = patientContactUpdateBadRequestBodyAO1

	// PatientContactUpdateBadRequestBodyAO2
	var dataPatientContactUpdateBadRequestBodyAO2 struct {
		Errors *PatientContactUpdateBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPatientContactUpdateBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataPatientContactUpdateBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientContactUpdateBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	patientContactUpdateBadRequestBodyAO0, err := swag.WriteJSON(o.PatientContactUpdateBadRequestBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientContactUpdateBadRequestBodyAO0)

	patientContactUpdateBadRequestBodyAO1, err := swag.WriteJSON(o.PatientContactUpdateBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientContactUpdateBadRequestBodyAO1)

	var dataPatientContactUpdateBadRequestBodyAO2 struct {
		Errors *PatientContactUpdateBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataPatientContactUpdateBadRequestBodyAO2.Errors = o.Errors

	jsonDataPatientContactUpdateBadRequestBodyAO2, errPatientContactUpdateBadRequestBodyAO2 := swag.WriteJSON(dataPatientContactUpdateBadRequestBodyAO2)
	if errPatientContactUpdateBadRequestBodyAO2 != nil {
		return nil, errPatientContactUpdateBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataPatientContactUpdateBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient contact update bad request body
func (o *PatientContactUpdateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with PatientContactUpdateBadRequestBodyAllOf0
	// validation for a type composition with PatientContactUpdateBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientContactUpdateBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patientContactUpdateBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientContactUpdateBadRequestBodyAO2Errors patient contact update bad request body a o2 errors
// swagger:model PatientContactUpdateBadRequestBodyAO2Errors
type PatientContactUpdateBadRequestBodyAO2Errors struct {

	// validation
	Validation *PatientContactUpdateBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this patient contact update bad request body a o2 errors
func (o *PatientContactUpdateBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientContactUpdateBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patientContactUpdateBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientContactUpdateBadRequestBodyAO2ErrorsValidation patient contact update bad request body a o2 errors validation
// swagger:model PatientContactUpdateBadRequestBodyAO2ErrorsValidation
type PatientContactUpdateBadRequestBodyAO2ErrorsValidation struct {

	// email
	// Enum: [string format]
	Email string `json:"email,omitempty"`

	// mobile
	// Enum: [string format]
	Mobile string `json:"mobile,omitempty"`
}

// Validate validates this patient contact update bad request body a o2 errors validation
func (o *PatientContactUpdateBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMobile(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","format"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum = append(patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum, v)
	}
}

const (

	// PatientContactUpdateBadRequestBodyAO2ErrorsValidationEmailString captures enum value "string"
	PatientContactUpdateBadRequestBodyAO2ErrorsValidationEmailString string = "string"

	// PatientContactUpdateBadRequestBodyAO2ErrorsValidationEmailFormat captures enum value "format"
	PatientContactUpdateBadRequestBodyAO2ErrorsValidationEmailFormat string = "format"
)

// prop value enum
func (o *PatientContactUpdateBadRequestBodyAO2ErrorsValidation) validateEmailEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeEmailPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatientContactUpdateBadRequestBodyAO2ErrorsValidation) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	// value enum
	if err := o.validateEmailEnum("patientContactUpdateBadRequest"+"."+"errors"+"."+"validation"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

var patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","format"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum = append(patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum, v)
	}
}

const (

	// PatientContactUpdateBadRequestBodyAO2ErrorsValidationMobileString captures enum value "string"
	PatientContactUpdateBadRequestBodyAO2ErrorsValidationMobileString string = "string"

	// PatientContactUpdateBadRequestBodyAO2ErrorsValidationMobileFormat captures enum value "format"
	PatientContactUpdateBadRequestBodyAO2ErrorsValidationMobileFormat string = "format"
)

// prop value enum
func (o *PatientContactUpdateBadRequestBodyAO2ErrorsValidation) validateMobileEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, patientContactUpdateBadRequestBodyAO2ErrorsValidationTypeMobilePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *PatientContactUpdateBadRequestBodyAO2ErrorsValidation) validateMobile(formats strfmt.Registry) error {

	if swag.IsZero(o.Mobile) { // not required
		return nil
	}

	// value enum
	if err := o.validateMobileEnum("patientContactUpdateBadRequest"+"."+"errors"+"."+"validation"+"."+"mobile", "body", o.Mobile); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientContactUpdateBadRequestBodyAllOf0 Ошибка валидации
// swagger:model PatientContactUpdateBadRequestBodyAllOf0
type PatientContactUpdateBadRequestBodyAllOf0 interface{}

// PatientContactUpdateBadRequestBodyAllOf1 patient contact update bad request body all of1
// swagger:model PatientContactUpdateBadRequestBodyAllOf1
type PatientContactUpdateBadRequestBodyAllOf1 interface{}

// PatientContactUpdateBody patient contact update body
// swagger:model PatientContactUpdateBody
type PatientContactUpdateBody struct {
	models.RegistrationObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientContactUpdateBody) UnmarshalJSON(raw []byte) error {
	// PatientContactUpdateParamsBodyAO0
	var patientContactUpdateParamsBodyAO0 models.RegistrationObject
	if err := swag.ReadJSON(raw, &patientContactUpdateParamsBodyAO0); err != nil {
		return err
	}
	o.RegistrationObject = patientContactUpdateParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientContactUpdateBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientContactUpdateParamsBodyAO0, err := swag.WriteJSON(o.RegistrationObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientContactUpdateParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient contact update body
func (o *PatientContactUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.RegistrationObject
	if err := o.RegistrationObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateBody) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientContactUpdateInternalServerErrorBody patient contact update internal server error body
// swagger:model PatientContactUpdateInternalServerErrorBody
type PatientContactUpdateInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientContactUpdateInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PatientContactUpdateInternalServerErrorBodyAO0
	var patientContactUpdateInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &patientContactUpdateInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = patientContactUpdateInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientContactUpdateInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientContactUpdateInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientContactUpdateInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient contact update internal server error body
func (o *PatientContactUpdateInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientContactUpdateMethodNotAllowedBody patient contact update method not allowed body
// swagger:model PatientContactUpdateMethodNotAllowedBody
type PatientContactUpdateMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientContactUpdateMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PatientContactUpdateMethodNotAllowedBodyAO0
	var patientContactUpdateMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &patientContactUpdateMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = patientContactUpdateMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientContactUpdateMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientContactUpdateMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientContactUpdateMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient contact update method not allowed body
func (o *PatientContactUpdateMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientContactUpdateNotFoundBody patient contact update not found body
// swagger:model PatientContactUpdateNotFoundBody
type PatientContactUpdateNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientContactUpdateNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PatientContactUpdateNotFoundBodyAO0
	var patientContactUpdateNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &patientContactUpdateNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = patientContactUpdateNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientContactUpdateNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientContactUpdateNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientContactUpdateNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient contact update not found body
func (o *PatientContactUpdateNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientContactUpdateOKBody patient contact update o k body
// swagger:model PatientContactUpdateOKBody
type PatientContactUpdateOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*ContactDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientContactUpdateOKBody) UnmarshalJSON(raw []byte) error {
	// PatientContactUpdateOKBodyAO0
	var patientContactUpdateOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &patientContactUpdateOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = patientContactUpdateOKBodyAO0

	// PatientContactUpdateOKBodyAO1
	var dataPatientContactUpdateOKBodyAO1 struct {
		Data []*ContactDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPatientContactUpdateOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPatientContactUpdateOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientContactUpdateOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patientContactUpdateOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientContactUpdateOKBodyAO0)

	var dataPatientContactUpdateOKBodyAO1 struct {
		Data []*ContactDataItem `json:"data"`
	}

	dataPatientContactUpdateOKBodyAO1.Data = o.Data

	jsonDataPatientContactUpdateOKBodyAO1, errPatientContactUpdateOKBodyAO1 := swag.WriteJSON(dataPatientContactUpdateOKBodyAO1)
	if errPatientContactUpdateOKBodyAO1 != nil {
		return nil, errPatientContactUpdateOKBodyAO1
	}
	_parts = append(_parts, jsonDataPatientContactUpdateOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patient contact update o k body
func (o *PatientContactUpdateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientContactUpdateOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("patientContactUpdateOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patientContactUpdateOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientContactUpdateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientContactUpdateOKBody) UnmarshalBinary(b []byte) error {
	var res PatientContactUpdateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// contact-data-item contact data item
// swagger:model contact-data-item
type ContactDataItem struct {
	models.ContactObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ContactDataItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.ContactObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.ContactObject = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ContactDataItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.ContactObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this contact data item
func (o *ContactDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ContactObject
	if err := o.ContactObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ContactDataItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ContactDataItem) UnmarshalBinary(b []byte) error {
	var res ContactDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
