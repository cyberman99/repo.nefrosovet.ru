// Code generated by go-swagger; DO NOT EDIT.

package profile

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/patient/api/models"
)

// PatientcontactViewHandlerFunc turns a function with the right signature into a patientcontact view handler
type PatientcontactViewHandlerFunc func(PatientcontactViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatientcontactViewHandlerFunc) Handle(params PatientcontactViewParams) middleware.Responder {
	return fn(params)
}

// PatientcontactViewHandler interface for that can handle valid patientcontact view params
type PatientcontactViewHandler interface {
	Handle(PatientcontactViewParams) middleware.Responder
}

// NewPatientcontactView creates a new http.Handler for the patientcontact view operation
func NewPatientcontactView(ctx *middleware.Context, handler PatientcontactViewHandler) *PatientcontactView {
	return &PatientcontactView{Context: ctx, Handler: handler}
}

/*PatientcontactView swagger:route GET /users/{userID}/contacts Profile patientcontactView

Коллекция контактных данных пациента

*/
type PatientcontactView struct {
	Context *middleware.Context
	Handler PatientcontactViewHandler
}

func (o *PatientcontactView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatientcontactViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatientcontactViewInternalServerErrorBody patientcontact view internal server error body
// swagger:model PatientcontactViewInternalServerErrorBody
type PatientcontactViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientcontactViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PatientcontactViewInternalServerErrorBodyAO0
	var patientcontactViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &patientcontactViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = patientcontactViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientcontactViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientcontactViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientcontactViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patientcontact view internal server error body
func (o *PatientcontactViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientcontactViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientcontactViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatientcontactViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientcontactViewMethodNotAllowedBody patientcontact view method not allowed body
// swagger:model PatientcontactViewMethodNotAllowedBody
type PatientcontactViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientcontactViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PatientcontactViewMethodNotAllowedBodyAO0
	var patientcontactViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &patientcontactViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = patientcontactViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientcontactViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientcontactViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientcontactViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patientcontact view method not allowed body
func (o *PatientcontactViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientcontactViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientcontactViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PatientcontactViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientcontactViewNotFoundBody patientcontact view not found body
// swagger:model PatientcontactViewNotFoundBody
type PatientcontactViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientcontactViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PatientcontactViewNotFoundBodyAO0
	var patientcontactViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &patientcontactViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = patientcontactViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientcontactViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patientcontactViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientcontactViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patientcontact view not found body
func (o *PatientcontactViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatientcontactViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientcontactViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatientcontactViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatientcontactViewOKBody patientcontact view o k body
// swagger:model PatientcontactViewOKBody
type PatientcontactViewOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*ContactDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatientcontactViewOKBody) UnmarshalJSON(raw []byte) error {
	// PatientcontactViewOKBodyAO0
	var patientcontactViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &patientcontactViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = patientcontactViewOKBodyAO0

	// PatientcontactViewOKBodyAO1
	var dataPatientcontactViewOKBodyAO1 struct {
		Data []*ContactDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPatientcontactViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPatientcontactViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatientcontactViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patientcontactViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patientcontactViewOKBodyAO0)

	var dataPatientcontactViewOKBodyAO1 struct {
		Data []*ContactDataItem `json:"data"`
	}

	dataPatientcontactViewOKBodyAO1.Data = o.Data

	jsonDataPatientcontactViewOKBodyAO1, errPatientcontactViewOKBodyAO1 := swag.WriteJSON(dataPatientcontactViewOKBodyAO1)
	if errPatientcontactViewOKBodyAO1 != nil {
		return nil, errPatientcontactViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataPatientcontactViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patientcontact view o k body
func (o *PatientcontactViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatientcontactViewOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("patientcontactViewOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patientcontactViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatientcontactViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatientcontactViewOKBody) UnmarshalBinary(b []byte) error {
	var res PatientcontactViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
