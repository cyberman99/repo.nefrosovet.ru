// Code generated by sqlc. DO NOT EDIT.
// source: employee.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee (
    id, guid, first_name, last_name, patronymic, position_code, photo_guid, updated
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, guid, first_name, last_name, patronymic, position_code, photo_guid, created, updated
`

type CreateEmployeeParams struct {
	ID           uuid.UUID      `json:"id"`
	Guid         uuid.UUID      `json:"guid"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	Patronymic   sql.NullString `json:"patronymic"`
	PositionCode string         `json:"position_code"`
	PhotoGuid    uuid.UUID      `json:"photo_guid"`
	Updated      pq.NullTime    `json:"updated"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.queryRow(ctx, q.createEmployeeStmt, createEmployee,
		arg.ID,
		arg.Guid,
		arg.FirstName,
		arg.LastName,
		arg.Patronymic,
		arg.PositionCode,
		arg.PhotoGuid,
		arg.Updated,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.FirstName,
		&i.LastName,
		&i.Patronymic,
		&i.PositionCode,
		&i.PhotoGuid,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee
WHERE id=$1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteEmployeeStmt, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, guid, first_name, last_name, patronymic, position_code, photo_guid, created, updated FROM employee
WHERE id=coalesce($1, id) LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id uuid.UUID) (Employee, error) {
	row := q.queryRow(ctx, q.getEmployeeStmt, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.FirstName,
		&i.LastName,
		&i.Patronymic,
		&i.PositionCode,
		&i.PhotoGuid,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, guid, first_name, last_name, patronymic, position_code, photo_guid, created, updated FROM employee
`

func (q *Queries) ListEmployees(ctx context.Context) ([]Employee, error) {
	rows, err := q.query(ctx, q.listEmployeesStmt, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Guid,
			&i.FirstName,
			&i.LastName,
			&i.Patronymic,
			&i.PositionCode,
			&i.PhotoGuid,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employee SET (
    guid, first_name, last_name, patronymic, position_code, photo_guid, updated
) = (
    coalesce($2, guid), coalesce($3, first_name), coalesce($4, last_name), coalesce($5, patronymic),
    coalesce($6, position_code), coalesce($7, photo_guid), coalesce($8, updated)
)
WHERE id=$1
RETURNING id, guid, first_name, last_name, patronymic, position_code, photo_guid, created, updated
`

func (q *Queries) UpdateEmployee(ctx context.Context, id uuid.UUID) (Employee, error) {
	row := q.queryRow(ctx, q.updateEmployeeStmt, updateEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Guid,
		&i.FirstName,
		&i.LastName,
		&i.Patronymic,
		&i.PositionCode,
		&i.PhotoGuid,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
