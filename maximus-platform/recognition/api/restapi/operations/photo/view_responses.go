// Code generated by go-swagger; DO NOT EDIT.

package photo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ViewOKCode is the HTTP code returned for type ViewOK
const ViewOKCode int = 200

/*ViewOK Объект фотографии

swagger:response viewOK
*/
type ViewOK struct {

	/*
	  In: Body
	*/
	Payload *ViewOKBody `json:"body,omitempty"`
}

// NewViewOK creates ViewOK with default headers values
func NewViewOK() *ViewOK {

	return &ViewOK{}
}

// WithPayload adds the payload to the view o k response
func (o *ViewOK) WithPayload(payload *ViewOKBody) *ViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the view o k response
func (o *ViewOK) SetPayload(payload *ViewOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ViewBadRequestCode is the HTTP code returned for type ViewBadRequest
const ViewBadRequestCode int = 400

/*ViewBadRequest Ошибка валидации

swagger:response viewBadRequest
*/
type ViewBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ViewBadRequestBody `json:"body,omitempty"`
}

// NewViewBadRequest creates ViewBadRequest with default headers values
func NewViewBadRequest() *ViewBadRequest {

	return &ViewBadRequest{}
}

// WithPayload adds the payload to the view bad request response
func (o *ViewBadRequest) WithPayload(payload *ViewBadRequestBody) *ViewBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the view bad request response
func (o *ViewBadRequest) SetPayload(payload *ViewBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ViewBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ViewNotFoundCode is the HTTP code returned for type ViewNotFound
const ViewNotFoundCode int = 404

/*ViewNotFound Not found

swagger:response viewNotFound
*/
type ViewNotFound struct {

	/*
	  In: Body
	*/
	Payload *ViewNotFoundBody `json:"body,omitempty"`
}

// NewViewNotFound creates ViewNotFound with default headers values
func NewViewNotFound() *ViewNotFound {

	return &ViewNotFound{}
}

// WithPayload adds the payload to the view not found response
func (o *ViewNotFound) WithPayload(payload *ViewNotFoundBody) *ViewNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the view not found response
func (o *ViewNotFound) SetPayload(payload *ViewNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ViewNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ViewMethodNotAllowedCode is the HTTP code returned for type ViewMethodNotAllowed
const ViewMethodNotAllowedCode int = 405

/*ViewMethodNotAllowed Invalid Method

swagger:response viewMethodNotAllowed
*/
type ViewMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *ViewMethodNotAllowedBody `json:"body,omitempty"`
}

// NewViewMethodNotAllowed creates ViewMethodNotAllowed with default headers values
func NewViewMethodNotAllowed() *ViewMethodNotAllowed {

	return &ViewMethodNotAllowed{}
}

// WithPayload adds the payload to the view method not allowed response
func (o *ViewMethodNotAllowed) WithPayload(payload *ViewMethodNotAllowedBody) *ViewMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the view method not allowed response
func (o *ViewMethodNotAllowed) SetPayload(payload *ViewMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ViewMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ViewInternalServerErrorCode is the HTTP code returned for type ViewInternalServerError
const ViewInternalServerErrorCode int = 500

/*ViewInternalServerError Internal server error

swagger:response viewInternalServerError
*/
type ViewInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ViewInternalServerErrorBody `json:"body,omitempty"`
}

// NewViewInternalServerError creates ViewInternalServerError with default headers values
func NewViewInternalServerError() *ViewInternalServerError {

	return &ViewInternalServerError{}
}

// WithPayload adds the payload to the view internal server error response
func (o *ViewInternalServerError) WithPayload(payload *ViewInternalServerErrorBody) *ViewInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the view internal server error response
func (o *ViewInternalServerError) SetPayload(payload *ViewInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
