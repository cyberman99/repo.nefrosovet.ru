// Code generated by go-swagger; DO NOT EDIT.

package photo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/recognition/api/models"
)

// CreateHandlerFunc turns a function with the right signature into a create handler
type CreateHandlerFunc func(CreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateHandlerFunc) Handle(params CreateParams) middleware.Responder {
	return fn(params)
}

// CreateHandler interface for that can handle valid create params
type CreateHandler interface {
	Handle(CreateParams) middleware.Responder
}

// NewCreate creates a new http.Handler for the create operation
func NewCreate(ctx *middleware.Context, handler CreateHandler) *Create {
	return &Create{Context: ctx, Handler: handler}
}

/*Create swagger:route POST /photos Photo create

Загрузка фотографии

*/
type Create struct {
	Context *middleware.Context
	Handler CreateHandler
}

func (o *Create) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateBadRequestBody create bad request body
// swagger:model CreateBadRequestBody
type CreateBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *CreateBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateBadRequestBody) UnmarshalJSON(raw []byte) error {
	// CreateBadRequestBodyAO0
	var createBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &createBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = createBadRequestBodyAO0

	// CreateBadRequestBodyAO1
	var dataCreateBadRequestBodyAO1 struct {
		Errors *CreateBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataCreateBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataCreateBadRequestBodyAO1.Errors

	o.Message = dataCreateBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	createBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createBadRequestBodyAO0)

	var dataCreateBadRequestBodyAO1 struct {
		Errors *CreateBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataCreateBadRequestBodyAO1.Errors = o.Errors

	dataCreateBadRequestBodyAO1.Message = o.Message

	jsonDataCreateBadRequestBodyAO1, errCreateBadRequestBodyAO1 := swag.WriteJSON(dataCreateBadRequestBodyAO1)
	if errCreateBadRequestBodyAO1 != nil {
		return nil, errCreateBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataCreateBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create bad request body
func (o *CreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("createBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *CreateBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("createBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CreateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateBadRequestBodyAO1Errors create bad request body a o1 errors
// swagger:model CreateBadRequestBodyAO1Errors
type CreateBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this create bad request body a o1 errors
func (o *CreateBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res CreateBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateInternalServerErrorBody create internal server error body
// swagger:model CreateInternalServerErrorBody
type CreateInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// CreateInternalServerErrorBodyAO0
	var createInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &createInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = createInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	createInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create internal server error body
func (o *CreateInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CreateInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CreateInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateMethodNotAllowedBody create method not allowed body
// swagger:model CreateMethodNotAllowedBody
type CreateMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// CreateMethodNotAllowedBodyAO0
	var createMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &createMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = createMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	createMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create method not allowed body
func (o *CreateMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CreateMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res CreateMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateNotFoundBody create not found body
// swagger:model CreateNotFoundBody
type CreateNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateNotFoundBody) UnmarshalJSON(raw []byte) error {
	// CreateNotFoundBodyAO0
	var createNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &createNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = createNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	createNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create not found body
func (o *CreateNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CreateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CreateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateOKBody create o k body
// swagger:model CreateOKBody
type CreateOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateOKBody) UnmarshalJSON(raw []byte) error {
	// CreateOKBodyAO0
	var createOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &createOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = createOKBodyAO0

	// CreateOKBodyAO1
	var dataCreateOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataCreateOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataCreateOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	createOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createOKBodyAO0)

	var dataCreateOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataCreateOKBodyAO1.Data = o.Data

	jsonDataCreateOKBodyAO1, errCreateOKBodyAO1 := swag.WriteJSON(dataCreateOKBodyAO1)
	if errCreateOKBodyAO1 != nil {
		return nil, errCreateOKBodyAO1
	}
	_parts = append(_parts, jsonDataCreateOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create o k body
func (o *CreateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("createOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("createOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOKBody) UnmarshalBinary(b []byte) error {
	var res CreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
