// Code generated by go-swagger; DO NOT EDIT.

package photo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/recognition/api/models"
)

// CollectionHandlerFunc turns a function with the right signature into a collection handler
type CollectionHandlerFunc func(CollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CollectionHandlerFunc) Handle(params CollectionParams) middleware.Responder {
	return fn(params)
}

// CollectionHandler interface for that can handle valid collection params
type CollectionHandler interface {
	Handle(CollectionParams) middleware.Responder
}

// NewCollection creates a new http.Handler for the collection operation
func NewCollection(ctx *middleware.Context, handler CollectionHandler) *Collection {
	return &Collection{Context: ctx, Handler: handler}
}

/*Collection swagger:route GET /photos Photo collection

Коллекция фотографий

*/
type Collection struct {
	Context *middleware.Context
	Handler CollectionHandler
}

func (o *Collection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CollectionBadRequestBody collection bad request body
// swagger:model CollectionBadRequestBody
type CollectionBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *CollectionBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CollectionBadRequestBody) UnmarshalJSON(raw []byte) error {
	// CollectionBadRequestBodyAO0
	var collectionBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &collectionBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = collectionBadRequestBodyAO0

	// CollectionBadRequestBodyAO1
	var dataCollectionBadRequestBodyAO1 struct {
		Errors *CollectionBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataCollectionBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataCollectionBadRequestBodyAO1.Errors

	o.Message = dataCollectionBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CollectionBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	collectionBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, collectionBadRequestBodyAO0)

	var dataCollectionBadRequestBodyAO1 struct {
		Errors *CollectionBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataCollectionBadRequestBodyAO1.Errors = o.Errors

	dataCollectionBadRequestBodyAO1.Message = o.Message

	jsonDataCollectionBadRequestBodyAO1, errCollectionBadRequestBodyAO1 := swag.WriteJSON(dataCollectionBadRequestBodyAO1)
	if errCollectionBadRequestBodyAO1 != nil {
		return nil, errCollectionBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataCollectionBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this collection bad request body
func (o *CollectionBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CollectionBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("collectionBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("collectionBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *CollectionBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("collectionBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CollectionBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CollectionBadRequestBody) UnmarshalBinary(b []byte) error {
	var res CollectionBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CollectionBadRequestBodyAO1Errors collection bad request body a o1 errors
// swagger:model CollectionBadRequestBodyAO1Errors
type CollectionBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this collection bad request body a o1 errors
func (o *CollectionBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CollectionBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CollectionBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res CollectionBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CollectionInternalServerErrorBody collection internal server error body
// swagger:model CollectionInternalServerErrorBody
type CollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// CollectionInternalServerErrorBodyAO0
	var collectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &collectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = collectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	collectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, collectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this collection internal server error body
func (o *CollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CollectionMethodNotAllowedBody collection method not allowed body
// swagger:model CollectionMethodNotAllowedBody
type CollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// CollectionMethodNotAllowedBodyAO0
	var collectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &collectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = collectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	collectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, collectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this collection method not allowed body
func (o *CollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res CollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CollectionNotFoundBody collection not found body
// swagger:model CollectionNotFoundBody
type CollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// CollectionNotFoundBodyAO0
	var collectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &collectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = collectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	collectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, collectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this collection not found body
func (o *CollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res CollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CollectionOKBody collection o k body
// swagger:model CollectionOKBody
type CollectionOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CollectionOKBody) UnmarshalJSON(raw []byte) error {
	// CollectionOKBodyAO0
	var collectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &collectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = collectionOKBodyAO0

	// CollectionOKBodyAO1
	var dataCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	collectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, collectionOKBodyAO0)

	var dataCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataCollectionOKBodyAO1.Data = o.Data

	jsonDataCollectionOKBodyAO1, errCollectionOKBodyAO1 := swag.WriteJSON(dataCollectionOKBodyAO1)
	if errCollectionOKBodyAO1 != nil {
		return nil, errCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this collection o k body
func (o *CollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CollectionOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("collectionOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CollectionOKBody) UnmarshalBinary(b []byte) error {
	var res CollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {
	models.PhotoObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.PhotoObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.PhotoObject = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.PhotoObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PhotoObject
	if err := o.PhotoObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
