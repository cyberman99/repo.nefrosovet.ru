// Code generated by go-swagger; DO NOT EDIT.

package photo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// CollectionOKCode is the HTTP code returned for type CollectionOK
const CollectionOKCode int = 200

/*CollectionOK Объект фотографии

swagger:response collectionOK
*/
type CollectionOK struct {

	/*
	  In: Body
	*/
	Payload *CollectionOKBody `json:"body,omitempty"`
}

// NewCollectionOK creates CollectionOK with default headers values
func NewCollectionOK() *CollectionOK {

	return &CollectionOK{}
}

// WithPayload adds the payload to the collection o k response
func (o *CollectionOK) WithPayload(payload *CollectionOKBody) *CollectionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the collection o k response
func (o *CollectionOK) SetPayload(payload *CollectionOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CollectionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CollectionBadRequestCode is the HTTP code returned for type CollectionBadRequest
const CollectionBadRequestCode int = 400

/*CollectionBadRequest Ошибка валидации

swagger:response collectionBadRequest
*/
type CollectionBadRequest struct {

	/*
	  In: Body
	*/
	Payload *CollectionBadRequestBody `json:"body,omitempty"`
}

// NewCollectionBadRequest creates CollectionBadRequest with default headers values
func NewCollectionBadRequest() *CollectionBadRequest {

	return &CollectionBadRequest{}
}

// WithPayload adds the payload to the collection bad request response
func (o *CollectionBadRequest) WithPayload(payload *CollectionBadRequestBody) *CollectionBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the collection bad request response
func (o *CollectionBadRequest) SetPayload(payload *CollectionBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CollectionBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CollectionNotFoundCode is the HTTP code returned for type CollectionNotFound
const CollectionNotFoundCode int = 404

/*CollectionNotFound Not found

swagger:response collectionNotFound
*/
type CollectionNotFound struct {

	/*
	  In: Body
	*/
	Payload *CollectionNotFoundBody `json:"body,omitempty"`
}

// NewCollectionNotFound creates CollectionNotFound with default headers values
func NewCollectionNotFound() *CollectionNotFound {

	return &CollectionNotFound{}
}

// WithPayload adds the payload to the collection not found response
func (o *CollectionNotFound) WithPayload(payload *CollectionNotFoundBody) *CollectionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the collection not found response
func (o *CollectionNotFound) SetPayload(payload *CollectionNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CollectionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CollectionMethodNotAllowedCode is the HTTP code returned for type CollectionMethodNotAllowed
const CollectionMethodNotAllowedCode int = 405

/*CollectionMethodNotAllowed Invalid Method

swagger:response collectionMethodNotAllowed
*/
type CollectionMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *CollectionMethodNotAllowedBody `json:"body,omitempty"`
}

// NewCollectionMethodNotAllowed creates CollectionMethodNotAllowed with default headers values
func NewCollectionMethodNotAllowed() *CollectionMethodNotAllowed {

	return &CollectionMethodNotAllowed{}
}

// WithPayload adds the payload to the collection method not allowed response
func (o *CollectionMethodNotAllowed) WithPayload(payload *CollectionMethodNotAllowedBody) *CollectionMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the collection method not allowed response
func (o *CollectionMethodNotAllowed) SetPayload(payload *CollectionMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CollectionMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CollectionInternalServerErrorCode is the HTTP code returned for type CollectionInternalServerError
const CollectionInternalServerErrorCode int = 500

/*CollectionInternalServerError Internal server error

swagger:response collectionInternalServerError
*/
type CollectionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *CollectionInternalServerErrorBody `json:"body,omitempty"`
}

// NewCollectionInternalServerError creates CollectionInternalServerError with default headers values
func NewCollectionInternalServerError() *CollectionInternalServerError {

	return &CollectionInternalServerError{}
}

// WithPayload adds the payload to the collection internal server error response
func (o *CollectionInternalServerError) WithPayload(payload *CollectionInternalServerErrorBody) *CollectionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the collection internal server error response
func (o *CollectionInternalServerError) SetPayload(payload *CollectionInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CollectionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
