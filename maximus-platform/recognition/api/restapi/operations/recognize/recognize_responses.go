// Code generated by go-swagger; DO NOT EDIT.

package recognize

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RecognizeOKCode is the HTTP code returned for type RecognizeOK
const RecognizeOKCode int = 200

/*RecognizeOK Объект фотографии

swagger:response recognizeOK
*/
type RecognizeOK struct {

	/*
	  In: Body
	*/
	Payload *RecognizeOKBody `json:"body,omitempty"`
}

// NewRecognizeOK creates RecognizeOK with default headers values
func NewRecognizeOK() *RecognizeOK {

	return &RecognizeOK{}
}

// WithPayload adds the payload to the recognize o k response
func (o *RecognizeOK) WithPayload(payload *RecognizeOKBody) *RecognizeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recognize o k response
func (o *RecognizeOK) SetPayload(payload *RecognizeOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecognizeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RecognizeBadRequestCode is the HTTP code returned for type RecognizeBadRequest
const RecognizeBadRequestCode int = 400

/*RecognizeBadRequest Ошибка валидации

swagger:response recognizeBadRequest
*/
type RecognizeBadRequest struct {

	/*
	  In: Body
	*/
	Payload *RecognizeBadRequestBody `json:"body,omitempty"`
}

// NewRecognizeBadRequest creates RecognizeBadRequest with default headers values
func NewRecognizeBadRequest() *RecognizeBadRequest {

	return &RecognizeBadRequest{}
}

// WithPayload adds the payload to the recognize bad request response
func (o *RecognizeBadRequest) WithPayload(payload *RecognizeBadRequestBody) *RecognizeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recognize bad request response
func (o *RecognizeBadRequest) SetPayload(payload *RecognizeBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecognizeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RecognizeNotFoundCode is the HTTP code returned for type RecognizeNotFound
const RecognizeNotFoundCode int = 404

/*RecognizeNotFound Not found

swagger:response recognizeNotFound
*/
type RecognizeNotFound struct {

	/*
	  In: Body
	*/
	Payload *RecognizeNotFoundBody `json:"body,omitempty"`
}

// NewRecognizeNotFound creates RecognizeNotFound with default headers values
func NewRecognizeNotFound() *RecognizeNotFound {

	return &RecognizeNotFound{}
}

// WithPayload adds the payload to the recognize not found response
func (o *RecognizeNotFound) WithPayload(payload *RecognizeNotFoundBody) *RecognizeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recognize not found response
func (o *RecognizeNotFound) SetPayload(payload *RecognizeNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecognizeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RecognizeMethodNotAllowedCode is the HTTP code returned for type RecognizeMethodNotAllowed
const RecognizeMethodNotAllowedCode int = 405

/*RecognizeMethodNotAllowed Invalid Method

swagger:response recognizeMethodNotAllowed
*/
type RecognizeMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *RecognizeMethodNotAllowedBody `json:"body,omitempty"`
}

// NewRecognizeMethodNotAllowed creates RecognizeMethodNotAllowed with default headers values
func NewRecognizeMethodNotAllowed() *RecognizeMethodNotAllowed {

	return &RecognizeMethodNotAllowed{}
}

// WithPayload adds the payload to the recognize method not allowed response
func (o *RecognizeMethodNotAllowed) WithPayload(payload *RecognizeMethodNotAllowedBody) *RecognizeMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recognize method not allowed response
func (o *RecognizeMethodNotAllowed) SetPayload(payload *RecognizeMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecognizeMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RecognizeInternalServerErrorCode is the HTTP code returned for type RecognizeInternalServerError
const RecognizeInternalServerErrorCode int = 500

/*RecognizeInternalServerError Internal server error

swagger:response recognizeInternalServerError
*/
type RecognizeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *RecognizeInternalServerErrorBody `json:"body,omitempty"`
}

// NewRecognizeInternalServerError creates RecognizeInternalServerError with default headers values
func NewRecognizeInternalServerError() *RecognizeInternalServerError {

	return &RecognizeInternalServerError{}
}

// WithPayload adds the payload to the recognize internal server error response
func (o *RecognizeInternalServerError) WithPayload(payload *RecognizeInternalServerErrorBody) *RecognizeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the recognize internal server error response
func (o *RecognizeInternalServerError) SetPayload(payload *RecognizeInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RecognizeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
