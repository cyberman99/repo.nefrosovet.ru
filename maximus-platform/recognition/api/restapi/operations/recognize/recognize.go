// Code generated by go-swagger; DO NOT EDIT.

package recognize

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/recognition/api/models"
)

// RecognizeHandlerFunc turns a function with the right signature into a recognize handler
type RecognizeHandlerFunc func(RecognizeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RecognizeHandlerFunc) Handle(params RecognizeParams) middleware.Responder {
	return fn(params)
}

// RecognizeHandler interface for that can handle valid recognize params
type RecognizeHandler interface {
	Handle(RecognizeParams) middleware.Responder
}

// NewRecognize creates a new http.Handler for the recognize operation
func NewRecognize(ctx *middleware.Context, handler RecognizeHandler) *Recognize {
	return &Recognize{Context: ctx, Handler: handler}
}

/*Recognize swagger:route POST /recognize Recognize recognize

Загрузка фотографии для поиска совпадений

*/
type Recognize struct {
	Context *middleware.Context
	Handler RecognizeHandler
}

func (o *Recognize) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRecognizeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {
	models.PhotoObject

	models.RecognizeObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.PhotoObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.PhotoObject = aO0

	// AO1
	var aO1 models.RecognizeObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.RecognizeObject = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.PhotoObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.RecognizeObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PhotoObject
	if err := o.PhotoObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.RecognizeObject
	if err := o.RecognizeObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RecognizeBadRequestBody recognize bad request body
// swagger:model RecognizeBadRequestBody
type RecognizeBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *RecognizeBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RecognizeBadRequestBody) UnmarshalJSON(raw []byte) error {
	// RecognizeBadRequestBodyAO0
	var recognizeBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &recognizeBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = recognizeBadRequestBodyAO0

	// RecognizeBadRequestBodyAO1
	var dataRecognizeBadRequestBodyAO1 struct {
		Errors *RecognizeBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataRecognizeBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataRecognizeBadRequestBodyAO1.Errors

	o.Message = dataRecognizeBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RecognizeBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	recognizeBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, recognizeBadRequestBodyAO0)

	var dataRecognizeBadRequestBodyAO1 struct {
		Errors *RecognizeBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataRecognizeBadRequestBodyAO1.Errors = o.Errors

	dataRecognizeBadRequestBodyAO1.Message = o.Message

	jsonDataRecognizeBadRequestBodyAO1, errRecognizeBadRequestBodyAO1 := swag.WriteJSON(dataRecognizeBadRequestBodyAO1)
	if errRecognizeBadRequestBodyAO1 != nil {
		return nil, errRecognizeBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataRecognizeBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recognize bad request body
func (o *RecognizeBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RecognizeBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("recognizeBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recognizeBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *RecognizeBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("recognizeBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RecognizeBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecognizeBadRequestBody) UnmarshalBinary(b []byte) error {
	var res RecognizeBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RecognizeBadRequestBodyAO1Errors recognize bad request body a o1 errors
// swagger:model RecognizeBadRequestBodyAO1Errors
type RecognizeBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this recognize bad request body a o1 errors
func (o *RecognizeBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *RecognizeBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecognizeBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res RecognizeBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RecognizeInternalServerErrorBody recognize internal server error body
// swagger:model RecognizeInternalServerErrorBody
type RecognizeInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RecognizeInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// RecognizeInternalServerErrorBodyAO0
	var recognizeInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &recognizeInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = recognizeInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RecognizeInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	recognizeInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, recognizeInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recognize internal server error body
func (o *RecognizeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RecognizeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecognizeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res RecognizeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RecognizeMethodNotAllowedBody recognize method not allowed body
// swagger:model RecognizeMethodNotAllowedBody
type RecognizeMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RecognizeMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// RecognizeMethodNotAllowedBodyAO0
	var recognizeMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &recognizeMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = recognizeMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RecognizeMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	recognizeMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, recognizeMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recognize method not allowed body
func (o *RecognizeMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RecognizeMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecognizeMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res RecognizeMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RecognizeNotFoundBody recognize not found body
// swagger:model RecognizeNotFoundBody
type RecognizeNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RecognizeNotFoundBody) UnmarshalJSON(raw []byte) error {
	// RecognizeNotFoundBodyAO0
	var recognizeNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &recognizeNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = recognizeNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RecognizeNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	recognizeNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, recognizeNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recognize not found body
func (o *RecognizeNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RecognizeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecognizeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res RecognizeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RecognizeOKBody recognize o k body
// swagger:model RecognizeOKBody
type RecognizeOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RecognizeOKBody) UnmarshalJSON(raw []byte) error {
	// RecognizeOKBodyAO0
	var recognizeOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &recognizeOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = recognizeOKBodyAO0

	// RecognizeOKBodyAO1
	var dataRecognizeOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataRecognizeOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataRecognizeOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RecognizeOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	recognizeOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, recognizeOKBodyAO0)

	var dataRecognizeOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataRecognizeOKBodyAO1.Data = o.Data

	jsonDataRecognizeOKBodyAO1, errRecognizeOKBodyAO1 := swag.WriteJSON(dataRecognizeOKBodyAO1)
	if errRecognizeOKBodyAO1 != nil {
		return nil, errRecognizeOKBodyAO1
	}
	_parts = append(_parts, jsonDataRecognizeOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recognize o k body
func (o *RecognizeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RecognizeOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("recognizeOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recognizeOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RecognizeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RecognizeOKBody) UnmarshalBinary(b []byte) error {
	var res RecognizeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
