{
	"info": {
		"_postman_id": "aceb45d7-da57-40b0-b932-68b8799aa368",
		"name": "DataRouter API",
		"description": "#### RESTFULL DataRouter API\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01_clients",
			"item": [
				{
					"name": "CL001_Создание клиента: ERROR 405 Invalid methode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cee6aec-142d-4190-a645-a5fb6a31898d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1847899-5a52-4ede-b8b7-d22d8a074671",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL002_Создание клиента с ID: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f8523c8-8619-493c-b571-393cb296ec13",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.data.length).to.eql(0);",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ID\", \"string\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('password');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('ttl');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('username');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0bf656b-4f15-40db-b8e7-0a06c40edbc6",
								"exec": [
									"pm.environment.set(\"username\", \"testClient\");",
									"pm.environment.set(\"password\", \"test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": 1,\n  \"username\": 1,\n  \"password\": 1,\n  \"ttl\": \"1\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL003_Создание клиента c ID: ERROR 400 attribute format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5270f691-1f70-438c-9f42-4bc3dd928f89",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.data.length).to.eql(0);",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ID\", \"format\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"min\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('ttl');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('username');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0bf656b-4f15-40db-b8e7-0a06c40edbc6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ID\": \"1\",\n\t\"username\": \"xxx\",\n\t\"password\": \"\",\n\t\"ttl\": 1\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL004_Создание клиента с ID: ERROR 400 attribute require",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5270f691-1f70-438c-9f42-4bc3dd928f89",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"username\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0bf656b-4f15-40db-b8e7-0a06c40edbc6",
								"exec": [
									"pm.environment.set(\"username\", \"testClient\");",
									"pm.environment.set(\"password\", \"test\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"xxx\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL005_ Создание клиента с ID и ttl: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b8efab1-0a51-417c-995d-88fd6f10ccd7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"username\", pm.environment.get(\"clientUsername\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ttl\", pm.environment.get(\"clientTtl\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7227b32a-f709-4a89-b87f-f762b27052f4",
								"exec": [
									"pm.environment.set(\"clientID\", pm.environment.get(\"randomID\"));",
									"pm.environment.set(\"clientUsername\", \"clientUsername\");",
									"pm.environment.set(\"clientPassword\", \"clientPassword\");",
									"pm.environment.set(\"clientTtl\", 30);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": \"{{clientID}}\",\n  \"username\": \"{{clientUsername}}\",\n  \"password\": \"{{clientPassword}}\",\n  \"ttl\": {{clientTtl}}\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL006_ Создание клиента с ID без ttl: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e6b2819-0d31-4a0b-94de-ee2136d0d753",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"//var jsonData = {\"version\":\"2.0.0\",\"message\":\"SUCCESS\",\"errors\":null,\"data\":[{\"ID\":\"db9564da-b3e8-458d-9fa5-b317eb395b99\",\"username\":\"testClient\",\"created\":\"2018-05-22T13:27:51+00:00\",\"expired\":\"2018-05-22T14:27:51+00:00\",\"ttl\":10}]}",
									"",
									"",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"username\", pm.environment.get(\"clientUsername\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"expired\", null);",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ttl\", null);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1bb38ac-d1d5-4b0f-bec4-88ba592678f5",
								"exec": [
									"pm.environment.set(\"clientID\", pm.environment.get(\"randomID\"));",
									"pm.environment.set(\"clientUsername\", \"clientUsername\");",
									"pm.environment.set(\"clientPassword\", \"clientPassword\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": \"{{clientID}}\",\n  \"username\": \"{{clientUsername}}\",\n  \"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL007_Создание клиента с ID без ttl: ERROR 400 unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e6b2819-0d31-4a0b-94de-ee2136d0d753",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ID\", \"unique\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1bb38ac-d1d5-4b0f-bec4-88ba592678f5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": \"{{clientID}}\",\n  \"username\": \"{{clientUsername}}\",\n  \"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL008_ Создание клиента без ttl: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e6b2819-0d31-4a0b-94de-ee2136d0d753",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"username\", pm.environment.get(\"clientUsername\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"expired\", null);",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ttl\", null);",
									"});",
									"",
									"if (jsonData.data[0].ID) {",
									" pm.environment.set(\"clientID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1bb38ac-d1d5-4b0f-bec4-88ba592678f5",
								"exec": [
									"pm.environment.set(\"clientUsername\", \"test\");",
									"pm.environment.set(\"clientPassword\", \"test\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{clientUsername}}\",\n  \"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL009_Информация о клиенте: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CL010_Информация о клиенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d9d619b-7709-40c7-b280-aa413d1198c1",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"username\", pm.environment.get(\"clientUsername\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"expired\", null);",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ttl\", null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CL011_Изменение клиента: ERROR 405 Invalid method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0b50b23-c0ed-446f-a9e6-c1ea2ced9860",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method PUT not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1847899-5a52-4ede-b8b7-d22d8a074671",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL012_Изменение клиента: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f8523c8-8619-493c-b571-393cb296ec13",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"username\", \"string\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('ID');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('password');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('ttl');",
									"",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0bf656b-4f15-40db-b8e7-0a06c40edbc6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": 1,\n  \"password\": 1,\n  \"ttl\": \"2\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL013_Изменение клиента: ERROR 400 attribute format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f8523c8-8619-493c-b571-393cb296ec13",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"min\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('ID');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('ttl');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('username');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c0bf656b-4f15-40db-b8e7-0a06c40edbc6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"foo\",\n  \"password\": \"\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL014_Изменение клиента: ERROR not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f741378b-9724-4742-bcf9-223b9b9348c5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"foo\",\n\t\"password\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CL015_ Изменение клиента: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d2bffee-d4fd-4caf-bb1d-d8dc81cdf897",
								"exec": [
									"pm.environment.set(\"clientUsername\", \"newClientUsername\");",
									"pm.environment.set(\"clientPassword\", \"newClientPassword\");",
									"pm.environment.set(\"clientTtl\", 3000);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b45a635a-2ee2-4729-b475-b1a4932c9ea6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"username\", pm.environment.get(\"clientUsername\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ttl\", pm.environment.get(\"clientTtl\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{clientUsername}}\",\n  \"password\": \"{{clientPassword}}\",\n  \"ttl\": {{clientTtl}}\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients/{{clientID}}",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients",
										"{{clientID}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "191",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 25 Apr 2018 06:08:37 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"d3-lAjN2sHXl35mNenhYYLTTA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"NewtestClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPn\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL016_Коллекция клиентов: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58bf7d09-406a-4c75-ad57-01084f0a8aec",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"      if (item.ID === pm.environment.get(\"clientID\")) {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"       }",
									"    })",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"      if (item.ID === pm.environment.get(\"clientID\")) {",
									"    pm.expect(item).to.have.property(\"username\", pm.environment.get(\"clientUsername\"));",
									"    pm.expect(item).to.have.property(\"ttl\", pm.environment.get(\"clientTtl\"));",
									"       }",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "148",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 13:50:07 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"af-MmpVeTvfnSW88c4riXD0uw\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "CL017_Удаление клиента: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e7770e09-d96b-4024-94f2-9ffdde0f667b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for clients"
		},
		{
			"name": "02_permissions",
			"item": [
				{
					"name": "PE001_Коллекция прав клиента: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{randomID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE002_Коллекция прав клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"permissionSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].publish.length).to.eql(0);",
									"    pm.expect(jsonData.data[0].subscribe.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE003_Добавление прав клиенту: ERROR 405 Invalid methode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cee6aec-142d-4190-a645-a5fb6a31898d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1847899-5a52-4ede-b8b7-d22d8a074671",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PE004_Добавление прав клиенту: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{randomID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE005_Добавление прав клиенту: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"publish\", \"array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publish\": 1,\n    \"subscribe\": 1\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{randomID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE006_Добавление прав клиенту: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"permissionSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem1\"));",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem2\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem1\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem2\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									"pm.environment.set(\"publishItem1\", \"services/1/OUT\");",
									"pm.environment.set(\"publishItem2\", \"services/2/OUT\");",
									"pm.environment.set(\"subscribeItem1\", \"services/1/IN\");",
									"pm.environment.set(\"subscribeItem2\", \"services/2/IN\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publish\": [\n        \"{{publishItem1}}\",\n        \"{{publishItem2}}\"\n    ],\n    \"subscribe\": [\n        \"{{subscribeItem1}}\",\n        \"{{subscribeItem2}}\"\n    ]\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE007_Коллекция прав клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"permissionSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem1\"));",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem2\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem1\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem2\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE008_Изменение прав клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"permissionSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem1\"));",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem2\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem1\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem2\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									"pm.environment.set(\"publishItem1\", \"services/3/OUT\");",
									"pm.environment.set(\"publishItem2\", \"services/4/OUT\");",
									"pm.environment.set(\"subscribeItem1\", \"services/3/IN\");",
									"pm.environment.set(\"subscribeItem2\", \"services/4/IN\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publish\": [\n        \"{{publishItem1}}\",\n        \"{{publishItem2}}\"\n    ],\n    \"subscribe\": [\n        \"{{subscribeItem1}}\",\n        \"{{subscribeItem2}}\"\n    ]\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE009_Коллекция прав клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"permissionSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem1\"));",
									"    pm.expect(jsonData.data[0].publish).includes(pm.environment.get(\"publishItem2\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem1\"));",
									"    pm.expect(jsonData.data[0].subscribe).includes(pm.environment.get(\"subscribeItem2\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE010_Обнуление прав клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"permissionSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].publish.length).to.eql(0);",
									"    pm.expect(jsonData.data[0].subscribe.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"publish\": [],\n    \"subscribe\": []\n}"
						},
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "PE011_Коллекция прав клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"permissionSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].publish.length).to.eql(0);",
									"    pm.expect(jsonData.data[0].subscribe.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}/permissions",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}",
								"permissions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03_replies",
			"item": [
				{
					"name": "RE001_Создание шаблона ответа: ERROR 405 Invalid methode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cee6aec-142d-4190-a645-a5fb6a31898d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1847899-5a52-4ede-b8b7-d22d8a074671",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "RE002_Создание шаблона ответа: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('regex');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('replace');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": 1,\n    \"regex\": 1,\n    \"replace\": 1\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE003_Создание шаблона ответа: ERROR 400 attribute require",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.data.length).to.eql(0);",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"regex\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"replace\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('description');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"foo\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE004_Создание шаблона ответа: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"replySchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"replyDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"regex\", pm.environment.get(\"replyRegex\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replace\", pm.environment.get(\"replyReplace\"));",
									"});",
									"",
									"if (jsonData.data[0].ID) {",
									" pm.environment.set(\"replyID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									"pm.environment.set(\"replyDescription\", \"Описание шаблона ответа\");",
									"pm.environment.set(\"replyRegex\", \"services/(.*)/IN\");",
									"pm.environment.set(\"replyReplace\", \"services/$1/OUT\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{replyDescription}}\",\n    \"regex\": \"{{replyRegex}}\",\n    \"replace\": \"{{replyReplace}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE005_Создание шаблона ответа: ERROR 400 unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.data.length).to.eql(0);",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"regex\", \"unique\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{replyDescription}}\",\n    \"regex\": \"{{replyRegex}}\",\n    \"replace\": \"{{replyReplace}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE006_Информация о шаблоне ответа: ERROR 405 Invalid methode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6cee6aec-142d-4190-a645-a5fb6a31898d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f1847899-5a52-4ede-b8b7-d22d8a074671",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies/{{replyID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{replyID}}"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"testClient\",\n  \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n}"
								},
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "156",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 14:02:13 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"ae-w9g4kOGy5MyzPVpfuZA/9g\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "RE007_Информация о шаблоне ответа: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"replySchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"replyID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"replyDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"regex\", pm.environment.get(\"replyRegex\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replace\", pm.environment.get(\"replyReplace\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies/{{replyID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{replyID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE008_Информация о шаблоне ответа: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE009_Изменение шаблона ответа: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"regex\": \"foo\",\n\t\"replace\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE010_Изменение шаблона ответа: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('regex');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('replace');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": 1,\n    \"regex\": 1,\n    \"replace\": 1\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE011_Изменение шаблона ответа: ERROR 400 attribute require",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('description');",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"regex\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"replace\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"foo\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE012_Изменение шаблона ответа: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"replySchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"replyID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"replyDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"regex\", pm.environment.get(\"replyRegex\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replace\", pm.environment.get(\"replyReplace\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									"pm.environment.set(\"replyDescription\", \"Новое описание шаблона ответа\");",
									"pm.environment.set(\"replyRegex\", \"services/(.*)/OUT\");",
									"pm.environment.set(\"replyReplace\", \"services/$1/IN\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{replyDescription}}\",\n    \"regex\": \"{{replyRegex}}\",\n    \"replace\": \"{{replyReplace}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/replies/{{replyID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{replyID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE013_Информация о шаблоне ответа: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"replySchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"replyID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"replyDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"regex\", pm.environment.get(\"replyRegex\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replace\", pm.environment.get(\"replyReplace\"));",
									"});",
									"if (jsonData.data[0].ID) {",
									"pm.environment.set(\"replyIDCleanup\", jsonData.data[0].ID);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies/{{replyID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{replyID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RE014_Коллекция шаблонов ответа: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58bf7d09-406a-4c75-ad57-01084f0a8aec",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"      if (item.ID === pm.environment.get(\"replyID\")) {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"replySchema\"))).to.be.true;",
									"       }",
									"    })",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"      if (item.ID === pm.environment.get(\"replyID\")) {",
									"        pm.expect(item).to.have.property(\"description\", pm.environment.get(\"replyDescription\"));",
									"        pm.expect(item).to.have.property(\"regex\", pm.environment.get(\"replyRegex\"));",
									"        pm.expect(item).to.have.property(\"replace\", pm.environment.get(\"replyReplace\"));",
									"       }",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies"
							]
						}
					},
					"response": [
						{
							"name": "200 OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{datarouterHost}}/clients",
									"host": [
										"{{datarouterHost}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "148",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 24 Apr 2018 13:50:07 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"af-MmpVeTvfnSW88c4riXD0uw\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"1.0.1\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"SUCCESS\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"2f4a4d90-15e0-40b9-be13-e1137f6e72f2\",\n            \"username\": \"testClient\",\n            \"password\": \"$2a$10$tMUbM1Y/crxU3h4BRgVI8O9/FZ6/vX1dMzqShucRmEt.oI6Cf5wPm\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "RE015_Удаление шаблона ответа: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{randomID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04_routes",
			"item": [
				{
					"name": "RO001_Создание маршрута: ERROR 405 Invalid methode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1142fef2-72d0-4913-bc00-125ce97a3a8f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c15bd663-ca37-49f5-a5ab-341aaeb62908",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO002_Создание маршрута: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst\", \"array\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"src\": {},\n    \"dst\": 1,\n    \"replyID\": \"{{randomID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO003_Создание маршрута: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.topic\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"src\": {\n    \t\"topic\": 1,\n    \t\"payload\": 1\n    },\n    \"dst\": [{\n    \t\"topic\": 1,\n    \t\"qos\": \"1\"\n    }]\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO004_Создание маршрута: ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"src\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst.qos');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst.topic');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('replyID');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.payload');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.topic');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"replyID\": \"{{randomID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO005_Создание маршрута: ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"src.topic\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.topic\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.qos\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('replyID');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"payload\": {}\n },\n \"dst\": [{\n \t\"foo\": \"bar\"\n }]\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO006_Создание маршрута: ERROR 400 attribute format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"replyID\", \"format\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.qos\", \"oneof\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst.topic');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.payload');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.topic');",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"topic\": {}\n },\n \"dst\": [{\n \t\"topic\": \"bar\",\n \t\"qos\": 3\n }],\n \"replyID\": \"foo\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO007_Создание маршрута: ERROR 404 attribute not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"src\": {\n        \"topic\": {\n            \"foo\": \"bar\"\n        }\n    },\n    \"dst\": [\n        {\n            \"topic\": \"bar\",\n            \"qos\": 1\n        }\n    ],\n    \"replyID\": \"{{randomID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO008_Создание маршрута: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f97949bc-479c-434e-8613-234915d4fb63",
								"exec": [
									"pm.environment.set(\"srcTopicCondition\", JSON.stringify({\"and\":[{\"==\":[{\"var\":\"name\"},\"services/1/OUT\"]},{\">\":[{\"var\":\"qos\"},0]}]}",
									"));",
									"pm.environment.set(\"srcPayloadCondition\", JSON.stringify({\"and\":[{\"==\":[{\"var\":\"param1\"},\"value\"]},{\">\":[{\"var\":\"param2\"},100]}]}",
									"));",
									"pm.environment.set(\"dstTopic1\", \"services/1/IN\");",
									"pm.environment.set(\"dstQOS1\", 1);",
									"pm.environment.set(\"dstTopic2\", \"services/2/IN\");",
									"pm.environment.set(\"dstQOS2\", 0);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049a7e30-7a88-47c7-bd0b-3a1b98c4760c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"routeSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].src.topic).to.eql(JSON.parse(pm.environment.get(\"srcTopicCondition\")));",
									"    pm.expect(jsonData.data[0].src.payload).to.eql(JSON.parse(pm.environment.get(\"srcPayloadCondition\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replyID\", pm.environment.get(\"replyID\"));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic2\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS2\")}));",
									"});",
									"if (jsonData.data[0].ID) {",
									" pm.environment.set(\"routeID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"topic\": {{srcTopicCondition}},\n \t\"payload\": {{srcPayloadCondition}}\n },\n \"dst\": [{\n \t\"topic\": \"{{dstTopic1}}\",\n \t\"qos\": {{dstQOS1}}\n },\n {\n \t\"topic\": \"{{dstTopic2}}\",\n \t\"qos\": {{dstQOS2}}\n }],\n \"replyID\": \"{{replyID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO009_Информация о маршруте: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "964fe8dc-c5fe-487b-8e35-b8b1aa10f7d7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf5f5a79-491f-4f42-b409-f39519d7855d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/routes/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO010_Информация о маршруте: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da75d04-463f-4543-a1b7-64cd0e1dadc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"routeSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].src.topic).to.eql(JSON.parse(pm.environment.get(\"srcTopicCondition\")));",
									"    pm.expect(jsonData.data[0].src.payload).to.eql(JSON.parse(pm.environment.get(\"srcPayloadCondition\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replyID\", pm.environment.get(\"replyID\"));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic2\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS2\")}));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO011_Изменение маршрута: ERROR 405 Invalid methode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1142fef2-72d0-4913-bc00-125ce97a3a8f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c15bd663-ca37-49f5-a5ab-341aaeb62908",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO012_Изменение маршрута: ERROR not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "964fe8dc-c5fe-487b-8e35-b8b1aa10f7d7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf5f5a79-491f-4f42-b409-f39519d7855d",
								"exec": [
									"pm.environment.set(\"srcTopicCondition\", JSON.stringify({\"and\":[{\"==\":[{\"var\":\"name\"},\"services/2/OUT\"]},{\">\":[{\"var\":\"qos\"},1]}]}",
									"));",
									"pm.environment.set(\"srcPayloadCondition\", JSON.stringify({\"and\":[{\"==\":[{\"var\":\"param1\"},\"value1\"]},{\"<\":[{\"var\":\"param2\"},100]}]}",
									"));",
									"pm.environment.set(\"dstTopic1\", \"services/2/IN\");",
									"pm.environment.set(\"dstQOS1\", 0);",
									"pm.environment.set(\"dstTopic2\", \"services/1/IN\");",
									"pm.environment.set(\"dstQOS2\", 1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"topic\": {{srcTopicCondition}},\n \t\"payload\": {{srcPayloadCondition}}\n },\n \"dst\": [{\n \t\"topic\": \"{{dstTopic1}}\",\n \t\"qos\": {{dstQOS1}}\n },\n {\n \t\"topic\": \"{{dstTopic2}}\",\n \t\"qos\": {{dstQOS2}}\n }],\n \"replyID\": \"{{replyID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO013_Изменение маршрута: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst\", \"array\");",
									"    // Тут пок не понятно",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"src\": {},\n    \"dst\": 1,\n    \"replyID\": \"{{randomID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO014_Изменение маршрута: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.topic\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"src\": {\n    \t\"topic\": 1,\n    \t\"payload\": 1\n    },\n    \"dst\": [{\n    \t\"topic\": 1,\n    \t\"qos\": \"1\"\n    }]\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO015_Изменение маршрута: ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"src\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst.qos');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst.topic');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('replyID');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.payload');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.topic');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"replyID\": \"{{randomID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO016_Изменение маршрута: ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"src.topic\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.topic\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.qos\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('replyID');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"payload\": {}\n },\n \"dst\": [{\n \t\"foo\": \"bar\"\n }]\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO017_Изменение маршрута: ERROR 400 attribute format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"validationSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"replyID\", \"format\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"dst.qos\", \"oneof\");",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('dst.topic');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.payload');",
									"    pm.expect(jsonData.errors.validation).to.have.not.property('src.topic');",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"topic\": {}\n },\n \"dst\": [{\n \t\"topic\": \"bar\",\n \t\"qos\": 3\n }],\n \"replyID\": \"foo\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO018_Изменение маршрута: ERROR 404 attribute not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8533e7-9572-4870-8014-88b6615eda18",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "37aee446-b043-4c6a-baf8-200b3a1333a4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"topic\": {\"foo\": \"bar\"}\n },\n \"dst\": [{\n \t\"topic\": \"bar\",\n \t\"qos\": 1\n }],\n \"replyID\": \"{{randomID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO019_Изменение маршрута: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f97949bc-479c-434e-8613-234915d4fb63",
								"exec": [
									"pm.environment.set(\"srcTopicCondition\", JSON.stringify({\"and\":[{\"==\":[{\"var\":\"name\"},\"services/2/OUT\"]},{\">\":[{\"var\":\"qos\"},1]}]}",
									"));",
									"pm.environment.set(\"srcPayloadCondition\", JSON.stringify({\"and\":[{\"==\":[{\"var\":\"param1\"},\"value1\"]},{\"<\":[{\"var\":\"param2\"},100]}]}",
									"));",
									"pm.environment.set(\"dstTopic1\", \"services/2/IN\");",
									"pm.environment.set(\"dstQOS1\", 0);",
									"pm.environment.set(\"dstTopic2\", \"services/1/IN\");",
									"pm.environment.set(\"dstQOS2\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049a7e30-7a88-47c7-bd0b-3a1b98c4760c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"routeSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].src.topic).to.eql(JSON.parse(pm.environment.get(\"srcTopicCondition\")));",
									"    pm.expect(jsonData.data[0].src.payload).to.eql(JSON.parse(pm.environment.get(\"srcPayloadCondition\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replyID\", pm.environment.get(\"replyID\"));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic2\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS2\")}));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"src\": {\n \t\"topic\": {{srcTopicCondition}},\n \t\"payload\": {{srcPayloadCondition}}\n },\n \"dst\": [{\n \t\"topic\": \"{{dstTopic1}}\",\n \t\"qos\": {{dstQOS1}}\n },\n {\n \t\"topic\": \"{{dstTopic2}}\",\n \t\"qos\": {{dstQOS2}}\n }],\n \"replyID\": \"{{replyID}}\"\n}"
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO020_Информация о маршруте: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5da75d04-463f-4543-a1b7-64cd0e1dadc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"routeSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].src.topic).to.eql(JSON.parse(pm.environment.get(\"srcTopicCondition\")));",
									"    pm.expect(jsonData.data[0].src.payload).to.eql(JSON.parse(pm.environment.get(\"srcPayloadCondition\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"replyID\", pm.environment.get(\"replyID\"));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS1\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"topic\": pm.environment.get(\"dstTopic2\")}));",
									"    pm.expect(_.find(jsonData.data[0].dst, {\"qos\": pm.environment.get(\"dstQOS2\")}));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO021_Коллекция маршрутов",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e71df3be-d6db-46fc-812e-454a81740838",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"      if (item.ID === pm.environment.get(\"replyID\")) {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"replySchema\"))).to.be.true;",
									"       }",
									"    })",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"      if (item.ID === pm.environment.get(\"routeID\")) {",
									"        pm.expect(item.src.topic).to.eql(JSON.parse(pm.environment.get(\"srcTopicCondition\")));",
									"        pm.expect(item.src.payload).to.eql(JSON.parse(pm.environment.get(\"srcPayloadCondition\")));",
									"        pm.expect(item).to.have.property(\"replyID\", pm.environment.get(\"replyID\"));",
									"        pm.expect(_.find(item.dst, {\"topic\": pm.environment.get(\"dstTopic1\")}));",
									"        pm.expect(_.find(item.dst, {\"qos\": pm.environment.get(\"dstQOS1\")}));",
									"        pm.expect(_.find(item.dst, {\"topic\": pm.environment.get(\"dstTopic2\")}));",
									"        pm.expect(_.find(item.dst, {\"qos\": pm.environment.get(\"dstQOS2\")}));",
									"      }",
									"    });",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/routes",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "RO022_Удаление маршрута: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2375dbe8-d407-442d-87ea-b7c4da3c42db",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ecb0e729-1f83-4930-8c39-02222c5d4f7c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{randomID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for routes"
		},
		{
			"name": "05_cleanup",
			"item": [
				{
					"name": "DL001_Удаление клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "02ff2a2d-6d9b-4a5e-8c9b-9aab2c39f8c8",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DL002_Информация о клиенте: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/clients/{{clientID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DL003_Удаление шаблона ответа: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e7d9b05-d51d-4310-bc7c-e47f801826f8",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{routerHost}}/replies/{{replyIDCleanup}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{replyIDCleanup}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DL004_Информация о шаблоне ответа: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd588150-4cd0-4b6f-8357-eb34cbe0fdc6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e06adaac-a59f-43ce-8d6e-122fd039f12d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{routerHost}}/replies/{{randomID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"replies",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DL005_Удаление маршрута: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d2cc13-a63f-4014-a719-28648150f5b3",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DL006_Информация о маршруте: ERROR not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2375dbe8-d407-442d-87ea-b7c4da3c42db",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ecb0e729-1f83-4930-8c39-02222c5d4f7c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{routerHost}}/routes/{{routeID}}",
							"host": [
								"{{routerHost}}"
							],
							"path": [
								"routes",
								"{{routeID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "91897b1a-582f-466b-ac4a-61d0ac878c08",
				"type": "text/javascript",
				"exec": [
					"var uuid = require('uuid');",
					"pm.environment.set('randomID', uuid.v4());",
					"",
					"glFn = {",
					"    getEnvSchema: function(name) {",
					"        return JSON.parse(pm.variables.get(name));",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "47cecbec-04f0-4721-ad20-04c929e5d8ee",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2ba0f524-6b59-47e8-a920-afff6a36d97b",
			"key": "baseSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"version\":{\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"errors\":{\"type\":[\"object\",\"null\"]},\"data\":{\"type\":[\"array\",\"null\"]}},\"required\":[\"version\",\"message\",\"errors\",\"data\"]}",
			"type": "string"
		},
		{
			"id": "ff084966-9171-43f2-a84e-693700c5ac97",
			"key": "clientSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"created\":{\"type\":\"string\"},\"expired\":{\"type\":[\"string\",\"null\"]},\"username\":{\"type\":\"string\"},\"ttl\":{\"type\":[\"integer\",\"null\"]}},\"required\":[\"ID\",\"created\",\"expired\",\"username\",\"ttl\"]}",
			"type": "string"
		},
		{
			"id": "34302199-251d-4118-a730-608fe63b1182",
			"key": "permissionSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"publish\":{\"type\":\"array\"},\"subscribe\":{\"type\":\"array\"}},\"required\":[\"publish\",\"subscribe\"]}",
			"type": "string"
		},
		{
			"id": "e3dd9e50-3086-457e-8d24-05e80ad66569",
			"key": "routeSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"src\":{\"type\":\"object\",\"properties\":{\"topic\":{\"type\":\"object\"},\"payload\":{\"type\":[\"object\",\"null\"]}},\"required\":[\"topic\",\"payload\"]},\"dst\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"topic\":{\"type\":\"string\"},\"qos\":{\"type\":\"integer\"}},\"required\":[\"topic\",\"qos\"]}}},\"required\":[\"src\",\"dst\"]}",
			"type": "string"
		},
		{
			"id": "16f3f935-ee0b-4720-99b9-0742d287af7b",
			"key": "replySchema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"description\":{\"type\":[\"string\",\"null\"]},\"regex\":{\"type\":\"string\"},\"replace\":{\"type\":\"string\"}},\"required\":[\"ID\",\"description\",\"regex\",\"replace\"]}",
			"type": "string"
		},
		{
			"id": "a3933060-0ea8-4029-867b-9b143cd682b4",
			"key": "validationSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"validation\":{\"type\":\"object\"}},\"required\":[\"validation\"]}",
			"type": "string"
		}
	]
}