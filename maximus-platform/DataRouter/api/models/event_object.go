// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventObject Event_object
// swagger:model Event_object
type EventObject struct {

	// Дата-время события
	// Format: date-time
	Date strfmt.DateTime `json:"date,omitempty"`

	// Канал назначения
	DstTopic string `json:"dstTopic,omitempty"`

	// Идентификатор ответа
	// Required: true
	// Format: uuid
	ReplyID *strfmt.UUID `json:"replyID"`

	// Идентификатор маршрута
	// Format: uuid
	RouteID strfmt.UUID `json:"routeID,omitempty"`

	// Канал источника
	SrcTopic string `json:"srcTopic,omitempty"`

	// Идентификатор транзакции
	// Format: uuid
	TransactionID strfmt.UUID `json:"transactionID,omitempty"`
}

// Validate validates this event object
func (m *EventObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventObject) validateDate(formats strfmt.Registry) error {

	if swag.IsZero(m.Date) { // not required
		return nil
	}

	if err := validate.FormatOf("date", "body", "date-time", m.Date.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventObject) validateReplyID(formats strfmt.Registry) error {

	if err := validate.Required("replyID", "body", m.ReplyID); err != nil {
		return err
	}

	if err := validate.FormatOf("replyID", "body", "uuid", m.ReplyID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventObject) validateRouteID(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteID) { // not required
		return nil
	}

	if err := validate.FormatOf("routeID", "body", "uuid", m.RouteID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *EventObject) validateTransactionID(formats strfmt.Registry) error {

	if swag.IsZero(m.TransactionID) { // not required
		return nil
	}

	if err := validate.FormatOf("transactionID", "body", "uuid", m.TransactionID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventObject) UnmarshalBinary(b []byte) error {
	var res EventObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
