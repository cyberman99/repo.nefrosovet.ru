// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RouteObject Route_object
// swagger:model Route_object
type RouteObject struct {

	// dst
	// Required: true
	Dst []*RouteObjectDstItems0 `json:"dst"`

	// Идентификатор шаблона ответа
	// Format: uuid
	ReplyID *strfmt.UUID `json:"replyID,omitempty"`

	// src
	// Required: true
	Src *RouteObjectSrc `json:"src"`
}

// Validate validates this route object
func (m *RouteObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDst(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSrc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteObject) validateDst(formats strfmt.Registry) error {

	if err := validate.Required("dst", "body", m.Dst); err != nil {
		return err
	}

	for i := 0; i < len(m.Dst); i++ {
		if swag.IsZero(m.Dst[i]) { // not required
			continue
		}

		if m.Dst[i] != nil {
			if err := m.Dst[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dst" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RouteObject) validateReplyID(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyID) { // not required
		return nil
	}

	if err := validate.FormatOf("replyID", "body", "uuid", m.ReplyID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RouteObject) validateSrc(formats strfmt.Registry) error {

	if err := validate.Required("src", "body", m.Src); err != nil {
		return err
	}

	if m.Src != nil {
		if err := m.Src.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("src")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteObject) UnmarshalBinary(b []byte) error {
	var res RouteObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RouteObjectDstItems0 route object dst items0
// swagger:model RouteObjectDstItems0
type RouteObjectDstItems0 struct {

	// QOS
	// Required: true
	// Enum: [0 1 2]
	Qos *int64 `json:"qos"`

	// Канал назначения
	// Required: true
	Topic *string `json:"topic"`
}

// Validate validates this route object dst items0
func (m *RouteObjectDstItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routeObjectDstItems0TypeQosPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[0,1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeObjectDstItems0TypeQosPropEnum = append(routeObjectDstItems0TypeQosPropEnum, v)
	}
}

// prop value enum
func (m *RouteObjectDstItems0) validateQosEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, routeObjectDstItems0TypeQosPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RouteObjectDstItems0) validateQos(formats strfmt.Registry) error {

	if err := validate.Required("qos", "body", m.Qos); err != nil {
		return err
	}

	// value enum
	if err := m.validateQosEnum("qos", "body", *m.Qos); err != nil {
		return err
	}

	return nil
}

func (m *RouteObjectDstItems0) validateTopic(formats strfmt.Registry) error {

	if err := validate.Required("topic", "body", m.Topic); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteObjectDstItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteObjectDstItems0) UnmarshalBinary(b []byte) error {
	var res RouteObjectDstItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RouteObjectSrc route object src
// swagger:model RouteObjectSrc
type RouteObjectSrc struct {

	// jsonLogic style описание условия
	Payload interface{} `json:"payload,omitempty"`

	// jsonLogic style описание условия
	// Required: true
	Topic interface{} `json:"topic"`
}

// Validate validates this route object src
func (m *RouteObjectSrc) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTopic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RouteObjectSrc) validateTopic(formats strfmt.Registry) error {

	if err := validate.Required("src"+"."+"topic", "body", m.Topic); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RouteObjectSrc) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RouteObjectSrc) UnmarshalBinary(b []byte) error {
	var res RouteObjectSrc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
