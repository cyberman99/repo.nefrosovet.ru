// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"repo.nefrosovet.ru/maximus-platform/DataRouter/api/restapi/operations/clients"
	"repo.nefrosovet.ru/maximus-platform/DataRouter/api/restapi/operations/events"
	"repo.nefrosovet.ru/maximus-platform/DataRouter/api/restapi/operations/permissions"
	"repo.nefrosovet.ru/maximus-platform/DataRouter/api/restapi/operations/replies"
	"repo.nefrosovet.ru/maximus-platform/DataRouter/api/restapi/operations/routes"
	"repo.nefrosovet.ru/maximus-platform/DataRouter/api/restapi/operations/status"
)

// NewDataRouterAPI creates a new DataRouter instance
func NewDataRouterAPI(spec *loads.Document) *DataRouterAPI {
	return &DataRouterAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		ClientsClientCollectionHandler: clients.ClientCollectionHandlerFunc(func(params clients.ClientCollectionParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientsClientCollection has not yet been implemented")
		}),
		ClientsClientCreateHandler: clients.ClientCreateHandlerFunc(func(params clients.ClientCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientsClientCreate has not yet been implemented")
		}),
		ClientsClientDeleteHandler: clients.ClientDeleteHandlerFunc(func(params clients.ClientDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientsClientDelete has not yet been implemented")
		}),
		ClientsClientPatchHandler: clients.ClientPatchHandlerFunc(func(params clients.ClientPatchParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientsClientPatch has not yet been implemented")
		}),
		PermissionsClientPermissionCreateHandler: permissions.ClientPermissionCreateHandlerFunc(func(params permissions.ClientPermissionCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation PermissionsClientPermissionCreate has not yet been implemented")
		}),
		PermissionsClientPermissionViewHandler: permissions.ClientPermissionViewHandlerFunc(func(params permissions.ClientPermissionViewParams) middleware.Responder {
			return middleware.NotImplemented("operation PermissionsClientPermissionView has not yet been implemented")
		}),
		ClientsClientViewHandler: clients.ClientViewHandlerFunc(func(params clients.ClientViewParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientsClientView has not yet been implemented")
		}),
		EventsEventCollectionHandler: events.EventCollectionHandlerFunc(func(params events.EventCollectionParams) middleware.Responder {
			return middleware.NotImplemented("operation EventsEventCollection has not yet been implemented")
		}),
		EventsEventViewHandler: events.EventViewHandlerFunc(func(params events.EventViewParams) middleware.Responder {
			return middleware.NotImplemented("operation EventsEventView has not yet been implemented")
		}),
		RepliesReplyCollectionHandler: replies.ReplyCollectionHandlerFunc(func(params replies.ReplyCollectionParams) middleware.Responder {
			return middleware.NotImplemented("operation RepliesReplyCollection has not yet been implemented")
		}),
		RepliesReplyCreateHandler: replies.ReplyCreateHandlerFunc(func(params replies.ReplyCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation RepliesReplyCreate has not yet been implemented")
		}),
		RepliesReplyDeleteHandler: replies.ReplyDeleteHandlerFunc(func(params replies.ReplyDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation RepliesReplyDelete has not yet been implemented")
		}),
		RepliesReplyPutHandler: replies.ReplyPutHandlerFunc(func(params replies.ReplyPutParams) middleware.Responder {
			return middleware.NotImplemented("operation RepliesReplyPut has not yet been implemented")
		}),
		RepliesReplyViewHandler: replies.ReplyViewHandlerFunc(func(params replies.ReplyViewParams) middleware.Responder {
			return middleware.NotImplemented("operation RepliesReplyView has not yet been implemented")
		}),
		RoutesRouteCollectionHandler: routes.RouteCollectionHandlerFunc(func(params routes.RouteCollectionParams) middleware.Responder {
			return middleware.NotImplemented("operation RoutesRouteCollection has not yet been implemented")
		}),
		RoutesRouteCreateHandler: routes.RouteCreateHandlerFunc(func(params routes.RouteCreateParams) middleware.Responder {
			return middleware.NotImplemented("operation RoutesRouteCreate has not yet been implemented")
		}),
		RoutesRouteDeleteHandler: routes.RouteDeleteHandlerFunc(func(params routes.RouteDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation RoutesRouteDelete has not yet been implemented")
		}),
		RoutesRoutePutHandler: routes.RoutePutHandlerFunc(func(params routes.RoutePutParams) middleware.Responder {
			return middleware.NotImplemented("operation RoutesRoutePut has not yet been implemented")
		}),
		RoutesRouteViewHandler: routes.RouteViewHandlerFunc(func(params routes.RouteViewParams) middleware.Responder {
			return middleware.NotImplemented("operation RoutesRouteView has not yet been implemented")
		}),
		StatusStatusViewHandler: status.StatusViewHandlerFunc(func(params status.StatusViewParams) middleware.Responder {
			return middleware.NotImplemented("operation StatusStatusView has not yet been implemented")
		}),
	}
}

/*DataRouterAPI #### RESTFUL DataRouter API
 */
type DataRouterAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ClientsClientCollectionHandler sets the operation handler for the client collection operation
	ClientsClientCollectionHandler clients.ClientCollectionHandler
	// ClientsClientCreateHandler sets the operation handler for the client create operation
	ClientsClientCreateHandler clients.ClientCreateHandler
	// ClientsClientDeleteHandler sets the operation handler for the client delete operation
	ClientsClientDeleteHandler clients.ClientDeleteHandler
	// ClientsClientPatchHandler sets the operation handler for the client patch operation
	ClientsClientPatchHandler clients.ClientPatchHandler
	// PermissionsClientPermissionCreateHandler sets the operation handler for the client permission create operation
	PermissionsClientPermissionCreateHandler permissions.ClientPermissionCreateHandler
	// PermissionsClientPermissionViewHandler sets the operation handler for the client permission view operation
	PermissionsClientPermissionViewHandler permissions.ClientPermissionViewHandler
	// ClientsClientViewHandler sets the operation handler for the client view operation
	ClientsClientViewHandler clients.ClientViewHandler
	// EventsEventCollectionHandler sets the operation handler for the event collection operation
	EventsEventCollectionHandler events.EventCollectionHandler
	// EventsEventViewHandler sets the operation handler for the event view operation
	EventsEventViewHandler events.EventViewHandler
	// RepliesReplyCollectionHandler sets the operation handler for the reply collection operation
	RepliesReplyCollectionHandler replies.ReplyCollectionHandler
	// RepliesReplyCreateHandler sets the operation handler for the reply create operation
	RepliesReplyCreateHandler replies.ReplyCreateHandler
	// RepliesReplyDeleteHandler sets the operation handler for the reply delete operation
	RepliesReplyDeleteHandler replies.ReplyDeleteHandler
	// RepliesReplyPutHandler sets the operation handler for the reply put operation
	RepliesReplyPutHandler replies.ReplyPutHandler
	// RepliesReplyViewHandler sets the operation handler for the reply view operation
	RepliesReplyViewHandler replies.ReplyViewHandler
	// RoutesRouteCollectionHandler sets the operation handler for the route collection operation
	RoutesRouteCollectionHandler routes.RouteCollectionHandler
	// RoutesRouteCreateHandler sets the operation handler for the route create operation
	RoutesRouteCreateHandler routes.RouteCreateHandler
	// RoutesRouteDeleteHandler sets the operation handler for the route delete operation
	RoutesRouteDeleteHandler routes.RouteDeleteHandler
	// RoutesRoutePutHandler sets the operation handler for the route put operation
	RoutesRoutePutHandler routes.RoutePutHandler
	// RoutesRouteViewHandler sets the operation handler for the route view operation
	RoutesRouteViewHandler routes.RouteViewHandler
	// StatusStatusViewHandler sets the operation handler for the status view operation
	StatusStatusViewHandler status.StatusViewHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *DataRouterAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *DataRouterAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *DataRouterAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *DataRouterAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *DataRouterAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *DataRouterAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *DataRouterAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the DataRouterAPI
func (o *DataRouterAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ClientsClientCollectionHandler == nil {
		unregistered = append(unregistered, "clients.ClientCollectionHandler")
	}

	if o.ClientsClientCreateHandler == nil {
		unregistered = append(unregistered, "clients.ClientCreateHandler")
	}

	if o.ClientsClientDeleteHandler == nil {
		unregistered = append(unregistered, "clients.ClientDeleteHandler")
	}

	if o.ClientsClientPatchHandler == nil {
		unregistered = append(unregistered, "clients.ClientPatchHandler")
	}

	if o.PermissionsClientPermissionCreateHandler == nil {
		unregistered = append(unregistered, "permissions.ClientPermissionCreateHandler")
	}

	if o.PermissionsClientPermissionViewHandler == nil {
		unregistered = append(unregistered, "permissions.ClientPermissionViewHandler")
	}

	if o.ClientsClientViewHandler == nil {
		unregistered = append(unregistered, "clients.ClientViewHandler")
	}

	if o.EventsEventCollectionHandler == nil {
		unregistered = append(unregistered, "events.EventCollectionHandler")
	}

	if o.EventsEventViewHandler == nil {
		unregistered = append(unregistered, "events.EventViewHandler")
	}

	if o.RepliesReplyCollectionHandler == nil {
		unregistered = append(unregistered, "replies.ReplyCollectionHandler")
	}

	if o.RepliesReplyCreateHandler == nil {
		unregistered = append(unregistered, "replies.ReplyCreateHandler")
	}

	if o.RepliesReplyDeleteHandler == nil {
		unregistered = append(unregistered, "replies.ReplyDeleteHandler")
	}

	if o.RepliesReplyPutHandler == nil {
		unregistered = append(unregistered, "replies.ReplyPutHandler")
	}

	if o.RepliesReplyViewHandler == nil {
		unregistered = append(unregistered, "replies.ReplyViewHandler")
	}

	if o.RoutesRouteCollectionHandler == nil {
		unregistered = append(unregistered, "routes.RouteCollectionHandler")
	}

	if o.RoutesRouteCreateHandler == nil {
		unregistered = append(unregistered, "routes.RouteCreateHandler")
	}

	if o.RoutesRouteDeleteHandler == nil {
		unregistered = append(unregistered, "routes.RouteDeleteHandler")
	}

	if o.RoutesRoutePutHandler == nil {
		unregistered = append(unregistered, "routes.RoutePutHandler")
	}

	if o.RoutesRouteViewHandler == nil {
		unregistered = append(unregistered, "routes.RouteViewHandler")
	}

	if o.StatusStatusViewHandler == nil {
		unregistered = append(unregistered, "status.StatusViewHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *DataRouterAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *DataRouterAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *DataRouterAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *DataRouterAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *DataRouterAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *DataRouterAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the data router API
func (o *DataRouterAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *DataRouterAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clients"] = clients.NewClientCollection(o.context, o.ClientsClientCollectionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clients"] = clients.NewClientCreate(o.context, o.ClientsClientCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/clients/{clientID}"] = clients.NewClientDelete(o.context, o.ClientsClientDeleteHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/clients/{clientID}"] = clients.NewClientPatch(o.context, o.ClientsClientPatchHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clients/{clientID}/permissions"] = permissions.NewClientPermissionCreate(o.context, o.PermissionsClientPermissionCreateHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clients/{clientID}/permissions"] = permissions.NewClientPermissionView(o.context, o.PermissionsClientPermissionViewHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clients/{clientID}"] = clients.NewClientView(o.context, o.ClientsClientViewHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = events.NewEventCollection(o.context, o.EventsEventCollectionHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events/{eventID}"] = events.NewEventView(o.context, o.EventsEventViewHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replies"] = replies.NewReplyCollection(o.context, o.RepliesReplyCollectionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/replies"] = replies.NewReplyCreate(o.context, o.RepliesReplyCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/replies/{replyID}"] = replies.NewReplyDelete(o.context, o.RepliesReplyDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/replies/{replyID}"] = replies.NewReplyPut(o.context, o.RepliesReplyPutHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replies/{replyID}"] = replies.NewReplyView(o.context, o.RepliesReplyViewHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes"] = routes.NewRouteCollection(o.context, o.RoutesRouteCollectionHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/routes"] = routes.NewRouteCreate(o.context, o.RoutesRouteCreateHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/routes/{routeID}"] = routes.NewRouteDelete(o.context, o.RoutesRouteDeleteHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/routes/{routeID}"] = routes.NewRoutePut(o.context, o.RoutesRoutePutHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/routes/{routeID}"] = routes.NewRouteView(o.context, o.RoutesRouteViewHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status"] = status.NewStatusView(o.context, o.StatusStatusViewHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *DataRouterAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *DataRouterAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *DataRouterAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *DataRouterAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
