// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ClientPermissionViewHandlerFunc turns a function with the right signature into a client permission view handler
type ClientPermissionViewHandlerFunc func(ClientPermissionViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientPermissionViewHandlerFunc) Handle(params ClientPermissionViewParams) middleware.Responder {
	return fn(params)
}

// ClientPermissionViewHandler interface for that can handle valid client permission view params
type ClientPermissionViewHandler interface {
	Handle(ClientPermissionViewParams) middleware.Responder
}

// NewClientPermissionView creates a new http.Handler for the client permission view operation
func NewClientPermissionView(ctx *middleware.Context, handler ClientPermissionViewHandler) *ClientPermissionView {
	return &ClientPermissionView{Context: ctx, Handler: handler}
}

/*ClientPermissionView swagger:route GET /clients/{clientID}/permissions Permissions clientPermissionView

Информация о правах клиента

*/
type ClientPermissionView struct {
	Context *middleware.Context
	Handler ClientPermissionViewHandler
}

func (o *ClientPermissionView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientPermissionViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClientPermissionViewInternalServerErrorBody client permission view internal server error body
// swagger:model ClientPermissionViewInternalServerErrorBody
type ClientPermissionViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionViewInternalServerErrorBodyAO0
	var clientPermissionViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &clientPermissionViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = clientPermissionViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPermissionViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission view internal server error body
func (o *ClientPermissionViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionViewMethodNotAllowedBody client permission view method not allowed body
// swagger:model ClientPermissionViewMethodNotAllowedBody
type ClientPermissionViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionViewMethodNotAllowedBodyAO0
	var clientPermissionViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &clientPermissionViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = clientPermissionViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPermissionViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission view method not allowed body
func (o *ClientPermissionViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionViewNotFoundBody client permission view not found body
// swagger:model ClientPermissionViewNotFoundBody
type ClientPermissionViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionViewNotFoundBodyAO0
	var clientPermissionViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &clientPermissionViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = clientPermissionViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPermissionViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission view not found body
func (o *ClientPermissionViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionViewOKBody client permission view o k body
// swagger:model ClientPermissionViewOKBody
type ClientPermissionViewOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionViewOKBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionViewOKBodyAO0
	var clientPermissionViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &clientPermissionViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = clientPermissionViewOKBodyAO0

	// ClientPermissionViewOKBodyAO1
	var dataClientPermissionViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataClientPermissionViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataClientPermissionViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	clientPermissionViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionViewOKBodyAO0)

	var dataClientPermissionViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataClientPermissionViewOKBodyAO1.Data = o.Data

	jsonDataClientPermissionViewOKBodyAO1, errClientPermissionViewOKBodyAO1 := swag.WriteJSON(dataClientPermissionViewOKBodyAO1)
	if errClientPermissionViewOKBodyAO1 != nil {
		return nil, errClientPermissionViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataClientPermissionViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission view o k body
func (o *ClientPermissionViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPermissionViewOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientPermissionViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionViewOKBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
