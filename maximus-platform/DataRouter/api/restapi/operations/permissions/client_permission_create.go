// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ClientPermissionCreateHandlerFunc turns a function with the right signature into a client permission create handler
type ClientPermissionCreateHandlerFunc func(ClientPermissionCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientPermissionCreateHandlerFunc) Handle(params ClientPermissionCreateParams) middleware.Responder {
	return fn(params)
}

// ClientPermissionCreateHandler interface for that can handle valid client permission create params
type ClientPermissionCreateHandler interface {
	Handle(ClientPermissionCreateParams) middleware.Responder
}

// NewClientPermissionCreate creates a new http.Handler for the client permission create operation
func NewClientPermissionCreate(ctx *middleware.Context, handler ClientPermissionCreateHandler) *ClientPermissionCreate {
	return &ClientPermissionCreate{Context: ctx, Handler: handler}
}

/*ClientPermissionCreate swagger:route POST /clients/{clientID}/permissions Permissions clientPermissionCreate

Изменение прав клиента

*/
type ClientPermissionCreate struct {
	Context *middleware.Context
	Handler ClientPermissionCreateHandler
}

func (o *ClientPermissionCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientPermissionCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClientPermissionCreateBadRequestBody client permission create bad request body
// swagger:model ClientPermissionCreateBadRequestBody
type ClientPermissionCreateBadRequestBody struct {
	models.Error400Data

	ClientPermissionCreateBadRequestBodyAllOf1

	// errors
	Errors *ClientPermissionCreateBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionCreateBadRequestBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionCreateBadRequestBodyAO0
	var clientPermissionCreateBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &clientPermissionCreateBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = clientPermissionCreateBadRequestBodyAO0

	// ClientPermissionCreateBadRequestBodyAO1
	var clientPermissionCreateBadRequestBodyAO1 ClientPermissionCreateBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &clientPermissionCreateBadRequestBodyAO1); err != nil {
		return err
	}
	o.ClientPermissionCreateBadRequestBodyAllOf1 = clientPermissionCreateBadRequestBodyAO1

	// ClientPermissionCreateBadRequestBodyAO2
	var dataClientPermissionCreateBadRequestBodyAO2 struct {
		Errors *ClientPermissionCreateBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataClientPermissionCreateBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataClientPermissionCreateBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionCreateBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	clientPermissionCreateBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionCreateBadRequestBodyAO0)

	clientPermissionCreateBadRequestBodyAO1, err := swag.WriteJSON(o.ClientPermissionCreateBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionCreateBadRequestBodyAO1)

	var dataClientPermissionCreateBadRequestBodyAO2 struct {
		Errors *ClientPermissionCreateBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataClientPermissionCreateBadRequestBodyAO2.Errors = o.Errors

	jsonDataClientPermissionCreateBadRequestBodyAO2, errClientPermissionCreateBadRequestBodyAO2 := swag.WriteJSON(dataClientPermissionCreateBadRequestBodyAO2)
	if errClientPermissionCreateBadRequestBodyAO2 != nil {
		return nil, errClientPermissionCreateBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataClientPermissionCreateBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission create bad request body
func (o *ClientPermissionCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ClientPermissionCreateBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPermissionCreateBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientPermissionCreateBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionCreateBadRequestBodyAO2Errors client permission create bad request body a o2 errors
// swagger:model ClientPermissionCreateBadRequestBodyAO2Errors
type ClientPermissionCreateBadRequestBodyAO2Errors struct {

	// validation
	Validation *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this client permission create bad request body a o2 errors
func (o *ClientPermissionCreateBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPermissionCreateBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientPermissionCreateBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionCreateBadRequestBodyAO2ErrorsValidation client permission create bad request body a o2 errors validation
// swagger:model ClientPermissionCreateBadRequestBodyAO2ErrorsValidation
type ClientPermissionCreateBadRequestBodyAO2ErrorsValidation struct {

	// publish
	// Enum: [array]
	Publish string `json:"publish,omitempty"`

	// subscribe
	// Enum: [array]
	Subscribe string `json:"subscribe,omitempty"`
}

// Validate validates this client permission create bad request body a o2 errors validation
func (o *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePublish(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscribe(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypePublishPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["array"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypePublishPropEnum = append(clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypePublishPropEnum, v)
	}
}

const (

	// ClientPermissionCreateBadRequestBodyAO2ErrorsValidationPublishArray captures enum value "array"
	ClientPermissionCreateBadRequestBodyAO2ErrorsValidationPublishArray string = "array"
)

// prop value enum
func (o *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation) validatePublishEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypePublishPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation) validatePublish(formats strfmt.Registry) error {

	if swag.IsZero(o.Publish) { // not required
		return nil
	}

	// value enum
	if err := o.validatePublishEnum("clientPermissionCreateBadRequest"+"."+"errors"+"."+"validation"+"."+"publish", "body", o.Publish); err != nil {
		return err
	}

	return nil
}

var clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypeSubscribePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["array"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypeSubscribePropEnum = append(clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypeSubscribePropEnum, v)
	}
}

const (

	// ClientPermissionCreateBadRequestBodyAO2ErrorsValidationSubscribeArray captures enum value "array"
	ClientPermissionCreateBadRequestBodyAO2ErrorsValidationSubscribeArray string = "array"
)

// prop value enum
func (o *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation) validateSubscribeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientPermissionCreateBadRequestBodyAO2ErrorsValidationTypeSubscribePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation) validateSubscribe(formats strfmt.Registry) error {

	if swag.IsZero(o.Subscribe) { // not required
		return nil
	}

	// value enum
	if err := o.validateSubscribeEnum("clientPermissionCreateBadRequest"+"."+"errors"+"."+"validation"+"."+"subscribe", "body", o.Subscribe); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionCreateBadRequestBodyAllOf1 client permission create bad request body all of1
// swagger:model ClientPermissionCreateBadRequestBodyAllOf1
type ClientPermissionCreateBadRequestBodyAllOf1 interface{}

// ClientPermissionCreateBody client permission create body
// swagger:model ClientPermissionCreateBody
type ClientPermissionCreateBody struct {
	models.PermissionObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionCreateBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionCreateParamsBodyAO0
	var clientPermissionCreateParamsBodyAO0 models.PermissionObject
	if err := swag.ReadJSON(raw, &clientPermissionCreateParamsBodyAO0); err != nil {
		return err
	}
	o.PermissionObject = clientPermissionCreateParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionCreateBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPermissionCreateParamsBodyAO0, err := swag.WriteJSON(o.PermissionObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionCreateParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission create body
func (o *ClientPermissionCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PermissionObject
	if err := o.PermissionObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionCreateInternalServerErrorBody client permission create internal server error body
// swagger:model ClientPermissionCreateInternalServerErrorBody
type ClientPermissionCreateInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionCreateInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionCreateInternalServerErrorBodyAO0
	var clientPermissionCreateInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &clientPermissionCreateInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = clientPermissionCreateInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionCreateInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPermissionCreateInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionCreateInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission create internal server error body
func (o *ClientPermissionCreateInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionCreateMethodNotAllowedBody client permission create method not allowed body
// swagger:model ClientPermissionCreateMethodNotAllowedBody
type ClientPermissionCreateMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionCreateMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionCreateMethodNotAllowedBodyAO0
	var clientPermissionCreateMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &clientPermissionCreateMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = clientPermissionCreateMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionCreateMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPermissionCreateMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionCreateMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission create method not allowed body
func (o *ClientPermissionCreateMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionCreateNotFoundBody client permission create not found body
// swagger:model ClientPermissionCreateNotFoundBody
type ClientPermissionCreateNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionCreateNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionCreateNotFoundBodyAO0
	var clientPermissionCreateNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &clientPermissionCreateNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = clientPermissionCreateNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionCreateNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPermissionCreateNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionCreateNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission create not found body
func (o *ClientPermissionCreateNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPermissionCreateOKBody client permission create o k body
// swagger:model ClientPermissionCreateOKBody
type ClientPermissionCreateOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPermissionCreateOKBody) UnmarshalJSON(raw []byte) error {
	// ClientPermissionCreateOKBodyAO0
	var clientPermissionCreateOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &clientPermissionCreateOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = clientPermissionCreateOKBodyAO0

	// ClientPermissionCreateOKBodyAO1
	var dataClientPermissionCreateOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataClientPermissionCreateOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataClientPermissionCreateOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPermissionCreateOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	clientPermissionCreateOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPermissionCreateOKBodyAO0)

	var dataClientPermissionCreateOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataClientPermissionCreateOKBodyAO1.Data = o.Data

	jsonDataClientPermissionCreateOKBodyAO1, errClientPermissionCreateOKBodyAO1 := swag.WriteJSON(dataClientPermissionCreateOKBodyAO1)
	if errClientPermissionCreateOKBodyAO1 != nil {
		return nil, errClientPermissionCreateOKBodyAO1
	}
	_parts = append(_parts, jsonDataClientPermissionCreateOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client permission create o k body
func (o *ClientPermissionCreateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPermissionCreateOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientPermissionCreateOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPermissionCreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPermissionCreateOKBody) UnmarshalBinary(b []byte) error {
	var res ClientPermissionCreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {
	models.PermissionObject

	// Дата-время создания пермишна
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.PermissionObject
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.PermissionObject = aO0

	// AO1
	var dataAO1 struct {
		Created strfmt.DateTime `json:"created,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	o.Created = dataAO1.Created

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(o.PermissionObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Created strfmt.DateTime `json:"created,omitempty"`
	}

	dataAO1.Created = o.Created

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PermissionObject
	if err := o.PermissionObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
