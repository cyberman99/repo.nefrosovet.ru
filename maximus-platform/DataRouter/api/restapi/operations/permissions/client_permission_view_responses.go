// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ClientPermissionViewOKCode is the HTTP code returned for type ClientPermissionViewOK
const ClientPermissionViewOKCode int = 200

/*ClientPermissionViewOK Коллекция прав клиентов

swagger:response clientPermissionViewOK
*/
type ClientPermissionViewOK struct {

	/*
	  In: Body
	*/
	Payload *ClientPermissionViewOKBody `json:"body,omitempty"`
}

// NewClientPermissionViewOK creates ClientPermissionViewOK with default headers values
func NewClientPermissionViewOK() *ClientPermissionViewOK {

	return &ClientPermissionViewOK{}
}

// WithPayload adds the payload to the client permission view o k response
func (o *ClientPermissionViewOK) WithPayload(payload *ClientPermissionViewOKBody) *ClientPermissionViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client permission view o k response
func (o *ClientPermissionViewOK) SetPayload(payload *ClientPermissionViewOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPermissionViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClientPermissionViewNotFoundCode is the HTTP code returned for type ClientPermissionViewNotFound
const ClientPermissionViewNotFoundCode int = 404

/*ClientPermissionViewNotFound Not found

swagger:response clientPermissionViewNotFound
*/
type ClientPermissionViewNotFound struct {

	/*
	  In: Body
	*/
	Payload *ClientPermissionViewNotFoundBody `json:"body,omitempty"`
}

// NewClientPermissionViewNotFound creates ClientPermissionViewNotFound with default headers values
func NewClientPermissionViewNotFound() *ClientPermissionViewNotFound {

	return &ClientPermissionViewNotFound{}
}

// WithPayload adds the payload to the client permission view not found response
func (o *ClientPermissionViewNotFound) WithPayload(payload *ClientPermissionViewNotFoundBody) *ClientPermissionViewNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client permission view not found response
func (o *ClientPermissionViewNotFound) SetPayload(payload *ClientPermissionViewNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPermissionViewNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClientPermissionViewMethodNotAllowedCode is the HTTP code returned for type ClientPermissionViewMethodNotAllowed
const ClientPermissionViewMethodNotAllowedCode int = 405

/*ClientPermissionViewMethodNotAllowed Invalid Method

swagger:response clientPermissionViewMethodNotAllowed
*/
type ClientPermissionViewMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *ClientPermissionViewMethodNotAllowedBody `json:"body,omitempty"`
}

// NewClientPermissionViewMethodNotAllowed creates ClientPermissionViewMethodNotAllowed with default headers values
func NewClientPermissionViewMethodNotAllowed() *ClientPermissionViewMethodNotAllowed {

	return &ClientPermissionViewMethodNotAllowed{}
}

// WithPayload adds the payload to the client permission view method not allowed response
func (o *ClientPermissionViewMethodNotAllowed) WithPayload(payload *ClientPermissionViewMethodNotAllowedBody) *ClientPermissionViewMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client permission view method not allowed response
func (o *ClientPermissionViewMethodNotAllowed) SetPayload(payload *ClientPermissionViewMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPermissionViewMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClientPermissionViewInternalServerErrorCode is the HTTP code returned for type ClientPermissionViewInternalServerError
const ClientPermissionViewInternalServerErrorCode int = 500

/*ClientPermissionViewInternalServerError Internal sersver error

swagger:response clientPermissionViewInternalServerError
*/
type ClientPermissionViewInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ClientPermissionViewInternalServerErrorBody `json:"body,omitempty"`
}

// NewClientPermissionViewInternalServerError creates ClientPermissionViewInternalServerError with default headers values
func NewClientPermissionViewInternalServerError() *ClientPermissionViewInternalServerError {

	return &ClientPermissionViewInternalServerError{}
}

// WithPayload adds the payload to the client permission view internal server error response
func (o *ClientPermissionViewInternalServerError) WithPayload(payload *ClientPermissionViewInternalServerErrorBody) *ClientPermissionViewInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client permission view internal server error response
func (o *ClientPermissionViewInternalServerError) SetPayload(payload *ClientPermissionViewInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPermissionViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
