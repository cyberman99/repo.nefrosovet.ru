// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// EventViewHandlerFunc turns a function with the right signature into a event view handler
type EventViewHandlerFunc func(EventViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EventViewHandlerFunc) Handle(params EventViewParams) middleware.Responder {
	return fn(params)
}

// EventViewHandler interface for that can handle valid event view params
type EventViewHandler interface {
	Handle(EventViewParams) middleware.Responder
}

// NewEventView creates a new http.Handler for the event view operation
func NewEventView(ctx *middleware.Context, handler EventViewHandler) *EventView {
	return &EventView{Context: ctx, Handler: handler}
}

/*EventView swagger:route GET /events/{eventID} Events eventView

Информация о событии

*/
type EventView struct {
	Context *middleware.Context
	Handler EventViewHandler
}

func (o *EventView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewEventViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// EventViewInternalServerErrorBody event view internal server error body
// swagger:model EventViewInternalServerErrorBody
type EventViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// EventViewInternalServerErrorBodyAO0
	var eventViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &eventViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = eventViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	eventViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event view internal server error body
func (o *EventViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res EventViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EventViewMethodNotAllowedBody event view method not allowed body
// swagger:model EventViewMethodNotAllowedBody
type EventViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// EventViewMethodNotAllowedBodyAO0
	var eventViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &eventViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = eventViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	eventViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event view method not allowed body
func (o *EventViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res EventViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EventViewNotFoundBody event view not found body
// swagger:model EventViewNotFoundBody
type EventViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// EventViewNotFoundBodyAO0
	var eventViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &eventViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = eventViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	eventViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event view not found body
func (o *EventViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res EventViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EventViewOKBody event view o k body
// swagger:model EventViewOKBody
type EventViewOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventViewOKBody) UnmarshalJSON(raw []byte) error {
	// EventViewOKBodyAO0
	var eventViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &eventViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = eventViewOKBodyAO0

	// EventViewOKBodyAO1
	var dataEventViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataEventViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataEventViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	eventViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventViewOKBodyAO0)

	var dataEventViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataEventViewOKBodyAO1.Data = o.Data

	jsonDataEventViewOKBodyAO1, errEventViewOKBodyAO1 := swag.WriteJSON(dataEventViewOKBodyAO1)
	if errEventViewOKBodyAO1 != nil {
		return nil, errEventViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataEventViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event view o k body
func (o *EventViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventViewOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventViewOKBody) UnmarshalBinary(b []byte) error {
	var res EventViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
