// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// EventCollectionHandlerFunc turns a function with the right signature into a event collection handler
type EventCollectionHandlerFunc func(EventCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn EventCollectionHandlerFunc) Handle(params EventCollectionParams) middleware.Responder {
	return fn(params)
}

// EventCollectionHandler interface for that can handle valid event collection params
type EventCollectionHandler interface {
	Handle(EventCollectionParams) middleware.Responder
}

// NewEventCollection creates a new http.Handler for the event collection operation
func NewEventCollection(ctx *middleware.Context, handler EventCollectionHandler) *EventCollection {
	return &EventCollection{Context: ctx, Handler: handler}
}

/*EventCollection swagger:route GET /events Events eventCollection

Коллекция событий

*/
type EventCollection struct {
	Context *middleware.Context
	Handler EventCollectionHandler
}

func (o *EventCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewEventCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Идентификатор события
	ID string `json:"ID,omitempty"`

	models.EventObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	// AO1
	var aO1 models.EventObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.EventObject = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`
	}

	dataAO0.ID = o.ID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.EventObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.EventObject
	if err := o.EventObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EventCollectionInternalServerErrorBody event collection internal server error body
// swagger:model EventCollectionInternalServerErrorBody
type EventCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// EventCollectionInternalServerErrorBodyAO0
	var eventCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &eventCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = eventCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	eventCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event collection internal server error body
func (o *EventCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res EventCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EventCollectionMethodNotAllowedBody event collection method not allowed body
// swagger:model EventCollectionMethodNotAllowedBody
type EventCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// EventCollectionMethodNotAllowedBodyAO0
	var eventCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &eventCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = eventCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	eventCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event collection method not allowed body
func (o *EventCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res EventCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EventCollectionNotFoundBody event collection not found body
// swagger:model EventCollectionNotFoundBody
type EventCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// EventCollectionNotFoundBodyAO0
	var eventCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &eventCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = eventCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	eventCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event collection not found body
func (o *EventCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EventCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res EventCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// EventCollectionOKBody event collection o k body
// swagger:model EventCollectionOKBody
type EventCollectionOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *EventCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// EventCollectionOKBodyAO0
	var eventCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &eventCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = eventCollectionOKBodyAO0

	// EventCollectionOKBodyAO1
	var dataEventCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataEventCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataEventCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o EventCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	eventCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, eventCollectionOKBodyAO0)

	var dataEventCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataEventCollectionOKBodyAO1.Data = o.Data

	jsonDataEventCollectionOKBodyAO1, errEventCollectionOKBodyAO1 := swag.WriteJSON(dataEventCollectionOKBodyAO1)
	if errEventCollectionOKBodyAO1 != nil {
		return nil, errEventCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataEventCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event collection o k body
func (o *EventCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *EventCollectionOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *EventCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EventCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res EventCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
