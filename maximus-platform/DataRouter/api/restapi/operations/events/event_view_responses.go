// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// EventViewOKCode is the HTTP code returned for type EventViewOK
const EventViewOKCode int = 200

/*EventViewOK Коллекция событий

swagger:response eventViewOK
*/
type EventViewOK struct {

	/*
	  In: Body
	*/
	Payload *EventViewOKBody `json:"body,omitempty"`
}

// NewEventViewOK creates EventViewOK with default headers values
func NewEventViewOK() *EventViewOK {

	return &EventViewOK{}
}

// WithPayload adds the payload to the event view o k response
func (o *EventViewOK) WithPayload(payload *EventViewOKBody) *EventViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event view o k response
func (o *EventViewOK) SetPayload(payload *EventViewOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventViewNotFoundCode is the HTTP code returned for type EventViewNotFound
const EventViewNotFoundCode int = 404

/*EventViewNotFound Not found

swagger:response eventViewNotFound
*/
type EventViewNotFound struct {

	/*
	  In: Body
	*/
	Payload *EventViewNotFoundBody `json:"body,omitempty"`
}

// NewEventViewNotFound creates EventViewNotFound with default headers values
func NewEventViewNotFound() *EventViewNotFound {

	return &EventViewNotFound{}
}

// WithPayload adds the payload to the event view not found response
func (o *EventViewNotFound) WithPayload(payload *EventViewNotFoundBody) *EventViewNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event view not found response
func (o *EventViewNotFound) SetPayload(payload *EventViewNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventViewNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventViewMethodNotAllowedCode is the HTTP code returned for type EventViewMethodNotAllowed
const EventViewMethodNotAllowedCode int = 405

/*EventViewMethodNotAllowed Invalid Method

swagger:response eventViewMethodNotAllowed
*/
type EventViewMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *EventViewMethodNotAllowedBody `json:"body,omitempty"`
}

// NewEventViewMethodNotAllowed creates EventViewMethodNotAllowed with default headers values
func NewEventViewMethodNotAllowed() *EventViewMethodNotAllowed {

	return &EventViewMethodNotAllowed{}
}

// WithPayload adds the payload to the event view method not allowed response
func (o *EventViewMethodNotAllowed) WithPayload(payload *EventViewMethodNotAllowedBody) *EventViewMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event view method not allowed response
func (o *EventViewMethodNotAllowed) SetPayload(payload *EventViewMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventViewMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// EventViewInternalServerErrorCode is the HTTP code returned for type EventViewInternalServerError
const EventViewInternalServerErrorCode int = 500

/*EventViewInternalServerError Internal sersver error

swagger:response eventViewInternalServerError
*/
type EventViewInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *EventViewInternalServerErrorBody `json:"body,omitempty"`
}

// NewEventViewInternalServerError creates EventViewInternalServerError with default headers values
func NewEventViewInternalServerError() *EventViewInternalServerError {

	return &EventViewInternalServerError{}
}

// WithPayload adds the payload to the event view internal server error response
func (o *EventViewInternalServerError) WithPayload(payload *EventViewInternalServerErrorBody) *EventViewInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the event view internal server error response
func (o *EventViewInternalServerError) SetPayload(payload *EventViewInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *EventViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
