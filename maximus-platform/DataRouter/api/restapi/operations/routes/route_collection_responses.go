// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RouteCollectionOKCode is the HTTP code returned for type RouteCollectionOK
const RouteCollectionOKCode int = 200

/*RouteCollectionOK Коллекция маршрутов

swagger:response routeCollectionOK
*/
type RouteCollectionOK struct {

	/*
	  In: Body
	*/
	Payload *RouteCollectionOKBody `json:"body,omitempty"`
}

// NewRouteCollectionOK creates RouteCollectionOK with default headers values
func NewRouteCollectionOK() *RouteCollectionOK {

	return &RouteCollectionOK{}
}

// WithPayload adds the payload to the route collection o k response
func (o *RouteCollectionOK) WithPayload(payload *RouteCollectionOKBody) *RouteCollectionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route collection o k response
func (o *RouteCollectionOK) SetPayload(payload *RouteCollectionOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteCollectionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RouteCollectionNotFoundCode is the HTTP code returned for type RouteCollectionNotFound
const RouteCollectionNotFoundCode int = 404

/*RouteCollectionNotFound Not found

swagger:response routeCollectionNotFound
*/
type RouteCollectionNotFound struct {

	/*
	  In: Body
	*/
	Payload *RouteCollectionNotFoundBody `json:"body,omitempty"`
}

// NewRouteCollectionNotFound creates RouteCollectionNotFound with default headers values
func NewRouteCollectionNotFound() *RouteCollectionNotFound {

	return &RouteCollectionNotFound{}
}

// WithPayload adds the payload to the route collection not found response
func (o *RouteCollectionNotFound) WithPayload(payload *RouteCollectionNotFoundBody) *RouteCollectionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route collection not found response
func (o *RouteCollectionNotFound) SetPayload(payload *RouteCollectionNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteCollectionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RouteCollectionMethodNotAllowedCode is the HTTP code returned for type RouteCollectionMethodNotAllowed
const RouteCollectionMethodNotAllowedCode int = 405

/*RouteCollectionMethodNotAllowed Invalid Method

swagger:response routeCollectionMethodNotAllowed
*/
type RouteCollectionMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *RouteCollectionMethodNotAllowedBody `json:"body,omitempty"`
}

// NewRouteCollectionMethodNotAllowed creates RouteCollectionMethodNotAllowed with default headers values
func NewRouteCollectionMethodNotAllowed() *RouteCollectionMethodNotAllowed {

	return &RouteCollectionMethodNotAllowed{}
}

// WithPayload adds the payload to the route collection method not allowed response
func (o *RouteCollectionMethodNotAllowed) WithPayload(payload *RouteCollectionMethodNotAllowedBody) *RouteCollectionMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route collection method not allowed response
func (o *RouteCollectionMethodNotAllowed) SetPayload(payload *RouteCollectionMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteCollectionMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RouteCollectionInternalServerErrorCode is the HTTP code returned for type RouteCollectionInternalServerError
const RouteCollectionInternalServerErrorCode int = 500

/*RouteCollectionInternalServerError Internal sersver error

swagger:response routeCollectionInternalServerError
*/
type RouteCollectionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *RouteCollectionInternalServerErrorBody `json:"body,omitempty"`
}

// NewRouteCollectionInternalServerError creates RouteCollectionInternalServerError with default headers values
func NewRouteCollectionInternalServerError() *RouteCollectionInternalServerError {

	return &RouteCollectionInternalServerError{}
}

// WithPayload adds the payload to the route collection internal server error response
func (o *RouteCollectionInternalServerError) WithPayload(payload *RouteCollectionInternalServerErrorBody) *RouteCollectionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route collection internal server error response
func (o *RouteCollectionInternalServerError) SetPayload(payload *RouteCollectionInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteCollectionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
