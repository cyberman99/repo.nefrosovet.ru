// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RoutePutOKCode is the HTTP code returned for type RoutePutOK
const RoutePutOKCode int = 200

/*RoutePutOK Коллекция маршрутов

swagger:response routePutOK
*/
type RoutePutOK struct {

	/*
	  In: Body
	*/
	Payload *RoutePutOKBody `json:"body,omitempty"`
}

// NewRoutePutOK creates RoutePutOK with default headers values
func NewRoutePutOK() *RoutePutOK {

	return &RoutePutOK{}
}

// WithPayload adds the payload to the route put o k response
func (o *RoutePutOK) WithPayload(payload *RoutePutOKBody) *RoutePutOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route put o k response
func (o *RoutePutOK) SetPayload(payload *RoutePutOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RoutePutOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RoutePutBadRequestCode is the HTTP code returned for type RoutePutBadRequest
const RoutePutBadRequestCode int = 400

/*RoutePutBadRequest Validation error

swagger:response routePutBadRequest
*/
type RoutePutBadRequest struct {

	/*
	  In: Body
	*/
	Payload *RoutePutBadRequestBody `json:"body,omitempty"`
}

// NewRoutePutBadRequest creates RoutePutBadRequest with default headers values
func NewRoutePutBadRequest() *RoutePutBadRequest {

	return &RoutePutBadRequest{}
}

// WithPayload adds the payload to the route put bad request response
func (o *RoutePutBadRequest) WithPayload(payload *RoutePutBadRequestBody) *RoutePutBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route put bad request response
func (o *RoutePutBadRequest) SetPayload(payload *RoutePutBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RoutePutBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RoutePutNotFoundCode is the HTTP code returned for type RoutePutNotFound
const RoutePutNotFoundCode int = 404

/*RoutePutNotFound Not found

swagger:response routePutNotFound
*/
type RoutePutNotFound struct {

	/*
	  In: Body
	*/
	Payload *RoutePutNotFoundBody `json:"body,omitempty"`
}

// NewRoutePutNotFound creates RoutePutNotFound with default headers values
func NewRoutePutNotFound() *RoutePutNotFound {

	return &RoutePutNotFound{}
}

// WithPayload adds the payload to the route put not found response
func (o *RoutePutNotFound) WithPayload(payload *RoutePutNotFoundBody) *RoutePutNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route put not found response
func (o *RoutePutNotFound) SetPayload(payload *RoutePutNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RoutePutNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RoutePutMethodNotAllowedCode is the HTTP code returned for type RoutePutMethodNotAllowed
const RoutePutMethodNotAllowedCode int = 405

/*RoutePutMethodNotAllowed Invalid Method

swagger:response routePutMethodNotAllowed
*/
type RoutePutMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *RoutePutMethodNotAllowedBody `json:"body,omitempty"`
}

// NewRoutePutMethodNotAllowed creates RoutePutMethodNotAllowed with default headers values
func NewRoutePutMethodNotAllowed() *RoutePutMethodNotAllowed {

	return &RoutePutMethodNotAllowed{}
}

// WithPayload adds the payload to the route put method not allowed response
func (o *RoutePutMethodNotAllowed) WithPayload(payload *RoutePutMethodNotAllowedBody) *RoutePutMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route put method not allowed response
func (o *RoutePutMethodNotAllowed) SetPayload(payload *RoutePutMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RoutePutMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RoutePutInternalServerErrorCode is the HTTP code returned for type RoutePutInternalServerError
const RoutePutInternalServerErrorCode int = 500

/*RoutePutInternalServerError Internal sersver error

swagger:response routePutInternalServerError
*/
type RoutePutInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *RoutePutInternalServerErrorBody `json:"body,omitempty"`
}

// NewRoutePutInternalServerError creates RoutePutInternalServerError with default headers values
func NewRoutePutInternalServerError() *RoutePutInternalServerError {

	return &RoutePutInternalServerError{}
}

// WithPayload adds the payload to the route put internal server error response
func (o *RoutePutInternalServerError) WithPayload(payload *RoutePutInternalServerErrorBody) *RoutePutInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route put internal server error response
func (o *RoutePutInternalServerError) SetPayload(payload *RoutePutInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RoutePutInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
