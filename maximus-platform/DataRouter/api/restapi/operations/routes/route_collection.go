// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// RouteCollectionHandlerFunc turns a function with the right signature into a route collection handler
type RouteCollectionHandlerFunc func(RouteCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RouteCollectionHandlerFunc) Handle(params RouteCollectionParams) middleware.Responder {
	return fn(params)
}

// RouteCollectionHandler interface for that can handle valid route collection params
type RouteCollectionHandler interface {
	Handle(RouteCollectionParams) middleware.Responder
}

// NewRouteCollection creates a new http.Handler for the route collection operation
func NewRouteCollection(ctx *middleware.Context, handler RouteCollectionHandler) *RouteCollection {
	return &RouteCollection{Context: ctx, Handler: handler}
}

/*RouteCollection swagger:route GET /routes Routes routeCollection

Коллекция маршрутов

*/
type RouteCollection struct {
	Context *middleware.Context
	Handler RouteCollectionHandler
}

func (o *RouteCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRouteCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Идентификатор маршрута
	ID string `json:"ID,omitempty"`

	// Дата-время создания роута
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	models.RouteObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Created = dataAO0.Created

	// AO1
	var aO1 models.RouteObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.RouteObject = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.Created = o.Created

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.RouteObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with models.RouteObject
	if err := o.RouteObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RouteCollectionInternalServerErrorBody route collection internal server error body
// swagger:model RouteCollectionInternalServerErrorBody
type RouteCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RouteCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// RouteCollectionInternalServerErrorBodyAO0
	var routeCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &routeCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = routeCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RouteCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	routeCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routeCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route collection internal server error body
func (o *RouteCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RouteCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RouteCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res RouteCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RouteCollectionMethodNotAllowedBody route collection method not allowed body
// swagger:model RouteCollectionMethodNotAllowedBody
type RouteCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RouteCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// RouteCollectionMethodNotAllowedBodyAO0
	var routeCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &routeCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = routeCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RouteCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	routeCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routeCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route collection method not allowed body
func (o *RouteCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RouteCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RouteCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res RouteCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RouteCollectionNotFoundBody route collection not found body
// swagger:model RouteCollectionNotFoundBody
type RouteCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RouteCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// RouteCollectionNotFoundBodyAO0
	var routeCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &routeCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = routeCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RouteCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	routeCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routeCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route collection not found body
func (o *RouteCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RouteCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RouteCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res RouteCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RouteCollectionOKBody route collection o k body
// swagger:model RouteCollectionOKBody
type RouteCollectionOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RouteCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// RouteCollectionOKBodyAO0
	var routeCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &routeCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = routeCollectionOKBodyAO0

	// RouteCollectionOKBodyAO1
	var dataRouteCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataRouteCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataRouteCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RouteCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	routeCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routeCollectionOKBodyAO0)

	var dataRouteCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataRouteCollectionOKBodyAO1.Data = o.Data

	jsonDataRouteCollectionOKBodyAO1, errRouteCollectionOKBodyAO1 := swag.WriteJSON(dataRouteCollectionOKBodyAO1)
	if errRouteCollectionOKBodyAO1 != nil {
		return nil, errRouteCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataRouteCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route collection o k body
func (o *RouteCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RouteCollectionOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routeCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RouteCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RouteCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res RouteCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
