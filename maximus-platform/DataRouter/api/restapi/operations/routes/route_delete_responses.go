// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// RouteDeleteOKCode is the HTTP code returned for type RouteDeleteOK
const RouteDeleteOKCode int = 200

/*RouteDeleteOK Success

swagger:response routeDeleteOK
*/
type RouteDeleteOK struct {

	/*
	  In: Body
	*/
	Payload *RouteDeleteOKBody `json:"body,omitempty"`
}

// NewRouteDeleteOK creates RouteDeleteOK with default headers values
func NewRouteDeleteOK() *RouteDeleteOK {

	return &RouteDeleteOK{}
}

// WithPayload adds the payload to the route delete o k response
func (o *RouteDeleteOK) WithPayload(payload *RouteDeleteOKBody) *RouteDeleteOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route delete o k response
func (o *RouteDeleteOK) SetPayload(payload *RouteDeleteOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteDeleteOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RouteDeleteNotFoundCode is the HTTP code returned for type RouteDeleteNotFound
const RouteDeleteNotFoundCode int = 404

/*RouteDeleteNotFound Not found

swagger:response routeDeleteNotFound
*/
type RouteDeleteNotFound struct {

	/*
	  In: Body
	*/
	Payload *RouteDeleteNotFoundBody `json:"body,omitempty"`
}

// NewRouteDeleteNotFound creates RouteDeleteNotFound with default headers values
func NewRouteDeleteNotFound() *RouteDeleteNotFound {

	return &RouteDeleteNotFound{}
}

// WithPayload adds the payload to the route delete not found response
func (o *RouteDeleteNotFound) WithPayload(payload *RouteDeleteNotFoundBody) *RouteDeleteNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route delete not found response
func (o *RouteDeleteNotFound) SetPayload(payload *RouteDeleteNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteDeleteNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RouteDeleteMethodNotAllowedCode is the HTTP code returned for type RouteDeleteMethodNotAllowed
const RouteDeleteMethodNotAllowedCode int = 405

/*RouteDeleteMethodNotAllowed Invalid Method

swagger:response routeDeleteMethodNotAllowed
*/
type RouteDeleteMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *RouteDeleteMethodNotAllowedBody `json:"body,omitempty"`
}

// NewRouteDeleteMethodNotAllowed creates RouteDeleteMethodNotAllowed with default headers values
func NewRouteDeleteMethodNotAllowed() *RouteDeleteMethodNotAllowed {

	return &RouteDeleteMethodNotAllowed{}
}

// WithPayload adds the payload to the route delete method not allowed response
func (o *RouteDeleteMethodNotAllowed) WithPayload(payload *RouteDeleteMethodNotAllowedBody) *RouteDeleteMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route delete method not allowed response
func (o *RouteDeleteMethodNotAllowed) SetPayload(payload *RouteDeleteMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteDeleteMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RouteDeleteInternalServerErrorCode is the HTTP code returned for type RouteDeleteInternalServerError
const RouteDeleteInternalServerErrorCode int = 500

/*RouteDeleteInternalServerError Internal sersver error

swagger:response routeDeleteInternalServerError
*/
type RouteDeleteInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *RouteDeleteInternalServerErrorBody `json:"body,omitempty"`
}

// NewRouteDeleteInternalServerError creates RouteDeleteInternalServerError with default headers values
func NewRouteDeleteInternalServerError() *RouteDeleteInternalServerError {

	return &RouteDeleteInternalServerError{}
}

// WithPayload adds the payload to the route delete internal server error response
func (o *RouteDeleteInternalServerError) WithPayload(payload *RouteDeleteInternalServerErrorBody) *RouteDeleteInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the route delete internal server error response
func (o *RouteDeleteInternalServerError) SetPayload(payload *RouteDeleteInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RouteDeleteInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
