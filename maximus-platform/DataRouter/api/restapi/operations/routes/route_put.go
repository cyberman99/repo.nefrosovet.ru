// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// RoutePutHandlerFunc turns a function with the right signature into a route put handler
type RoutePutHandlerFunc func(RoutePutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RoutePutHandlerFunc) Handle(params RoutePutParams) middleware.Responder {
	return fn(params)
}

// RoutePutHandler interface for that can handle valid route put params
type RoutePutHandler interface {
	Handle(RoutePutParams) middleware.Responder
}

// NewRoutePut creates a new http.Handler for the route put operation
func NewRoutePut(ctx *middleware.Context, handler RoutePutHandler) *RoutePut {
	return &RoutePut{Context: ctx, Handler: handler}
}

/*RoutePut swagger:route PUT /routes/{routeID} Routes routePut

Изменение маршрута

*/
type RoutePut struct {
	Context *middleware.Context
	Handler RoutePutHandler
}

func (o *RoutePut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRoutePutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RoutePutBadRequestBody route put bad request body
// swagger:model RoutePutBadRequestBody
type RoutePutBadRequestBody struct {
	models.Error400Data

	RoutePutBadRequestBodyAllOf1

	// errors
	Errors *RoutePutBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoutePutBadRequestBody) UnmarshalJSON(raw []byte) error {
	// RoutePutBadRequestBodyAO0
	var routePutBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &routePutBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = routePutBadRequestBodyAO0

	// RoutePutBadRequestBodyAO1
	var routePutBadRequestBodyAO1 RoutePutBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &routePutBadRequestBodyAO1); err != nil {
		return err
	}
	o.RoutePutBadRequestBodyAllOf1 = routePutBadRequestBodyAO1

	// RoutePutBadRequestBodyAO2
	var dataRoutePutBadRequestBodyAO2 struct {
		Errors *RoutePutBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataRoutePutBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataRoutePutBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoutePutBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	routePutBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutBadRequestBodyAO0)

	routePutBadRequestBodyAO1, err := swag.WriteJSON(o.RoutePutBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutBadRequestBodyAO1)

	var dataRoutePutBadRequestBodyAO2 struct {
		Errors *RoutePutBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataRoutePutBadRequestBodyAO2.Errors = o.Errors

	jsonDataRoutePutBadRequestBodyAO2, errRoutePutBadRequestBodyAO2 := swag.WriteJSON(dataRoutePutBadRequestBodyAO2)
	if errRoutePutBadRequestBodyAO2 != nil {
		return nil, errRoutePutBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataRoutePutBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route put bad request body
func (o *RoutePutBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with RoutePutBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoutePutBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routePutBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutBadRequestBody) UnmarshalBinary(b []byte) error {
	var res RoutePutBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutBadRequestBodyAO2Errors route put bad request body a o2 errors
// swagger:model RoutePutBadRequestBodyAO2Errors
type RoutePutBadRequestBodyAO2Errors struct {

	// validation
	Validation *RoutePutBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this route put bad request body a o2 errors
func (o *RoutePutBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("routePutBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res RoutePutBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutBadRequestBodyAO2ErrorsValidation route put bad request body a o2 errors validation
// swagger:model RoutePutBadRequestBodyAO2ErrorsValidation
type RoutePutBadRequestBodyAO2ErrorsValidation struct {

	// dst
	// Enum: [object required]
	Dst string `json:"dst,omitempty"`

	// dst qos
	// Enum: [int required]
	DstQos string `json:"dst.qos,omitempty"`

	// dst topic
	// Enum: [object required]
	DstTopic string `json:"dst.topic,omitempty"`

	// reply ID
	// Enum: [string not_found]
	ReplyID string `json:"replyID,omitempty"`

	// src
	// Enum: [object required]
	Src string `json:"src,omitempty"`

	// src payload
	// Enum: [object]
	SrcPayload string `json:"src.payload,omitempty"`

	// src topic
	// Enum: [object required]
	SrcTopic string `json:"src.topic,omitempty"`
}

// Validate validates this route put bad request body a o2 errors validation
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDst(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDstQos(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDstTopic(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplyID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSrc(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSrcPayload(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSrcTopic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var routePutBadRequestBodyAO2ErrorsValidationTypeDstPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["object","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePutBadRequestBodyAO2ErrorsValidationTypeDstPropEnum = append(routePutBadRequestBodyAO2ErrorsValidationTypeDstPropEnum, v)
	}
}

const (

	// RoutePutBadRequestBodyAO2ErrorsValidationDstObject captures enum value "object"
	RoutePutBadRequestBodyAO2ErrorsValidationDstObject string = "object"

	// RoutePutBadRequestBodyAO2ErrorsValidationDstRequired captures enum value "required"
	RoutePutBadRequestBodyAO2ErrorsValidationDstRequired string = "required"
)

// prop value enum
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateDstEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routePutBadRequestBodyAO2ErrorsValidationTypeDstPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateDst(formats strfmt.Registry) error {

	if swag.IsZero(o.Dst) { // not required
		return nil
	}

	// value enum
	if err := o.validateDstEnum("routePutBadRequest"+"."+"errors"+"."+"validation"+"."+"dst", "body", o.Dst); err != nil {
		return err
	}

	return nil
}

var routePutBadRequestBodyAO2ErrorsValidationTypeDstQosPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["int","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePutBadRequestBodyAO2ErrorsValidationTypeDstQosPropEnum = append(routePutBadRequestBodyAO2ErrorsValidationTypeDstQosPropEnum, v)
	}
}

const (

	// RoutePutBadRequestBodyAO2ErrorsValidationDstQosInt captures enum value "int"
	RoutePutBadRequestBodyAO2ErrorsValidationDstQosInt string = "int"

	// RoutePutBadRequestBodyAO2ErrorsValidationDstQosRequired captures enum value "required"
	RoutePutBadRequestBodyAO2ErrorsValidationDstQosRequired string = "required"
)

// prop value enum
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateDstQosEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routePutBadRequestBodyAO2ErrorsValidationTypeDstQosPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateDstQos(formats strfmt.Registry) error {

	if swag.IsZero(o.DstQos) { // not required
		return nil
	}

	// value enum
	if err := o.validateDstQosEnum("routePutBadRequest"+"."+"errors"+"."+"validation"+"."+"dst.qos", "body", o.DstQos); err != nil {
		return err
	}

	return nil
}

var routePutBadRequestBodyAO2ErrorsValidationTypeDstTopicPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["object","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePutBadRequestBodyAO2ErrorsValidationTypeDstTopicPropEnum = append(routePutBadRequestBodyAO2ErrorsValidationTypeDstTopicPropEnum, v)
	}
}

const (

	// RoutePutBadRequestBodyAO2ErrorsValidationDstTopicObject captures enum value "object"
	RoutePutBadRequestBodyAO2ErrorsValidationDstTopicObject string = "object"

	// RoutePutBadRequestBodyAO2ErrorsValidationDstTopicRequired captures enum value "required"
	RoutePutBadRequestBodyAO2ErrorsValidationDstTopicRequired string = "required"
)

// prop value enum
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateDstTopicEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routePutBadRequestBodyAO2ErrorsValidationTypeDstTopicPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateDstTopic(formats strfmt.Registry) error {

	if swag.IsZero(o.DstTopic) { // not required
		return nil
	}

	// value enum
	if err := o.validateDstTopicEnum("routePutBadRequest"+"."+"errors"+"."+"validation"+"."+"dst.topic", "body", o.DstTopic); err != nil {
		return err
	}

	return nil
}

var routePutBadRequestBodyAO2ErrorsValidationTypeReplyIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","not_found"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePutBadRequestBodyAO2ErrorsValidationTypeReplyIDPropEnum = append(routePutBadRequestBodyAO2ErrorsValidationTypeReplyIDPropEnum, v)
	}
}

const (

	// RoutePutBadRequestBodyAO2ErrorsValidationReplyIDString captures enum value "string"
	RoutePutBadRequestBodyAO2ErrorsValidationReplyIDString string = "string"

	// RoutePutBadRequestBodyAO2ErrorsValidationReplyIDNotFound captures enum value "not_found"
	RoutePutBadRequestBodyAO2ErrorsValidationReplyIDNotFound string = "not_found"
)

// prop value enum
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateReplyIDEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routePutBadRequestBodyAO2ErrorsValidationTypeReplyIDPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateReplyID(formats strfmt.Registry) error {

	if swag.IsZero(o.ReplyID) { // not required
		return nil
	}

	// value enum
	if err := o.validateReplyIDEnum("routePutBadRequest"+"."+"errors"+"."+"validation"+"."+"replyID", "body", o.ReplyID); err != nil {
		return err
	}

	return nil
}

var routePutBadRequestBodyAO2ErrorsValidationTypeSrcPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["object","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePutBadRequestBodyAO2ErrorsValidationTypeSrcPropEnum = append(routePutBadRequestBodyAO2ErrorsValidationTypeSrcPropEnum, v)
	}
}

const (

	// RoutePutBadRequestBodyAO2ErrorsValidationSrcObject captures enum value "object"
	RoutePutBadRequestBodyAO2ErrorsValidationSrcObject string = "object"

	// RoutePutBadRequestBodyAO2ErrorsValidationSrcRequired captures enum value "required"
	RoutePutBadRequestBodyAO2ErrorsValidationSrcRequired string = "required"
)

// prop value enum
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateSrcEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routePutBadRequestBodyAO2ErrorsValidationTypeSrcPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateSrc(formats strfmt.Registry) error {

	if swag.IsZero(o.Src) { // not required
		return nil
	}

	// value enum
	if err := o.validateSrcEnum("routePutBadRequest"+"."+"errors"+"."+"validation"+"."+"src", "body", o.Src); err != nil {
		return err
	}

	return nil
}

var routePutBadRequestBodyAO2ErrorsValidationTypeSrcPayloadPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["object"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePutBadRequestBodyAO2ErrorsValidationTypeSrcPayloadPropEnum = append(routePutBadRequestBodyAO2ErrorsValidationTypeSrcPayloadPropEnum, v)
	}
}

const (

	// RoutePutBadRequestBodyAO2ErrorsValidationSrcPayloadObject captures enum value "object"
	RoutePutBadRequestBodyAO2ErrorsValidationSrcPayloadObject string = "object"
)

// prop value enum
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateSrcPayloadEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routePutBadRequestBodyAO2ErrorsValidationTypeSrcPayloadPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateSrcPayload(formats strfmt.Registry) error {

	if swag.IsZero(o.SrcPayload) { // not required
		return nil
	}

	// value enum
	if err := o.validateSrcPayloadEnum("routePutBadRequest"+"."+"errors"+"."+"validation"+"."+"src.payload", "body", o.SrcPayload); err != nil {
		return err
	}

	return nil
}

var routePutBadRequestBodyAO2ErrorsValidationTypeSrcTopicPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["object","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routePutBadRequestBodyAO2ErrorsValidationTypeSrcTopicPropEnum = append(routePutBadRequestBodyAO2ErrorsValidationTypeSrcTopicPropEnum, v)
	}
}

const (

	// RoutePutBadRequestBodyAO2ErrorsValidationSrcTopicObject captures enum value "object"
	RoutePutBadRequestBodyAO2ErrorsValidationSrcTopicObject string = "object"

	// RoutePutBadRequestBodyAO2ErrorsValidationSrcTopicRequired captures enum value "required"
	RoutePutBadRequestBodyAO2ErrorsValidationSrcTopicRequired string = "required"
)

// prop value enum
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateSrcTopicEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routePutBadRequestBodyAO2ErrorsValidationTypeSrcTopicPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *RoutePutBadRequestBodyAO2ErrorsValidation) validateSrcTopic(formats strfmt.Registry) error {

	if swag.IsZero(o.SrcTopic) { // not required
		return nil
	}

	// value enum
	if err := o.validateSrcTopicEnum("routePutBadRequest"+"."+"errors"+"."+"validation"+"."+"src.topic", "body", o.SrcTopic); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res RoutePutBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutBadRequestBodyAllOf1 route put bad request body all of1
// swagger:model RoutePutBadRequestBodyAllOf1
type RoutePutBadRequestBodyAllOf1 interface{}

// RoutePutBody route put body
// swagger:model RoutePutBody
type RoutePutBody struct {
	models.RouteObject

	RoutePutParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoutePutBody) UnmarshalJSON(raw []byte) error {
	// RoutePutParamsBodyAO0
	var routePutParamsBodyAO0 models.RouteObject
	if err := swag.ReadJSON(raw, &routePutParamsBodyAO0); err != nil {
		return err
	}
	o.RouteObject = routePutParamsBodyAO0

	// RoutePutParamsBodyAO1
	var routePutParamsBodyAO1 RoutePutParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &routePutParamsBodyAO1); err != nil {
		return err
	}
	o.RoutePutParamsBodyAllOf1 = routePutParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoutePutBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	routePutParamsBodyAO0, err := swag.WriteJSON(o.RouteObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutParamsBodyAO0)

	routePutParamsBodyAO1, err := swag.WriteJSON(o.RoutePutParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route put body
func (o *RoutePutBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.RouteObject
	if err := o.RouteObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with RoutePutParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutBody) UnmarshalBinary(b []byte) error {
	var res RoutePutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutInternalServerErrorBody route put internal server error body
// swagger:model RoutePutInternalServerErrorBody
type RoutePutInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoutePutInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// RoutePutInternalServerErrorBodyAO0
	var routePutInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &routePutInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = routePutInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoutePutInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	routePutInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route put internal server error body
func (o *RoutePutInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res RoutePutInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutMethodNotAllowedBody route put method not allowed body
// swagger:model RoutePutMethodNotAllowedBody
type RoutePutMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoutePutMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// RoutePutMethodNotAllowedBodyAO0
	var routePutMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &routePutMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = routePutMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoutePutMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	routePutMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route put method not allowed body
func (o *RoutePutMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res RoutePutMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutNotFoundBody route put not found body
// swagger:model RoutePutNotFoundBody
type RoutePutNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoutePutNotFoundBody) UnmarshalJSON(raw []byte) error {
	// RoutePutNotFoundBodyAO0
	var routePutNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &routePutNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = routePutNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoutePutNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	routePutNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route put not found body
func (o *RoutePutNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutNotFoundBody) UnmarshalBinary(b []byte) error {
	var res RoutePutNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutOKBody route put o k body
// swagger:model RoutePutOKBody
type RoutePutOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *RoutePutOKBody) UnmarshalJSON(raw []byte) error {
	// RoutePutOKBodyAO0
	var routePutOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &routePutOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = routePutOKBodyAO0

	// RoutePutOKBodyAO1
	var dataRoutePutOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataRoutePutOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataRoutePutOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o RoutePutOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	routePutOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, routePutOKBodyAO0)

	var dataRoutePutOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataRoutePutOKBodyAO1.Data = o.Data

	jsonDataRoutePutOKBodyAO1, errRoutePutOKBodyAO1 := swag.WriteJSON(dataRoutePutOKBodyAO1)
	if errRoutePutOKBodyAO1 != nil {
		return nil, errRoutePutOKBodyAO1
	}
	_parts = append(_parts, jsonDataRoutePutOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this route put o k body
func (o *RoutePutOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RoutePutOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routePutOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *RoutePutOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RoutePutOKBody) UnmarshalBinary(b []byte) error {
	var res RoutePutOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RoutePutParamsBodyAllOf1 route put params body all of1
// swagger:model RoutePutParamsBodyAllOf1
type RoutePutParamsBodyAllOf1 interface{}
