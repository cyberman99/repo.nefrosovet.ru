// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ClientDeleteHandlerFunc turns a function with the right signature into a client delete handler
type ClientDeleteHandlerFunc func(ClientDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientDeleteHandlerFunc) Handle(params ClientDeleteParams) middleware.Responder {
	return fn(params)
}

// ClientDeleteHandler interface for that can handle valid client delete params
type ClientDeleteHandler interface {
	Handle(ClientDeleteParams) middleware.Responder
}

// NewClientDelete creates a new http.Handler for the client delete operation
func NewClientDelete(ctx *middleware.Context, handler ClientDeleteHandler) *ClientDelete {
	return &ClientDelete{Context: ctx, Handler: handler}
}

/*ClientDelete swagger:route DELETE /clients/{clientID} Clients clientDelete

Удаление клиента

*/
type ClientDelete struct {
	Context *middleware.Context
	Handler ClientDeleteHandler
}

func (o *ClientDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientDeleteParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClientDeleteInternalServerErrorBody client delete internal server error body
// swagger:model ClientDeleteInternalServerErrorBody
type ClientDeleteInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientDeleteInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ClientDeleteInternalServerErrorBodyAO0
	var clientDeleteInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &clientDeleteInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = clientDeleteInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientDeleteInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientDeleteInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientDeleteInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client delete internal server error body
func (o *ClientDeleteInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientDeleteInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientDeleteInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ClientDeleteInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientDeleteMethodNotAllowedBody client delete method not allowed body
// swagger:model ClientDeleteMethodNotAllowedBody
type ClientDeleteMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientDeleteMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ClientDeleteMethodNotAllowedBodyAO0
	var clientDeleteMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &clientDeleteMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = clientDeleteMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientDeleteMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientDeleteMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientDeleteMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client delete method not allowed body
func (o *ClientDeleteMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientDeleteMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientDeleteMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ClientDeleteMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientDeleteNotFoundBody client delete not found body
// swagger:model ClientDeleteNotFoundBody
type ClientDeleteNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientDeleteNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ClientDeleteNotFoundBodyAO0
	var clientDeleteNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &clientDeleteNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = clientDeleteNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientDeleteNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientDeleteNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientDeleteNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client delete not found body
func (o *ClientDeleteNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientDeleteNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientDeleteNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ClientDeleteNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientDeleteOKBody client delete o k body
// swagger:model ClientDeleteOKBody
type ClientDeleteOKBody struct {
	models.SuccessData

	// data
	Data interface{} `json:"data,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientDeleteOKBody) UnmarshalJSON(raw []byte) error {
	// ClientDeleteOKBodyAO0
	var clientDeleteOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &clientDeleteOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = clientDeleteOKBodyAO0

	// ClientDeleteOKBodyAO1
	var dataClientDeleteOKBodyAO1 struct {
		Data interface{} `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataClientDeleteOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataClientDeleteOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientDeleteOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	clientDeleteOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientDeleteOKBodyAO0)

	var dataClientDeleteOKBodyAO1 struct {
		Data interface{} `json:"data,omitempty"`
	}

	dataClientDeleteOKBodyAO1.Data = o.Data

	jsonDataClientDeleteOKBodyAO1, errClientDeleteOKBodyAO1 := swag.WriteJSON(dataClientDeleteOKBodyAO1)
	if errClientDeleteOKBodyAO1 != nil {
		return nil, errClientDeleteOKBodyAO1
	}
	_parts = append(_parts, jsonDataClientDeleteOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client delete o k body
func (o *ClientDeleteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientDeleteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientDeleteOKBody) UnmarshalBinary(b []byte) error {
	var res ClientDeleteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
