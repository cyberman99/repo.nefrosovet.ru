// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ClientViewHandlerFunc turns a function with the right signature into a client view handler
type ClientViewHandlerFunc func(ClientViewParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientViewHandlerFunc) Handle(params ClientViewParams) middleware.Responder {
	return fn(params)
}

// ClientViewHandler interface for that can handle valid client view params
type ClientViewHandler interface {
	Handle(ClientViewParams) middleware.Responder
}

// NewClientView creates a new http.Handler for the client view operation
func NewClientView(ctx *middleware.Context, handler ClientViewHandler) *ClientView {
	return &ClientView{Context: ctx, Handler: handler}
}

/*ClientView swagger:route GET /clients/{clientID} Clients clientView

Информация о клиенте

*/
type ClientView struct {
	Context *middleware.Context
	Handler ClientViewHandler
}

func (o *ClientView) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientViewParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClientViewInternalServerErrorBody client view internal server error body
// swagger:model ClientViewInternalServerErrorBody
type ClientViewInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientViewInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ClientViewInternalServerErrorBodyAO0
	var clientViewInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &clientViewInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = clientViewInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientViewInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientViewInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientViewInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client view internal server error body
func (o *ClientViewInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientViewInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientViewInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ClientViewInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientViewMethodNotAllowedBody client view method not allowed body
// swagger:model ClientViewMethodNotAllowedBody
type ClientViewMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientViewMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ClientViewMethodNotAllowedBodyAO0
	var clientViewMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &clientViewMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = clientViewMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientViewMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientViewMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientViewMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client view method not allowed body
func (o *ClientViewMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientViewMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientViewMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ClientViewMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientViewNotFoundBody client view not found body
// swagger:model ClientViewNotFoundBody
type ClientViewNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientViewNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ClientViewNotFoundBodyAO0
	var clientViewNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &clientViewNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = clientViewNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientViewNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientViewNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientViewNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client view not found body
func (o *ClientViewNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientViewNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientViewNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ClientViewNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientViewOKBody client view o k body
// swagger:model ClientViewOKBody
type ClientViewOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientViewOKBody) UnmarshalJSON(raw []byte) error {
	// ClientViewOKBodyAO0
	var clientViewOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &clientViewOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = clientViewOKBodyAO0

	// ClientViewOKBodyAO1
	var dataClientViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataClientViewOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataClientViewOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientViewOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	clientViewOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientViewOKBodyAO0)

	var dataClientViewOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataClientViewOKBodyAO1.Data = o.Data

	jsonDataClientViewOKBodyAO1, errClientViewOKBodyAO1 := swag.WriteJSON(dataClientViewOKBodyAO1)
	if errClientViewOKBodyAO1 != nil {
		return nil, errClientViewOKBodyAO1
	}
	_parts = append(_parts, jsonDataClientViewOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client view o k body
func (o *ClientViewOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientViewOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientViewOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientViewOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientViewOKBody) UnmarshalBinary(b []byte) error {
	var res ClientViewOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
