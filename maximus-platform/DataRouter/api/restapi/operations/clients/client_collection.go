// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ClientCollectionHandlerFunc turns a function with the right signature into a client collection handler
type ClientCollectionHandlerFunc func(ClientCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientCollectionHandlerFunc) Handle(params ClientCollectionParams) middleware.Responder {
	return fn(params)
}

// ClientCollectionHandler interface for that can handle valid client collection params
type ClientCollectionHandler interface {
	Handle(ClientCollectionParams) middleware.Responder
}

// NewClientCollection creates a new http.Handler for the client collection operation
func NewClientCollection(ctx *middleware.Context, handler ClientCollectionHandler) *ClientCollection {
	return &ClientCollection{Context: ctx, Handler: handler}
}

/*ClientCollection swagger:route GET /clients Clients clientCollection

Коллекция клиентов

*/
type ClientCollection struct {
	Context *middleware.Context
	Handler ClientCollectionHandler
}

func (o *ClientCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClientCollectionInternalServerErrorBody client collection internal server error body
// swagger:model ClientCollectionInternalServerErrorBody
type ClientCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ClientCollectionInternalServerErrorBodyAO0
	var clientCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &clientCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = clientCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client collection internal server error body
func (o *ClientCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ClientCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientCollectionMethodNotAllowedBody client collection method not allowed body
// swagger:model ClientCollectionMethodNotAllowedBody
type ClientCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ClientCollectionMethodNotAllowedBodyAO0
	var clientCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &clientCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = clientCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client collection method not allowed body
func (o *ClientCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ClientCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientCollectionNotFoundBody client collection not found body
// swagger:model ClientCollectionNotFoundBody
type ClientCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ClientCollectionNotFoundBodyAO0
	var clientCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &clientCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = clientCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client collection not found body
func (o *ClientCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ClientCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientCollectionOKBody client collection o k body
// swagger:model ClientCollectionOKBody
type ClientCollectionOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// ClientCollectionOKBodyAO0
	var clientCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &clientCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = clientCollectionOKBodyAO0

	// ClientCollectionOKBodyAO1
	var dataClientCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataClientCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataClientCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	clientCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientCollectionOKBodyAO0)

	var dataClientCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataClientCollectionOKBodyAO1.Data = o.Data

	jsonDataClientCollectionOKBodyAO1, errClientCollectionOKBodyAO1 := swag.WriteJSON(dataClientCollectionOKBodyAO1)
	if errClientCollectionOKBodyAO1 != nil {
		return nil, errClientCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataClientCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client collection o k body
func (o *ClientCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientCollectionOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res ClientCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Идентификатор клиента
	// Format: uuid
	ID strfmt.UUID `json:"ID,omitempty"`

	models.ClientObject

	// ISO Дата-время создания клиента
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// ISO Дата-время протухания клиента
	// Required: true
	// Format: date-time
	Expired *strfmt.DateTime `json:"expired"`

	// Время жизни клиента в секундах.
	// Required: true
	TTL *int64 `json:"ttl"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID strfmt.UUID `json:"ID,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	// AO1
	var aO1 models.ClientObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ClientObject = aO1

	// AO2
	var dataAO2 struct {
		Created *strfmt.DateTime `json:"created"`

		Expired *strfmt.DateTime `json:"expired"`

		TTL *int64 `json:"ttl"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	o.Created = dataAO2.Created

	o.Expired = dataAO2.Expired

	o.TTL = dataAO2.TTL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	var dataAO0 struct {
		ID strfmt.UUID `json:"ID,omitempty"`
	}

	dataAO0.ID = o.ID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.ClientObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		Created *strfmt.DateTime `json:"created"`

		Expired *strfmt.DateTime `json:"expired"`

		TTL *int64 `json:"ttl"`
	}

	dataAO2.Created = o.Created

	dataAO2.Expired = o.Expired

	dataAO2.TTL = o.TTL

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with models.ClientObject
	if err := o.ClientObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataItems0) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("ID", "body", "uuid", o.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DataItems0) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DataItems0) validateExpired(formats strfmt.Registry) error {

	if err := validate.Required("expired", "body", o.Expired); err != nil {
		return err
	}

	if err := validate.FormatOf("expired", "body", "date-time", o.Expired.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *DataItems0) validateTTL(formats strfmt.Registry) error {

	if err := validate.Required("ttl", "body", o.TTL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
