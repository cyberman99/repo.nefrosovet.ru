// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ClientPatchHandlerFunc turns a function with the right signature into a client patch handler
type ClientPatchHandlerFunc func(ClientPatchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ClientPatchHandlerFunc) Handle(params ClientPatchParams) middleware.Responder {
	return fn(params)
}

// ClientPatchHandler interface for that can handle valid client patch params
type ClientPatchHandler interface {
	Handle(ClientPatchParams) middleware.Responder
}

// NewClientPatch creates a new http.Handler for the client patch operation
func NewClientPatch(ctx *middleware.Context, handler ClientPatchHandler) *ClientPatch {
	return &ClientPatch{Context: ctx, Handler: handler}
}

/*ClientPatch swagger:route PATCH /clients/{clientID} Clients clientPatch

Изменение клиента

*/
type ClientPatch struct {
	Context *middleware.Context
	Handler ClientPatchHandler
}

func (o *ClientPatch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewClientPatchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ClientPatchBadRequestBody client patch bad request body
// swagger:model ClientPatchBadRequestBody
type ClientPatchBadRequestBody struct {
	models.Error400Data

	ClientPatchBadRequestBodyAllOf1

	// errors
	Errors *ClientPatchBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPatchBadRequestBody) UnmarshalJSON(raw []byte) error {
	// ClientPatchBadRequestBodyAO0
	var clientPatchBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &clientPatchBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = clientPatchBadRequestBodyAO0

	// ClientPatchBadRequestBodyAO1
	var clientPatchBadRequestBodyAO1 ClientPatchBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &clientPatchBadRequestBodyAO1); err != nil {
		return err
	}
	o.ClientPatchBadRequestBodyAllOf1 = clientPatchBadRequestBodyAO1

	// ClientPatchBadRequestBodyAO2
	var dataClientPatchBadRequestBodyAO2 struct {
		Errors *ClientPatchBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataClientPatchBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataClientPatchBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPatchBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	clientPatchBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPatchBadRequestBodyAO0)

	clientPatchBadRequestBodyAO1, err := swag.WriteJSON(o.ClientPatchBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPatchBadRequestBodyAO1)

	var dataClientPatchBadRequestBodyAO2 struct {
		Errors *ClientPatchBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataClientPatchBadRequestBodyAO2.Errors = o.Errors

	jsonDataClientPatchBadRequestBodyAO2, errClientPatchBadRequestBodyAO2 := swag.WriteJSON(dataClientPatchBadRequestBodyAO2)
	if errClientPatchBadRequestBodyAO2 != nil {
		return nil, errClientPatchBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataClientPatchBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client patch bad request body
func (o *ClientPatchBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ClientPatchBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPatchBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientPatchBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ClientPatchBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPatchBadRequestBodyAO2Errors client patch bad request body a o2 errors
// swagger:model ClientPatchBadRequestBodyAO2Errors
type ClientPatchBadRequestBodyAO2Errors struct {

	// validation
	Validation *ClientPatchBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this client patch bad request body a o2 errors
func (o *ClientPatchBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPatchBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientPatchBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res ClientPatchBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPatchBadRequestBodyAO2ErrorsValidation client patch bad request body a o2 errors validation
// swagger:model ClientPatchBadRequestBodyAO2ErrorsValidation
type ClientPatchBadRequestBodyAO2ErrorsValidation struct {

	// ID
	// Enum: [string format unique]
	ID string `json:"ID,omitempty"`

	// password
	// Enum: [string required]
	Password string `json:"password,omitempty"`

	// ttl
	// Enum: [int]
	TTL string `json:"ttl,omitempty"`

	// username
	// Enum: [string required]
	Username string `json:"username,omitempty"`
}

// Validate validates this client patch bad request body a o2 errors validation
func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clientPatchBadRequestBodyAO2ErrorsValidationTypeIDPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","format","unique"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientPatchBadRequestBodyAO2ErrorsValidationTypeIDPropEnum = append(clientPatchBadRequestBodyAO2ErrorsValidationTypeIDPropEnum, v)
	}
}

const (

	// ClientPatchBadRequestBodyAO2ErrorsValidationIDString captures enum value "string"
	ClientPatchBadRequestBodyAO2ErrorsValidationIDString string = "string"

	// ClientPatchBadRequestBodyAO2ErrorsValidationIDFormat captures enum value "format"
	ClientPatchBadRequestBodyAO2ErrorsValidationIDFormat string = "format"

	// ClientPatchBadRequestBodyAO2ErrorsValidationIDUnique captures enum value "unique"
	ClientPatchBadRequestBodyAO2ErrorsValidationIDUnique string = "unique"
)

// prop value enum
func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validateIDEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientPatchBadRequestBodyAO2ErrorsValidationTypeIDPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	// value enum
	if err := o.validateIDEnum("clientPatchBadRequest"+"."+"errors"+"."+"validation"+"."+"ID", "body", o.ID); err != nil {
		return err
	}

	return nil
}

var clientPatchBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientPatchBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum = append(clientPatchBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum, v)
	}
}

const (

	// ClientPatchBadRequestBodyAO2ErrorsValidationPasswordString captures enum value "string"
	ClientPatchBadRequestBodyAO2ErrorsValidationPasswordString string = "string"

	// ClientPatchBadRequestBodyAO2ErrorsValidationPasswordRequired captures enum value "required"
	ClientPatchBadRequestBodyAO2ErrorsValidationPasswordRequired string = "required"
)

// prop value enum
func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validatePasswordEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientPatchBadRequestBodyAO2ErrorsValidationTypePasswordPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(o.Password) { // not required
		return nil
	}

	// value enum
	if err := o.validatePasswordEnum("clientPatchBadRequest"+"."+"errors"+"."+"validation"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

var clientPatchBadRequestBodyAO2ErrorsValidationTypeTTLPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["int"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientPatchBadRequestBodyAO2ErrorsValidationTypeTTLPropEnum = append(clientPatchBadRequestBodyAO2ErrorsValidationTypeTTLPropEnum, v)
	}
}

const (

	// ClientPatchBadRequestBodyAO2ErrorsValidationTTLInt captures enum value "int"
	ClientPatchBadRequestBodyAO2ErrorsValidationTTLInt string = "int"
)

// prop value enum
func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validateTTLEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientPatchBadRequestBodyAO2ErrorsValidationTypeTTLPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validateTTL(formats strfmt.Registry) error {

	if swag.IsZero(o.TTL) { // not required
		return nil
	}

	// value enum
	if err := o.validateTTLEnum("clientPatchBadRequest"+"."+"errors"+"."+"validation"+"."+"ttl", "body", o.TTL); err != nil {
		return err
	}

	return nil
}

var clientPatchBadRequestBodyAO2ErrorsValidationTypeUsernamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientPatchBadRequestBodyAO2ErrorsValidationTypeUsernamePropEnum = append(clientPatchBadRequestBodyAO2ErrorsValidationTypeUsernamePropEnum, v)
	}
}

const (

	// ClientPatchBadRequestBodyAO2ErrorsValidationUsernameString captures enum value "string"
	ClientPatchBadRequestBodyAO2ErrorsValidationUsernameString string = "string"

	// ClientPatchBadRequestBodyAO2ErrorsValidationUsernameRequired captures enum value "required"
	ClientPatchBadRequestBodyAO2ErrorsValidationUsernameRequired string = "required"
)

// prop value enum
func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validateUsernameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clientPatchBadRequestBodyAO2ErrorsValidationTypeUsernamePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) validateUsername(formats strfmt.Registry) error {

	if swag.IsZero(o.Username) { // not required
		return nil
	}

	// value enum
	if err := o.validateUsernameEnum("clientPatchBadRequest"+"."+"errors"+"."+"validation"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res ClientPatchBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPatchBadRequestBodyAllOf1 client patch bad request body all of1
// swagger:model ClientPatchBadRequestBodyAllOf1
type ClientPatchBadRequestBodyAllOf1 interface{}

// ClientPatchBody client patch body
// swagger:model ClientPatchBody
type ClientPatchBody struct {
	models.ClientObject

	// Пароль клиента
	// Min Length: 1
	Password string `json:"password,omitempty"`

	// Время жизни клиента в секундах.
	TTL int64 `json:"ttl,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPatchBody) UnmarshalJSON(raw []byte) error {
	// ClientPatchParamsBodyAO0
	var clientPatchParamsBodyAO0 models.ClientObject
	if err := swag.ReadJSON(raw, &clientPatchParamsBodyAO0); err != nil {
		return err
	}
	o.ClientObject = clientPatchParamsBodyAO0

	// ClientPatchParamsBodyAO1
	var dataClientPatchParamsBodyAO1 struct {
		Password string `json:"password,omitempty"`

		TTL int64 `json:"ttl,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataClientPatchParamsBodyAO1); err != nil {
		return err
	}

	o.Password = dataClientPatchParamsBodyAO1.Password

	o.TTL = dataClientPatchParamsBodyAO1.TTL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPatchBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	clientPatchParamsBodyAO0, err := swag.WriteJSON(o.ClientObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPatchParamsBodyAO0)

	var dataClientPatchParamsBodyAO1 struct {
		Password string `json:"password,omitempty"`

		TTL int64 `json:"ttl,omitempty"`
	}

	dataClientPatchParamsBodyAO1.Password = o.Password

	dataClientPatchParamsBodyAO1.TTL = o.TTL

	jsonDataClientPatchParamsBodyAO1, errClientPatchParamsBodyAO1 := swag.WriteJSON(dataClientPatchParamsBodyAO1)
	if errClientPatchParamsBodyAO1 != nil {
		return nil, errClientPatchParamsBodyAO1
	}
	_parts = append(_parts, jsonDataClientPatchParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client patch body
func (o *ClientPatchBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ClientObject
	if err := o.ClientObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPatchBody) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(o.Password) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"password", "body", string(o.Password), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchBody) UnmarshalBinary(b []byte) error {
	var res ClientPatchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPatchInternalServerErrorBody client patch internal server error body
// swagger:model ClientPatchInternalServerErrorBody
type ClientPatchInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPatchInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ClientPatchInternalServerErrorBodyAO0
	var clientPatchInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &clientPatchInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = clientPatchInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPatchInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPatchInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPatchInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client patch internal server error body
func (o *ClientPatchInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ClientPatchInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPatchMethodNotAllowedBody client patch method not allowed body
// swagger:model ClientPatchMethodNotAllowedBody
type ClientPatchMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPatchMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ClientPatchMethodNotAllowedBodyAO0
	var clientPatchMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &clientPatchMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = clientPatchMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPatchMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPatchMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPatchMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client patch method not allowed body
func (o *ClientPatchMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ClientPatchMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPatchNotFoundBody client patch not found body
// swagger:model ClientPatchNotFoundBody
type ClientPatchNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPatchNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ClientPatchNotFoundBodyAO0
	var clientPatchNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &clientPatchNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = clientPatchNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPatchNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	clientPatchNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPatchNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client patch not found body
func (o *ClientPatchNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ClientPatchNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ClientPatchOKBody client patch o k body
// swagger:model ClientPatchOKBody
type ClientPatchOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ClientPatchOKBody) UnmarshalJSON(raw []byte) error {
	// ClientPatchOKBodyAO0
	var clientPatchOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &clientPatchOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = clientPatchOKBodyAO0

	// ClientPatchOKBodyAO1
	var dataClientPatchOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataClientPatchOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataClientPatchOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ClientPatchOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	clientPatchOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, clientPatchOKBodyAO0)

	var dataClientPatchOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataClientPatchOKBodyAO1.Data = o.Data

	jsonDataClientPatchOKBodyAO1, errClientPatchOKBodyAO1 := swag.WriteJSON(dataClientPatchOKBodyAO1)
	if errClientPatchOKBodyAO1 != nil {
		return nil, errClientPatchOKBodyAO1
	}
	_parts = append(_parts, jsonDataClientPatchOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this client patch o k body
func (o *ClientPatchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ClientPatchOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clientPatchOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ClientPatchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ClientPatchOKBody) UnmarshalBinary(b []byte) error {
	var res ClientPatchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
