// Code generated by go-swagger; DO NOT EDIT.

package clients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ClientPatchOKCode is the HTTP code returned for type ClientPatchOK
const ClientPatchOKCode int = 200

/*ClientPatchOK Коллекция клиентов

swagger:response clientPatchOK
*/
type ClientPatchOK struct {

	/*
	  In: Body
	*/
	Payload *ClientPatchOKBody `json:"body,omitempty"`
}

// NewClientPatchOK creates ClientPatchOK with default headers values
func NewClientPatchOK() *ClientPatchOK {

	return &ClientPatchOK{}
}

// WithPayload adds the payload to the client patch o k response
func (o *ClientPatchOK) WithPayload(payload *ClientPatchOKBody) *ClientPatchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client patch o k response
func (o *ClientPatchOK) SetPayload(payload *ClientPatchOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPatchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClientPatchBadRequestCode is the HTTP code returned for type ClientPatchBadRequest
const ClientPatchBadRequestCode int = 400

/*ClientPatchBadRequest Validation error

swagger:response clientPatchBadRequest
*/
type ClientPatchBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ClientPatchBadRequestBody `json:"body,omitempty"`
}

// NewClientPatchBadRequest creates ClientPatchBadRequest with default headers values
func NewClientPatchBadRequest() *ClientPatchBadRequest {

	return &ClientPatchBadRequest{}
}

// WithPayload adds the payload to the client patch bad request response
func (o *ClientPatchBadRequest) WithPayload(payload *ClientPatchBadRequestBody) *ClientPatchBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client patch bad request response
func (o *ClientPatchBadRequest) SetPayload(payload *ClientPatchBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPatchBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClientPatchNotFoundCode is the HTTP code returned for type ClientPatchNotFound
const ClientPatchNotFoundCode int = 404

/*ClientPatchNotFound Not found

swagger:response clientPatchNotFound
*/
type ClientPatchNotFound struct {

	/*
	  In: Body
	*/
	Payload *ClientPatchNotFoundBody `json:"body,omitempty"`
}

// NewClientPatchNotFound creates ClientPatchNotFound with default headers values
func NewClientPatchNotFound() *ClientPatchNotFound {

	return &ClientPatchNotFound{}
}

// WithPayload adds the payload to the client patch not found response
func (o *ClientPatchNotFound) WithPayload(payload *ClientPatchNotFoundBody) *ClientPatchNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client patch not found response
func (o *ClientPatchNotFound) SetPayload(payload *ClientPatchNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPatchNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClientPatchMethodNotAllowedCode is the HTTP code returned for type ClientPatchMethodNotAllowed
const ClientPatchMethodNotAllowedCode int = 405

/*ClientPatchMethodNotAllowed Invalid Method

swagger:response clientPatchMethodNotAllowed
*/
type ClientPatchMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *ClientPatchMethodNotAllowedBody `json:"body,omitempty"`
}

// NewClientPatchMethodNotAllowed creates ClientPatchMethodNotAllowed with default headers values
func NewClientPatchMethodNotAllowed() *ClientPatchMethodNotAllowed {

	return &ClientPatchMethodNotAllowed{}
}

// WithPayload adds the payload to the client patch method not allowed response
func (o *ClientPatchMethodNotAllowed) WithPayload(payload *ClientPatchMethodNotAllowedBody) *ClientPatchMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client patch method not allowed response
func (o *ClientPatchMethodNotAllowed) SetPayload(payload *ClientPatchMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPatchMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ClientPatchInternalServerErrorCode is the HTTP code returned for type ClientPatchInternalServerError
const ClientPatchInternalServerErrorCode int = 500

/*ClientPatchInternalServerError Internal sersver error

swagger:response clientPatchInternalServerError
*/
type ClientPatchInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ClientPatchInternalServerErrorBody `json:"body,omitempty"`
}

// NewClientPatchInternalServerError creates ClientPatchInternalServerError with default headers values
func NewClientPatchInternalServerError() *ClientPatchInternalServerError {

	return &ClientPatchInternalServerError{}
}

// WithPayload adds the payload to the client patch internal server error response
func (o *ClientPatchInternalServerError) WithPayload(payload *ClientPatchInternalServerErrorBody) *ClientPatchInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the client patch internal server error response
func (o *ClientPatchInternalServerError) SetPayload(payload *ClientPatchInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ClientPatchInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
