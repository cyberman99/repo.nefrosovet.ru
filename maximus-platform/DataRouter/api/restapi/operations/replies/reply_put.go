// Code generated by go-swagger; DO NOT EDIT.

package replies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ReplyPutHandlerFunc turns a function with the right signature into a reply put handler
type ReplyPutHandlerFunc func(ReplyPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplyPutHandlerFunc) Handle(params ReplyPutParams) middleware.Responder {
	return fn(params)
}

// ReplyPutHandler interface for that can handle valid reply put params
type ReplyPutHandler interface {
	Handle(ReplyPutParams) middleware.Responder
}

// NewReplyPut creates a new http.Handler for the reply put operation
func NewReplyPut(ctx *middleware.Context, handler ReplyPutHandler) *ReplyPut {
	return &ReplyPut{Context: ctx, Handler: handler}
}

/*ReplyPut swagger:route PUT /replies/{replyID} Replies replyPut

Изменение шаблона ответа

*/
type ReplyPut struct {
	Context *middleware.Context
	Handler ReplyPutHandler
}

func (o *ReplyPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplyPutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ReplyPutBadRequestBody reply put bad request body
// swagger:model ReplyPutBadRequestBody
type ReplyPutBadRequestBody struct {
	models.Error400Data

	ReplyPutBadRequestBodyAllOf1

	// errors
	Errors *ReplyPutBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyPutBadRequestBody) UnmarshalJSON(raw []byte) error {
	// ReplyPutBadRequestBodyAO0
	var replyPutBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &replyPutBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = replyPutBadRequestBodyAO0

	// ReplyPutBadRequestBodyAO1
	var replyPutBadRequestBodyAO1 ReplyPutBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &replyPutBadRequestBodyAO1); err != nil {
		return err
	}
	o.ReplyPutBadRequestBodyAllOf1 = replyPutBadRequestBodyAO1

	// ReplyPutBadRequestBodyAO2
	var dataReplyPutBadRequestBodyAO2 struct {
		Errors *ReplyPutBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataReplyPutBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataReplyPutBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyPutBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	replyPutBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyPutBadRequestBodyAO0)

	replyPutBadRequestBodyAO1, err := swag.WriteJSON(o.ReplyPutBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyPutBadRequestBodyAO1)

	var dataReplyPutBadRequestBodyAO2 struct {
		Errors *ReplyPutBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataReplyPutBadRequestBodyAO2.Errors = o.Errors

	jsonDataReplyPutBadRequestBodyAO2, errReplyPutBadRequestBodyAO2 := swag.WriteJSON(dataReplyPutBadRequestBodyAO2)
	if errReplyPutBadRequestBodyAO2 != nil {
		return nil, errReplyPutBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataReplyPutBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply put bad request body
func (o *ReplyPutBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ReplyPutBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplyPutBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyPutBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ReplyPutBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyPutBadRequestBodyAO2Errors reply put bad request body a o2 errors
// swagger:model ReplyPutBadRequestBodyAO2Errors
type ReplyPutBadRequestBodyAO2Errors struct {

	// validation
	Validation *ReplyPutBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this reply put bad request body a o2 errors
func (o *ReplyPutBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplyPutBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyPutBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res ReplyPutBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyPutBadRequestBodyAO2ErrorsValidation reply put bad request body a o2 errors validation
// swagger:model ReplyPutBadRequestBodyAO2ErrorsValidation
type ReplyPutBadRequestBodyAO2ErrorsValidation struct {

	// description
	// Enum: [string]
	Description string `json:"description,omitempty"`

	// regex
	// Enum: [string required]
	Regex string `json:"regex,omitempty"`

	// replace
	// Enum: [string required]
	Replace string `json:"replace,omitempty"`
}

// Validate validates this reply put bad request body a o2 errors validation
func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var replyPutBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replyPutBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum = append(replyPutBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum, v)
	}
}

const (

	// ReplyPutBadRequestBodyAO2ErrorsValidationDescriptionString captures enum value "string"
	ReplyPutBadRequestBodyAO2ErrorsValidationDescriptionString string = "string"
)

// prop value enum
func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) validateDescriptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replyPutBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	// value enum
	if err := o.validateDescriptionEnum("replyPutBadRequest"+"."+"errors"+"."+"validation"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

var replyPutBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replyPutBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum = append(replyPutBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum, v)
	}
}

const (

	// ReplyPutBadRequestBodyAO2ErrorsValidationRegexString captures enum value "string"
	ReplyPutBadRequestBodyAO2ErrorsValidationRegexString string = "string"

	// ReplyPutBadRequestBodyAO2ErrorsValidationRegexRequired captures enum value "required"
	ReplyPutBadRequestBodyAO2ErrorsValidationRegexRequired string = "required"
)

// prop value enum
func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) validateRegexEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replyPutBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) validateRegex(formats strfmt.Registry) error {

	if swag.IsZero(o.Regex) { // not required
		return nil
	}

	// value enum
	if err := o.validateRegexEnum("replyPutBadRequest"+"."+"errors"+"."+"validation"+"."+"regex", "body", o.Regex); err != nil {
		return err
	}

	return nil
}

var replyPutBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replyPutBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum = append(replyPutBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum, v)
	}
}

const (

	// ReplyPutBadRequestBodyAO2ErrorsValidationReplaceString captures enum value "string"
	ReplyPutBadRequestBodyAO2ErrorsValidationReplaceString string = "string"

	// ReplyPutBadRequestBodyAO2ErrorsValidationReplaceRequired captures enum value "required"
	ReplyPutBadRequestBodyAO2ErrorsValidationReplaceRequired string = "required"
)

// prop value enum
func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) validateReplaceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replyPutBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) validateReplace(formats strfmt.Registry) error {

	if swag.IsZero(o.Replace) { // not required
		return nil
	}

	// value enum
	if err := o.validateReplaceEnum("replyPutBadRequest"+"."+"errors"+"."+"validation"+"."+"replace", "body", o.Replace); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res ReplyPutBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyPutBadRequestBodyAllOf1 reply put bad request body all of1
// swagger:model ReplyPutBadRequestBodyAllOf1
type ReplyPutBadRequestBodyAllOf1 interface{}

// ReplyPutBody reply put body
// swagger:model ReplyPutBody
type ReplyPutBody struct {
	models.ReplyObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyPutBody) UnmarshalJSON(raw []byte) error {
	// ReplyPutParamsBodyAO0
	var replyPutParamsBodyAO0 models.ReplyObject
	if err := swag.ReadJSON(raw, &replyPutParamsBodyAO0); err != nil {
		return err
	}
	o.ReplyObject = replyPutParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyPutBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyPutParamsBodyAO0, err := swag.WriteJSON(o.ReplyObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyPutParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply put body
func (o *ReplyPutBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ReplyObject
	if err := o.ReplyObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutBody) UnmarshalBinary(b []byte) error {
	var res ReplyPutBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyPutInternalServerErrorBody reply put internal server error body
// swagger:model ReplyPutInternalServerErrorBody
type ReplyPutInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyPutInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ReplyPutInternalServerErrorBodyAO0
	var replyPutInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &replyPutInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = replyPutInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyPutInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyPutInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyPutInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply put internal server error body
func (o *ReplyPutInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ReplyPutInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyPutMethodNotAllowedBody reply put method not allowed body
// swagger:model ReplyPutMethodNotAllowedBody
type ReplyPutMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyPutMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ReplyPutMethodNotAllowedBodyAO0
	var replyPutMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &replyPutMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = replyPutMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyPutMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyPutMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyPutMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply put method not allowed body
func (o *ReplyPutMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ReplyPutMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyPutNotFoundBody reply put not found body
// swagger:model ReplyPutNotFoundBody
type ReplyPutNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyPutNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ReplyPutNotFoundBodyAO0
	var replyPutNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &replyPutNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = replyPutNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyPutNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyPutNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyPutNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply put not found body
func (o *ReplyPutNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ReplyPutNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyPutOKBody reply put o k body
// swagger:model ReplyPutOKBody
type ReplyPutOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyPutOKBody) UnmarshalJSON(raw []byte) error {
	// ReplyPutOKBodyAO0
	var replyPutOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &replyPutOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = replyPutOKBodyAO0

	// ReplyPutOKBodyAO1
	var dataReplyPutOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataReplyPutOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataReplyPutOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyPutOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	replyPutOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyPutOKBodyAO0)

	var dataReplyPutOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataReplyPutOKBodyAO1.Data = o.Data

	jsonDataReplyPutOKBodyAO1, errReplyPutOKBodyAO1 := swag.WriteJSON(dataReplyPutOKBodyAO1)
	if errReplyPutOKBodyAO1 != nil {
		return nil, errReplyPutOKBodyAO1
	}
	_parts = append(_parts, jsonDataReplyPutOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply put o k body
func (o *ReplyPutOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplyPutOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replyPutOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyPutOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyPutOKBody) UnmarshalBinary(b []byte) error {
	var res ReplyPutOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
