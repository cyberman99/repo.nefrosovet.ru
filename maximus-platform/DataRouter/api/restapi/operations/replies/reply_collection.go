// Code generated by go-swagger; DO NOT EDIT.

package replies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ReplyCollectionHandlerFunc turns a function with the right signature into a reply collection handler
type ReplyCollectionHandlerFunc func(ReplyCollectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplyCollectionHandlerFunc) Handle(params ReplyCollectionParams) middleware.Responder {
	return fn(params)
}

// ReplyCollectionHandler interface for that can handle valid reply collection params
type ReplyCollectionHandler interface {
	Handle(ReplyCollectionParams) middleware.Responder
}

// NewReplyCollection creates a new http.Handler for the reply collection operation
func NewReplyCollection(ctx *middleware.Context, handler ReplyCollectionHandler) *ReplyCollection {
	return &ReplyCollection{Context: ctx, Handler: handler}
}

/*ReplyCollection swagger:route GET /replies Replies replyCollection

Коллекция шаблонов ответов

*/
type ReplyCollection struct {
	Context *middleware.Context
	Handler ReplyCollectionHandler
}

func (o *ReplyCollection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplyCollectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Идентификатор шаблона ответа
	ID string `json:"ID,omitempty"`

	// Дата-время создания реплая
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	models.ReplyObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Created = dataAO0.Created

	// AO1
	var aO1 models.ReplyObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ReplyObject = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Created strfmt.DateTime `json:"created,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.Created = o.Created

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.ReplyObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with models.ReplyObject
	if err := o.ReplyObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCollectionInternalServerErrorBody reply collection internal server error body
// swagger:model ReplyCollectionInternalServerErrorBody
type ReplyCollectionInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCollectionInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ReplyCollectionInternalServerErrorBodyAO0
	var replyCollectionInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &replyCollectionInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = replyCollectionInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCollectionInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyCollectionInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCollectionInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply collection internal server error body
func (o *ReplyCollectionInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCollectionInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCollectionInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ReplyCollectionInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCollectionMethodNotAllowedBody reply collection method not allowed body
// swagger:model ReplyCollectionMethodNotAllowedBody
type ReplyCollectionMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCollectionMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ReplyCollectionMethodNotAllowedBodyAO0
	var replyCollectionMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &replyCollectionMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = replyCollectionMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCollectionMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyCollectionMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCollectionMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply collection method not allowed body
func (o *ReplyCollectionMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCollectionMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCollectionMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ReplyCollectionMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCollectionNotFoundBody reply collection not found body
// swagger:model ReplyCollectionNotFoundBody
type ReplyCollectionNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCollectionNotFoundBody) UnmarshalJSON(raw []byte) error {
	// ReplyCollectionNotFoundBodyAO0
	var replyCollectionNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &replyCollectionNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = replyCollectionNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCollectionNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyCollectionNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCollectionNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply collection not found body
func (o *ReplyCollectionNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCollectionNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCollectionNotFoundBody) UnmarshalBinary(b []byte) error {
	var res ReplyCollectionNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCollectionOKBody reply collection o k body
// swagger:model ReplyCollectionOKBody
type ReplyCollectionOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCollectionOKBody) UnmarshalJSON(raw []byte) error {
	// ReplyCollectionOKBodyAO0
	var replyCollectionOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &replyCollectionOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = replyCollectionOKBodyAO0

	// ReplyCollectionOKBodyAO1
	var dataReplyCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataReplyCollectionOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataReplyCollectionOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCollectionOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	replyCollectionOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCollectionOKBodyAO0)

	var dataReplyCollectionOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataReplyCollectionOKBodyAO1.Data = o.Data

	jsonDataReplyCollectionOKBodyAO1, errReplyCollectionOKBodyAO1 := swag.WriteJSON(dataReplyCollectionOKBodyAO1)
	if errReplyCollectionOKBodyAO1 != nil {
		return nil, errReplyCollectionOKBodyAO1
	}
	_parts = append(_parts, jsonDataReplyCollectionOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply collection o k body
func (o *ReplyCollectionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplyCollectionOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replyCollectionOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCollectionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCollectionOKBody) UnmarshalBinary(b []byte) error {
	var res ReplyCollectionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
