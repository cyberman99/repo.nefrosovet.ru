// Code generated by go-swagger; DO NOT EDIT.

package replies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ReplyPutOKCode is the HTTP code returned for type ReplyPutOK
const ReplyPutOKCode int = 200

/*ReplyPutOK Коллекция шаблонов ответов

swagger:response replyPutOK
*/
type ReplyPutOK struct {

	/*
	  In: Body
	*/
	Payload *ReplyPutOKBody `json:"body,omitempty"`
}

// NewReplyPutOK creates ReplyPutOK with default headers values
func NewReplyPutOK() *ReplyPutOK {

	return &ReplyPutOK{}
}

// WithPayload adds the payload to the reply put o k response
func (o *ReplyPutOK) WithPayload(payload *ReplyPutOKBody) *ReplyPutOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply put o k response
func (o *ReplyPutOK) SetPayload(payload *ReplyPutOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyPutOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyPutBadRequestCode is the HTTP code returned for type ReplyPutBadRequest
const ReplyPutBadRequestCode int = 400

/*ReplyPutBadRequest Validation error

swagger:response replyPutBadRequest
*/
type ReplyPutBadRequest struct {

	/*
	  In: Body
	*/
	Payload *ReplyPutBadRequestBody `json:"body,omitempty"`
}

// NewReplyPutBadRequest creates ReplyPutBadRequest with default headers values
func NewReplyPutBadRequest() *ReplyPutBadRequest {

	return &ReplyPutBadRequest{}
}

// WithPayload adds the payload to the reply put bad request response
func (o *ReplyPutBadRequest) WithPayload(payload *ReplyPutBadRequestBody) *ReplyPutBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply put bad request response
func (o *ReplyPutBadRequest) SetPayload(payload *ReplyPutBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyPutBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyPutNotFoundCode is the HTTP code returned for type ReplyPutNotFound
const ReplyPutNotFoundCode int = 404

/*ReplyPutNotFound Not found

swagger:response replyPutNotFound
*/
type ReplyPutNotFound struct {

	/*
	  In: Body
	*/
	Payload *ReplyPutNotFoundBody `json:"body,omitempty"`
}

// NewReplyPutNotFound creates ReplyPutNotFound with default headers values
func NewReplyPutNotFound() *ReplyPutNotFound {

	return &ReplyPutNotFound{}
}

// WithPayload adds the payload to the reply put not found response
func (o *ReplyPutNotFound) WithPayload(payload *ReplyPutNotFoundBody) *ReplyPutNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply put not found response
func (o *ReplyPutNotFound) SetPayload(payload *ReplyPutNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyPutNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyPutMethodNotAllowedCode is the HTTP code returned for type ReplyPutMethodNotAllowed
const ReplyPutMethodNotAllowedCode int = 405

/*ReplyPutMethodNotAllowed Invalid Method

swagger:response replyPutMethodNotAllowed
*/
type ReplyPutMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *ReplyPutMethodNotAllowedBody `json:"body,omitempty"`
}

// NewReplyPutMethodNotAllowed creates ReplyPutMethodNotAllowed with default headers values
func NewReplyPutMethodNotAllowed() *ReplyPutMethodNotAllowed {

	return &ReplyPutMethodNotAllowed{}
}

// WithPayload adds the payload to the reply put method not allowed response
func (o *ReplyPutMethodNotAllowed) WithPayload(payload *ReplyPutMethodNotAllowedBody) *ReplyPutMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply put method not allowed response
func (o *ReplyPutMethodNotAllowed) SetPayload(payload *ReplyPutMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyPutMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyPutInternalServerErrorCode is the HTTP code returned for type ReplyPutInternalServerError
const ReplyPutInternalServerErrorCode int = 500

/*ReplyPutInternalServerError Internal sersver error

swagger:response replyPutInternalServerError
*/
type ReplyPutInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ReplyPutInternalServerErrorBody `json:"body,omitempty"`
}

// NewReplyPutInternalServerError creates ReplyPutInternalServerError with default headers values
func NewReplyPutInternalServerError() *ReplyPutInternalServerError {

	return &ReplyPutInternalServerError{}
}

// WithPayload adds the payload to the reply put internal server error response
func (o *ReplyPutInternalServerError) WithPayload(payload *ReplyPutInternalServerErrorBody) *ReplyPutInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply put internal server error response
func (o *ReplyPutInternalServerError) SetPayload(payload *ReplyPutInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyPutInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
