// Code generated by go-swagger; DO NOT EDIT.

package replies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ReplyCollectionOKCode is the HTTP code returned for type ReplyCollectionOK
const ReplyCollectionOKCode int = 200

/*ReplyCollectionOK Коллекция шаблонов ответов

swagger:response replyCollectionOK
*/
type ReplyCollectionOK struct {

	/*
	  In: Body
	*/
	Payload *ReplyCollectionOKBody `json:"body,omitempty"`
}

// NewReplyCollectionOK creates ReplyCollectionOK with default headers values
func NewReplyCollectionOK() *ReplyCollectionOK {

	return &ReplyCollectionOK{}
}

// WithPayload adds the payload to the reply collection o k response
func (o *ReplyCollectionOK) WithPayload(payload *ReplyCollectionOKBody) *ReplyCollectionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply collection o k response
func (o *ReplyCollectionOK) SetPayload(payload *ReplyCollectionOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyCollectionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyCollectionNotFoundCode is the HTTP code returned for type ReplyCollectionNotFound
const ReplyCollectionNotFoundCode int = 404

/*ReplyCollectionNotFound Not found

swagger:response replyCollectionNotFound
*/
type ReplyCollectionNotFound struct {

	/*
	  In: Body
	*/
	Payload *ReplyCollectionNotFoundBody `json:"body,omitempty"`
}

// NewReplyCollectionNotFound creates ReplyCollectionNotFound with default headers values
func NewReplyCollectionNotFound() *ReplyCollectionNotFound {

	return &ReplyCollectionNotFound{}
}

// WithPayload adds the payload to the reply collection not found response
func (o *ReplyCollectionNotFound) WithPayload(payload *ReplyCollectionNotFoundBody) *ReplyCollectionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply collection not found response
func (o *ReplyCollectionNotFound) SetPayload(payload *ReplyCollectionNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyCollectionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyCollectionMethodNotAllowedCode is the HTTP code returned for type ReplyCollectionMethodNotAllowed
const ReplyCollectionMethodNotAllowedCode int = 405

/*ReplyCollectionMethodNotAllowed Invalid Method

swagger:response replyCollectionMethodNotAllowed
*/
type ReplyCollectionMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *ReplyCollectionMethodNotAllowedBody `json:"body,omitempty"`
}

// NewReplyCollectionMethodNotAllowed creates ReplyCollectionMethodNotAllowed with default headers values
func NewReplyCollectionMethodNotAllowed() *ReplyCollectionMethodNotAllowed {

	return &ReplyCollectionMethodNotAllowed{}
}

// WithPayload adds the payload to the reply collection method not allowed response
func (o *ReplyCollectionMethodNotAllowed) WithPayload(payload *ReplyCollectionMethodNotAllowedBody) *ReplyCollectionMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply collection method not allowed response
func (o *ReplyCollectionMethodNotAllowed) SetPayload(payload *ReplyCollectionMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyCollectionMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyCollectionInternalServerErrorCode is the HTTP code returned for type ReplyCollectionInternalServerError
const ReplyCollectionInternalServerErrorCode int = 500

/*ReplyCollectionInternalServerError Internal sersver error

swagger:response replyCollectionInternalServerError
*/
type ReplyCollectionInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ReplyCollectionInternalServerErrorBody `json:"body,omitempty"`
}

// NewReplyCollectionInternalServerError creates ReplyCollectionInternalServerError with default headers values
func NewReplyCollectionInternalServerError() *ReplyCollectionInternalServerError {

	return &ReplyCollectionInternalServerError{}
}

// WithPayload adds the payload to the reply collection internal server error response
func (o *ReplyCollectionInternalServerError) WithPayload(payload *ReplyCollectionInternalServerErrorBody) *ReplyCollectionInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply collection internal server error response
func (o *ReplyCollectionInternalServerError) SetPayload(payload *ReplyCollectionInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyCollectionInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
