// Code generated by go-swagger; DO NOT EDIT.

package replies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// ReplyViewOKCode is the HTTP code returned for type ReplyViewOK
const ReplyViewOKCode int = 200

/*ReplyViewOK Коллекция шаблонов ответов

swagger:response replyViewOK
*/
type ReplyViewOK struct {

	/*
	  In: Body
	*/
	Payload *ReplyViewOKBody `json:"body,omitempty"`
}

// NewReplyViewOK creates ReplyViewOK with default headers values
func NewReplyViewOK() *ReplyViewOK {

	return &ReplyViewOK{}
}

// WithPayload adds the payload to the reply view o k response
func (o *ReplyViewOK) WithPayload(payload *ReplyViewOKBody) *ReplyViewOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply view o k response
func (o *ReplyViewOK) SetPayload(payload *ReplyViewOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyViewOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyViewNotFoundCode is the HTTP code returned for type ReplyViewNotFound
const ReplyViewNotFoundCode int = 404

/*ReplyViewNotFound Not found

swagger:response replyViewNotFound
*/
type ReplyViewNotFound struct {

	/*
	  In: Body
	*/
	Payload *ReplyViewNotFoundBody `json:"body,omitempty"`
}

// NewReplyViewNotFound creates ReplyViewNotFound with default headers values
func NewReplyViewNotFound() *ReplyViewNotFound {

	return &ReplyViewNotFound{}
}

// WithPayload adds the payload to the reply view not found response
func (o *ReplyViewNotFound) WithPayload(payload *ReplyViewNotFoundBody) *ReplyViewNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply view not found response
func (o *ReplyViewNotFound) SetPayload(payload *ReplyViewNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyViewNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyViewMethodNotAllowedCode is the HTTP code returned for type ReplyViewMethodNotAllowed
const ReplyViewMethodNotAllowedCode int = 405

/*ReplyViewMethodNotAllowed Invalid Method

swagger:response replyViewMethodNotAllowed
*/
type ReplyViewMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *ReplyViewMethodNotAllowedBody `json:"body,omitempty"`
}

// NewReplyViewMethodNotAllowed creates ReplyViewMethodNotAllowed with default headers values
func NewReplyViewMethodNotAllowed() *ReplyViewMethodNotAllowed {

	return &ReplyViewMethodNotAllowed{}
}

// WithPayload adds the payload to the reply view method not allowed response
func (o *ReplyViewMethodNotAllowed) WithPayload(payload *ReplyViewMethodNotAllowedBody) *ReplyViewMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply view method not allowed response
func (o *ReplyViewMethodNotAllowed) SetPayload(payload *ReplyViewMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyViewMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ReplyViewInternalServerErrorCode is the HTTP code returned for type ReplyViewInternalServerError
const ReplyViewInternalServerErrorCode int = 500

/*ReplyViewInternalServerError Internal sersver error

swagger:response replyViewInternalServerError
*/
type ReplyViewInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *ReplyViewInternalServerErrorBody `json:"body,omitempty"`
}

// NewReplyViewInternalServerError creates ReplyViewInternalServerError with default headers values
func NewReplyViewInternalServerError() *ReplyViewInternalServerError {

	return &ReplyViewInternalServerError{}
}

// WithPayload adds the payload to the reply view internal server error response
func (o *ReplyViewInternalServerError) WithPayload(payload *ReplyViewInternalServerErrorBody) *ReplyViewInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the reply view internal server error response
func (o *ReplyViewInternalServerError) SetPayload(payload *ReplyViewInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ReplyViewInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
