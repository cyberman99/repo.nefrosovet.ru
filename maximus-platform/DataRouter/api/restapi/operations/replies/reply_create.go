// Code generated by go-swagger; DO NOT EDIT.

package replies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/DataRouter/api/models"
)

// ReplyCreateHandlerFunc turns a function with the right signature into a reply create handler
type ReplyCreateHandlerFunc func(ReplyCreateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReplyCreateHandlerFunc) Handle(params ReplyCreateParams) middleware.Responder {
	return fn(params)
}

// ReplyCreateHandler interface for that can handle valid reply create params
type ReplyCreateHandler interface {
	Handle(ReplyCreateParams) middleware.Responder
}

// NewReplyCreate creates a new http.Handler for the reply create operation
func NewReplyCreate(ctx *middleware.Context, handler ReplyCreateHandler) *ReplyCreate {
	return &ReplyCreate{Context: ctx, Handler: handler}
}

/*ReplyCreate swagger:route POST /replies Replies replyCreate

Создание шаблона ответа

*/
type ReplyCreate struct {
	Context *middleware.Context
	Handler ReplyCreateHandler
}

func (o *ReplyCreate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewReplyCreateParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ReplyCreateBadRequestBody reply create bad request body
// swagger:model ReplyCreateBadRequestBody
type ReplyCreateBadRequestBody struct {
	models.Error400Data

	ReplyCreateBadRequestBodyAllOf1

	// errors
	Errors *ReplyCreateBadRequestBodyAO2Errors `json:"errors,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCreateBadRequestBody) UnmarshalJSON(raw []byte) error {
	// ReplyCreateBadRequestBodyAO0
	var replyCreateBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &replyCreateBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = replyCreateBadRequestBodyAO0

	// ReplyCreateBadRequestBodyAO1
	var replyCreateBadRequestBodyAO1 ReplyCreateBadRequestBodyAllOf1
	if err := swag.ReadJSON(raw, &replyCreateBadRequestBodyAO1); err != nil {
		return err
	}
	o.ReplyCreateBadRequestBodyAllOf1 = replyCreateBadRequestBodyAO1

	// ReplyCreateBadRequestBodyAO2
	var dataReplyCreateBadRequestBodyAO2 struct {
		Errors *ReplyCreateBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataReplyCreateBadRequestBodyAO2); err != nil {
		return err
	}

	o.Errors = dataReplyCreateBadRequestBodyAO2.Errors

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCreateBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	replyCreateBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCreateBadRequestBodyAO0)

	replyCreateBadRequestBodyAO1, err := swag.WriteJSON(o.ReplyCreateBadRequestBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCreateBadRequestBodyAO1)

	var dataReplyCreateBadRequestBodyAO2 struct {
		Errors *ReplyCreateBadRequestBodyAO2Errors `json:"errors,omitempty"`
	}

	dataReplyCreateBadRequestBodyAO2.Errors = o.Errors

	jsonDataReplyCreateBadRequestBodyAO2, errReplyCreateBadRequestBodyAO2 := swag.WriteJSON(dataReplyCreateBadRequestBodyAO2)
	if errReplyCreateBadRequestBodyAO2 != nil {
		return nil, errReplyCreateBadRequestBodyAO2
	}
	_parts = append(_parts, jsonDataReplyCreateBadRequestBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply create bad request body
func (o *ReplyCreateBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ReplyCreateBadRequestBodyAllOf1

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplyCreateBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyCreateBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCreateBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCreateBadRequestBody) UnmarshalBinary(b []byte) error {
	var res ReplyCreateBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCreateBadRequestBodyAO2Errors reply create bad request body a o2 errors
// swagger:model ReplyCreateBadRequestBodyAO2Errors
type ReplyCreateBadRequestBodyAO2Errors struct {

	// validation
	Validation *ReplyCreateBadRequestBodyAO2ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this reply create bad request body a o2 errors
func (o *ReplyCreateBadRequestBodyAO2Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplyCreateBadRequestBodyAO2Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("replyCreateBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCreateBadRequestBodyAO2Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCreateBadRequestBodyAO2Errors) UnmarshalBinary(b []byte) error {
	var res ReplyCreateBadRequestBodyAO2Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCreateBadRequestBodyAO2ErrorsValidation reply create bad request body a o2 errors validation
// swagger:model ReplyCreateBadRequestBodyAO2ErrorsValidation
type ReplyCreateBadRequestBodyAO2ErrorsValidation struct {

	// description
	// Enum: [string]
	Description string `json:"description,omitempty"`

	// regex
	// Enum: [string required]
	Regex string `json:"regex,omitempty"`

	// replace
	// Enum: [string required]
	Replace string `json:"replace,omitempty"`
}

// Validate validates this reply create bad request body a o2 errors validation
func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReplace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var replyCreateBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replyCreateBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum = append(replyCreateBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum, v)
	}
}

const (

	// ReplyCreateBadRequestBodyAO2ErrorsValidationDescriptionString captures enum value "string"
	ReplyCreateBadRequestBodyAO2ErrorsValidationDescriptionString string = "string"
)

// prop value enum
func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) validateDescriptionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replyCreateBadRequestBodyAO2ErrorsValidationTypeDescriptionPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	// value enum
	if err := o.validateDescriptionEnum("replyCreateBadRequest"+"."+"errors"+"."+"validation"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

var replyCreateBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replyCreateBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum = append(replyCreateBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum, v)
	}
}

const (

	// ReplyCreateBadRequestBodyAO2ErrorsValidationRegexString captures enum value "string"
	ReplyCreateBadRequestBodyAO2ErrorsValidationRegexString string = "string"

	// ReplyCreateBadRequestBodyAO2ErrorsValidationRegexRequired captures enum value "required"
	ReplyCreateBadRequestBodyAO2ErrorsValidationRegexRequired string = "required"
)

// prop value enum
func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) validateRegexEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replyCreateBadRequestBodyAO2ErrorsValidationTypeRegexPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) validateRegex(formats strfmt.Registry) error {

	if swag.IsZero(o.Regex) { // not required
		return nil
	}

	// value enum
	if err := o.validateRegexEnum("replyCreateBadRequest"+"."+"errors"+"."+"validation"+"."+"regex", "body", o.Regex); err != nil {
		return err
	}

	return nil
}

var replyCreateBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["string","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		replyCreateBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum = append(replyCreateBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum, v)
	}
}

const (

	// ReplyCreateBadRequestBodyAO2ErrorsValidationReplaceString captures enum value "string"
	ReplyCreateBadRequestBodyAO2ErrorsValidationReplaceString string = "string"

	// ReplyCreateBadRequestBodyAO2ErrorsValidationReplaceRequired captures enum value "required"
	ReplyCreateBadRequestBodyAO2ErrorsValidationReplaceRequired string = "required"
)

// prop value enum
func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) validateReplaceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, replyCreateBadRequestBodyAO2ErrorsValidationTypeReplacePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) validateReplace(formats strfmt.Registry) error {

	if swag.IsZero(o.Replace) { // not required
		return nil
	}

	// value enum
	if err := o.validateReplaceEnum("replyCreateBadRequest"+"."+"errors"+"."+"validation"+"."+"replace", "body", o.Replace); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCreateBadRequestBodyAO2ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res ReplyCreateBadRequestBodyAO2ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCreateBadRequestBodyAllOf1 reply create bad request body all of1
// swagger:model ReplyCreateBadRequestBodyAllOf1
type ReplyCreateBadRequestBodyAllOf1 interface{}

// ReplyCreateBody reply create body
// swagger:model ReplyCreateBody
type ReplyCreateBody struct {
	models.ReplyObject

	ReplyCreateParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCreateBody) UnmarshalJSON(raw []byte) error {
	// ReplyCreateParamsBodyAO0
	var replyCreateParamsBodyAO0 models.ReplyObject
	if err := swag.ReadJSON(raw, &replyCreateParamsBodyAO0); err != nil {
		return err
	}
	o.ReplyObject = replyCreateParamsBodyAO0

	// ReplyCreateParamsBodyAO1
	var replyCreateParamsBodyAO1 ReplyCreateParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &replyCreateParamsBodyAO1); err != nil {
		return err
	}
	o.ReplyCreateParamsBodyAllOf1 = replyCreateParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCreateBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	replyCreateParamsBodyAO0, err := swag.WriteJSON(o.ReplyObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCreateParamsBodyAO0)

	replyCreateParamsBodyAO1, err := swag.WriteJSON(o.ReplyCreateParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCreateParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply create body
func (o *ReplyCreateBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ReplyObject
	if err := o.ReplyObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ReplyCreateParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCreateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCreateBody) UnmarshalBinary(b []byte) error {
	var res ReplyCreateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCreateInternalServerErrorBody reply create internal server error body
// swagger:model ReplyCreateInternalServerErrorBody
type ReplyCreateInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCreateInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// ReplyCreateInternalServerErrorBodyAO0
	var replyCreateInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &replyCreateInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = replyCreateInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCreateInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyCreateInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCreateInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply create internal server error body
func (o *ReplyCreateInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCreateInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCreateInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ReplyCreateInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCreateMethodNotAllowedBody reply create method not allowed body
// swagger:model ReplyCreateMethodNotAllowedBody
type ReplyCreateMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCreateMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// ReplyCreateMethodNotAllowedBodyAO0
	var replyCreateMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &replyCreateMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = replyCreateMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCreateMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	replyCreateMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCreateMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply create method not allowed body
func (o *ReplyCreateMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCreateMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCreateMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res ReplyCreateMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCreateOKBody reply create o k body
// swagger:model ReplyCreateOKBody
type ReplyCreateOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *ReplyCreateOKBody) UnmarshalJSON(raw []byte) error {
	// ReplyCreateOKBodyAO0
	var replyCreateOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &replyCreateOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = replyCreateOKBodyAO0

	// ReplyCreateOKBodyAO1
	var dataReplyCreateOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataReplyCreateOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataReplyCreateOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o ReplyCreateOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	replyCreateOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, replyCreateOKBodyAO0)

	var dataReplyCreateOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataReplyCreateOKBodyAO1.Data = o.Data

	jsonDataReplyCreateOKBodyAO1, errReplyCreateOKBodyAO1 := swag.WriteJSON(dataReplyCreateOKBodyAO1)
	if errReplyCreateOKBodyAO1 != nil {
		return nil, errReplyCreateOKBodyAO1
	}
	_parts = append(_parts, jsonDataReplyCreateOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this reply create o k body
func (o *ReplyCreateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ReplyCreateOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replyCreateOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ReplyCreateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ReplyCreateOKBody) UnmarshalBinary(b []byte) error {
	var res ReplyCreateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// ReplyCreateParamsBodyAllOf1 reply create params body all of1
// swagger:model ReplyCreateParamsBodyAllOf1
type ReplyCreateParamsBodyAllOf1 interface{}
