// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// AuthParams defines model for Auth_params.
type AuthParams struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// Base defines model for Base.
type Base struct {
	Version string `json:"version"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Data interface{} `json:"data"`
}

// Error400 defines model for Error_400.
type Error400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error401 defines model for Error_401.
type Error401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error404 defines model for Error_404.
type Error404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// Error405 defines model for Error_405.
type Error405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  *[]interface{} `json:"errors,omitempty"`
	Message *string        `json:"message,omitempty"`
}

// Error500 defines model for Error_500.
type Error500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error)
	Error
	// Embedded fields due to inline allOf schema
	Errors  interface{} `json:"errors"`
	Message string      `json:"message"`
}

// PasswordParams defines model for Password_params.
type PasswordParams struct {
	Password *string `json:"password,omitempty"`
}

// SettingsParams defines model for Settings_params.
type SettingsParams struct {
	N2FAChannelType *string `json:"2FAChannelType,omitempty"`
	Locale          *string `json:"locale,omitempty"`
}

// Success defines model for Success.
type Success struct {
	// Embedded struct due to allOf(#/components/schemas/Base)
	Base
	// Embedded fields due to inline allOf schema
	Errors  []interface{} `json:"errors"`
	Message string        `json:"message"`
}

// UserContact defines model for User_contact.
type UserContact struct {
	TypeCODE *string `json:"typeCODE,omitempty"`
	Value    *string `json:"value,omitempty"`
	Verified *bool   `json:"verified,omitempty"`
}

// UserContactWithId defines model for User_contact_with_id.
type UserContactWithId struct {
	// Embedded fields due to inline allOf schema
	ID *string `json:"ID,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/User_contact)
	UserContact
	// Embedded fields due to inline allOf schema
}

// UserParams defines model for User_params.
type UserParams struct {
	Contacts   *[]UserContact `json:"contacts,omitempty"`
	FirstName  *string        `json:"firstName,omitempty"`
	LastName   *string        `json:"lastName,omitempty"`
	MiddleName *string        `json:"middleName,omitempty"`
}

// UserParamsWithId defines model for User_params_with_id.
type UserParamsWithId struct {
	// Embedded fields due to inline allOf schema
	ID *string `json:"ID,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/User_params)
	UserParams
	// Embedded fields due to inline allOf schema
}

// ContactID defines model for contactID.
type ContactID string

// UserID defines model for userID.
type UserID string

// Authorize200 defines model for Authorize_200.
type Authorize200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]struct {
		// Embedded fields due to inline allOf schema
		UserID string `json:"userID"`
	} `json:"data,omitempty"`
}

// Authorize400 defines model for Authorize_400.
type Authorize400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			Login    *string `json:"login,omitempty"`
			Password *string `json:"password,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// Base200 defines model for Base_200.
type Base200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data []interface{} `json:"data"`
}

// Base400 defines model for Base_400.
type Base400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	Errors struct {
		Core       *string                 `json:"core,omitempty"`
		Json       *string                 `json:"json,omitempty"`
		Validation *map[string]interface{} `json:"validation,omitempty"`
	} `json:"errors"`
	Message string `json:"message"`
}

// Base401 defines model for Base_401.
type Base401 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_401)
	Error401
}

// Base404 defines model for Base_404.
type Base404 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_404)
	Error404
}

// Base405 defines model for Base_405.
type Base405 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_405)
	Error405
}

// Base500 defines model for Base_500.
type Base500 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_500)
	Error500
}

// User200 defines model for User_200.
type User200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]UserParamsWithId `json:"data,omitempty"`
}

// User400 defines model for User_400.
type User400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			FirstName  *string `json:"firstName,omitempty"`
			LastName   *string `json:"lastName,omitempty"`
			MiddleName *string `json:"middleName,omitempty"`
			Password   *string `json:"password,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// UserContacts200 defines model for User_contacts_200.
type UserContacts200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]UserContactWithId `json:"data,omitempty"`
}

// UserContacts400 defines model for User_contacts_400.
type UserContacts400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			TypeCODE *string `json:"typeCODE,omitempty"`
			Value    *string `json:"value,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// UserSettings200 defines model for User_settings_200.
type UserSettings200 struct {
	// Embedded struct due to allOf(#/components/schemas/Success)
	Success
	// Embedded fields due to inline allOf schema
	Data *[]SettingsParams `json:"data,omitempty"`
}

// UserSettings400 defines model for User_settings_400.
type UserSettings400 struct {
	// Embedded struct due to allOf(#/components/schemas/Error_400)
	Error400
	// Embedded fields due to inline allOf schema
	// Embedded fields due to inline allOf schema
	Errors *struct {
		Validation *struct {
			N2FAChannelType *string `json:"2FAChannelType,omitempty"`
			Locale          *string `json:"locale,omitempty"`
		} `json:"validation,omitempty"`
	} `json:"errors,omitempty"`
}

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/User_params)
	UserParams
	// Embedded struct due to allOf(#/components/schemas/Password_params)
	PasswordParams
}

// UserContacts defines model for UserContacts.
type UserContacts struct {
	// Embedded struct due to allOf(#/components/schemas/User_contact)
	UserContact
}

// authorizeJSONBody defines parameters for Authorize.
type authorizeJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/Auth_params)
	AuthParams
}

// patchUserSettingsJSONBody defines parameters for PatchUserSettings.
type patchUserSettingsJSONBody struct {
	// Embedded struct due to allOf(#/components/schemas/Settings_params)
	SettingsParams
}

// AuthorizeRequestBody defines body for Authorize for application/json ContentType.
type AuthorizeJSONRequestBody authorizeJSONBody

// PostUsersRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody User

// PatchUserRequestBody defines body for PatchUser for application/json ContentType.
type PatchUserJSONRequestBody User

// PostUserContactsRequestBody defines body for PostUserContacts for application/json ContentType.
type PostUserContactsJSONRequestBody UserContacts

// PatchUserContactsRequestBody defines body for PatchUserContacts for application/json ContentType.
type PatchUserContactsJSONRequestBody UserContacts

// PatchUserSettingsRequestBody defines body for PatchUserSettings for application/json ContentType.
type PatchUserSettingsJSONRequestBody patchUserSettingsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация пользователя// (POST /authorize)
	Authorize(ctx echo.Context) error
	// Коллекция пользователей// (GET /users)
	GetUsers(ctx echo.Context) error
	// Создание пользователя// (POST /users)
	PostUsers(ctx echo.Context) error
	// Информация о пользователе// (GET /users/{userID})
	GetUser(ctx echo.Context, userID UserID) error
	// Изменение данных пользователя// (PATCH /users/{userID})
	PatchUser(ctx echo.Context, userID UserID) error
	// Коллекция контактных данных пользователя// (GET /users/{userID}/contacts)
	GetUserContacts(ctx echo.Context, userID UserID) error
	// Создание контактных данных пользователя// (POST /users/{userID}/contacts)
	PostUserContacts(ctx echo.Context, userID UserID) error
	// Изменение контактных данных пользователя// (PATCH /users/{userID}/contacts/{contactID})
	PatchUserContacts(ctx echo.Context, userID UserID, contactID ContactID) error
	// Коллекция настроек пользователя// (GET /users/{userID}/settings)
	GetUserSettings(ctx echo.Context, userID UserID) error
	// Изменение настроек пользователя// (PATCH /users/{userID}/settings)
	PatchUserSettings(ctx echo.Context, userID UserID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Authorize converts echo context to params.
func (w *ServerInterfaceWrapper) Authorize(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Authorize(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUser(ctx, userID)
	return err
}

// PatchUser converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUser(ctx, userID)
	return err
}

// GetUserContacts converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserContacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserContacts(ctx, userID)
	return err
}

// PostUserContacts converts echo context to params.
func (w *ServerInterfaceWrapper) PostUserContacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUserContacts(ctx, userID)
	return err
}

// PatchUserContacts converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserContacts(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// ------------- Path parameter "contactID" -------------
	var contactID ContactID

	err = runtime.BindStyledParameter("simple", false, "contactID", ctx.Param("contactID"), &contactID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter contactID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUserContacts(ctx, userID, contactID)
	return err
}

// GetUserSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserSettings(ctx, userID)
	return err
}

// PatchUserSettings converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUserSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUserSettings(ctx, userID)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/authorize", wrapper.Authorize)
	router.GET("/users", wrapper.GetUsers)
	router.POST("/users", wrapper.PostUsers)
	router.GET("/users/:userID", wrapper.GetUser)
	router.PATCH("/users/:userID", wrapper.PatchUser)
	router.GET("/users/:userID/contacts", wrapper.GetUserContacts)
	router.POST("/users/:userID/contacts", wrapper.PostUserContacts)
	router.PATCH("/users/:userID/contacts/:contactID", wrapper.PatchUserContacts)
	router.GET("/users/:userID/settings", wrapper.GetUserSettings)
	router.PATCH("/users/:userID/settings", wrapper.PatchUserSettings)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xbX3PbxhH/KphTHkFRkoFY5lNlmWk1I1keU8pLqtGcyaOIFAQQ4GBb1XBGkpOmmWYm",
	"nTx52pm26fQDsKpZs5bJfIW9b9S5w38SIEEKlMTkJRZwd9j77W/3dveWZ6huti3TIAZ1UOUMWdjGbUKJ",
	"Lf6qmwbFdbrzhP/RIE7d1iyqmQaqIHgL76AHA3YJffY19OEDdNklDNm5BB9gKF504QO7hAH7E/tGgnfQ",
	"hUHwx88whGv2PbyHIVyJiT24Zj8gGWl8cQvTFpKRgdsEVWJSyMgmX7maTRqoQm2XyMipt0gbc/HoqcUH",
	"O9TWjBPU6cjIdYg9q+gzCeZ/YBapOt5g4tDHZkMjAuVDh9gB2sSg/J/YsnStjrnA5S8dLvVZbFGs6/tN",
	"VPniDH1ikyaqoJVypMWyN84p82WPhT4d1JEnj32GHeeVaTfC8UehqNG+OrIQddtTh7MokX11Z8ggnjiW",
	"aTgeeFsubZm29ntyvLG2tgCRam69ThwPQcs2LWJTX20NTMU6GiVtJ7lgcmCxPCSvcdvSOanUR+rm+uaj",
	"hyXceKiWlPWNZumRgtWSWn+g4jrZxM1PG0hOMYwI0i8C4Y7CceaLL4mHfvgI2zY+FTPHxvCHI7v6B/Tg",
	"PXvDxec+gF1K0GVvxA6SW/0D9KGPOnJMh8pCdFi1bdMWa3MtjuxhTK+Ej/acYeL5S6xrDeztcvSdbp5o",
	"4jEx3DaH1Uc7hrWM2prBcY4UGA4aUZGMLN8eC1tyXHcpT1L1+Xm4bUkgw8V7jJ27t7c0fsaZLcYf5eJs",
	"7XB7u1qrhVu7DRrmI13dtEnKOSKjQIixF0maTlW6jNrEcfCJ+ErEI26SxKD+lqUm1nTXJlO9SbCWHGwo",
	"H/6ZHFPW1heoiPV0abYEA6UGMTTSiImiLFAUJV2UpyaVmqZrxMVQFyiGmi7GjiFYJe0R2jIjWdQFmglf",
	"O0MWSmwD65JD7JfEjggjgoc7DwJyRmTHrzTaOtYElnOdsn/hAQJcQw8+8IOU/cBjhh47ZxerOWPtALJl",
	"PXObmu3QpyISTzkkZzhsdVzMOm2t0dBJEStNPP7v6MyPx+bOEtiZL+oiDG3+/HYMx2U1Pr7m9v6Tapyh",
	"4v9yQL+cVH+JdTfbXmTUNO02pkhGrqF95ZI7Y75DKNWMk3vO/FogZZj3F0b6AXTZBbtk5zDkj6dzPERs",
	"WTm+8dnWdgsbBtEPxOo3ZLpu1rGeg+q3zvBOULAKCyoBfbLz3BG+/BWG8B/owyBf5cJ1iO1te5cYJ7SF",
	"KutTTsGR7/0duoKI1+z7fF987f837asj+Yy335goPJ/RaJgiHbuJIpsIi1PE/RGG8B6u2Dl02XfQhR67",
	"lLgxcWHZG3YhwZBdwhV/Dl3+uSRHie34BB1bV0R8noHGlpDYBX8DV9BnF2LFCImN1bXVtamJXPDNo5SE",
	"UVhefkMVmGT7tVAyw9X1zBzex9z79LgPG3NgP3IEODWuYci+gWEod+CNZnAyE91JZjUiI7EeM7+5Uuo4",
	"HMfRvlKLeFG2e+vbTiqFXcAQhvBv9h30YAB9rqAk7yOYgoyTmr8jRgEY8e1PREcpEp0Ep+WFg1U1qEZP",
	"JSMsFhTHKWUyauoSo+YVM6RPzvaqB7/Zf9IR+GFdN1+RdATTEVInIaQW62ySvrIwU0srqBRFITXLLY1e",
	"OY3FGrdy/HMg8Qs+xru5y9b62BWZjEaj7RwR5MhG/gl9+JknlDx37MI1dKX9g2dcdD9ErO3VkIyqe1s7",
	"u0hGB9Xd6q+fb+0hGX2+87j6HMno6f7TajJk9KZM2Vg8HB2pfupWC5ceeFnuO+gLoK+4iBI/TIWs19BP",
	"wPv8sJYjsAqQTElSgvTnpkHFnTmT4AbhJmYTgJA7vOGBDVcP+6MX4CSuTyem7Fk0nFzXiPEyYOTe/uOd",
	"3RECBu+yc/2UbDPxXY50+F3ojeUOv+KMwMbpat1sp36I2FpTI2mu46d41M1dxztfo+fwX+86FgYwFMF5",
	"guNNrDuRGb0wTZ1gI0Hr5OV1UhthFWrCNfFtdllEcCprdaXR3MQl/OLheklpKGulTVVtlhoNVXnQ3FQ/",
	"xRtredJPeZabffksYRQhMwOKxDSYfjEd721IuTOLGhRmrheiFA+RqDSPKeijV3ufDjW85a9gMOshlKxQ",
	"j3z/X9CFj9DnLjmvHFIgCB8zuzDJMveIOH9jl+xb6An7uYLhHAJBn317g2M62fWC0q5cCrTBXG0a2Ram",
	"Fm1hsXafuIFFBI5xKaFJObKarCtbzWia4+isrKysSM+rtYPPDnelZ7bZ1HQibT3b+a3I2oLYKXru2bZX",
	"z/BrER0ZmRYxsKWhCnrglycsTFtCJWUcdIcISzcdcbRxpYkseqfBLTUcEm+vOl1A1TFeHctqkkr0J/nl",
	"4rQ1w3HlZBNTR0bKbLOUYNb69FnhvbqYoOaeoPIJah65wrthUVl0221sn3I7+nNWF9Bkx0XxicNJzLeL",
	"jviaZR4DCHRPSAobTgg9FAPmUUV4i3zr8KTe6KaAAj34XwwW0T3Iz8R00+BPIzQSppEuZqw5UYCBOjeH",
	"Me8E5S5w/0kUZ73Aqe8VDadR0cc8pGL5zGuj60zjZAGUVHJDo9w+lm9hwL4WScnHyLSHmUROpXGsAznD",
	"GUdDyn77Ik+RLEzrrRQD4I9D7JfFAO65lt/DR5EqhXlxzrxjqgGV48H7JEsKu5DnVk6il+H+g15oH0Kh",
	"djfx3EnoaQ7rC+d3ClT0zDPvx8FUoL4nWF75LPzBRWf0JyH5iSFPHRn9rCOP9/6F8WjZ/HsR1PNVkM6+",
	"oFtkmt8Pisfz+/1EJ89S+v3crTi3GV4lFLPIFHzs+qCwNDyDHjPPXForn59YYm1xf+jxyrV1VEEtSq1K",
	"uWx55Z/VNn6ttV1nVcdGmavt/wEAAP//1838mH04AAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

