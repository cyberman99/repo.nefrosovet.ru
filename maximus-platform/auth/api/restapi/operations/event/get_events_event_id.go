// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetEventsEventIDHandlerFunc turns a function with the right signature into a get events event ID handler
type GetEventsEventIDHandlerFunc func(GetEventsEventIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEventsEventIDHandlerFunc) Handle(params GetEventsEventIDParams) middleware.Responder {
	return fn(params)
}

// GetEventsEventIDHandler interface for that can handle valid get events event ID params
type GetEventsEventIDHandler interface {
	Handle(GetEventsEventIDParams) middleware.Responder
}

// NewGetEventsEventID creates a new http.Handler for the get events event ID operation
func NewGetEventsEventID(ctx *middleware.Context, handler GetEventsEventIDHandler) *GetEventsEventID {
	return &GetEventsEventID{Context: ctx, Handler: handler}
}

/*GetEventsEventID swagger:route GET /events/{eventID} Event getEventsEventId

Информация о событии

*/
type GetEventsEventID struct {
	Context *middleware.Context
	Handler GetEventsEventIDHandler
}

func (o *GetEventsEventID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetEventsEventIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetEventsEventIDInternalServerErrorBody get events event ID internal server error body
// swagger:model GetEventsEventIDInternalServerErrorBody
type GetEventsEventIDInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetEventsEventIDInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetEventsEventIDInternalServerErrorBodyAO0
	var getEventsEventIDInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getEventsEventIDInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getEventsEventIDInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetEventsEventIDInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getEventsEventIDInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getEventsEventIDInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get events event ID internal server error body
func (o *GetEventsEventIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetEventsEventIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventsEventIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetEventsEventIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEventsEventIDMethodNotAllowedBody get events event ID method not allowed body
// swagger:model GetEventsEventIDMethodNotAllowedBody
type GetEventsEventIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetEventsEventIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetEventsEventIDMethodNotAllowedBodyAO0
	var getEventsEventIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getEventsEventIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getEventsEventIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetEventsEventIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getEventsEventIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getEventsEventIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get events event ID method not allowed body
func (o *GetEventsEventIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetEventsEventIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventsEventIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetEventsEventIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEventsEventIDNotFoundBody get events event ID not found body
// swagger:model GetEventsEventIDNotFoundBody
type GetEventsEventIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetEventsEventIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetEventsEventIDNotFoundBodyAO0
	var getEventsEventIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getEventsEventIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getEventsEventIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetEventsEventIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getEventsEventIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getEventsEventIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get events event ID not found body
func (o *GetEventsEventIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetEventsEventIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventsEventIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetEventsEventIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetEventsEventIDOKBody get events event ID o k body
// swagger:model GetEventsEventIDOKBody
type GetEventsEventIDOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetEventsEventIDOKBody) UnmarshalJSON(raw []byte) error {
	// GetEventsEventIDOKBodyAO0
	var getEventsEventIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getEventsEventIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getEventsEventIDOKBodyAO0

	// GetEventsEventIDOKBodyAO1
	var dataGetEventsEventIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetEventsEventIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetEventsEventIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetEventsEventIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getEventsEventIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getEventsEventIDOKBodyAO0)

	var dataGetEventsEventIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataGetEventsEventIDOKBodyAO1.Data = o.Data

	jsonDataGetEventsEventIDOKBodyAO1, errGetEventsEventIDOKBodyAO1 := swag.WriteJSON(dataGetEventsEventIDOKBodyAO1)
	if errGetEventsEventIDOKBodyAO1 != nil {
		return nil, errGetEventsEventIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetEventsEventIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get events event ID o k body
func (o *GetEventsEventIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventsEventIDOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getEventsEventIdOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getEventsEventIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEventsEventIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventsEventIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventsEventIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
