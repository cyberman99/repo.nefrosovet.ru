// Code generated by go-swagger; DO NOT EDIT.

package token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetWhoamiHandlerFunc turns a function with the right signature into a get whoami handler
type GetWhoamiHandlerFunc func(GetWhoamiParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWhoamiHandlerFunc) Handle(params GetWhoamiParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetWhoamiHandler interface for that can handle valid get whoami params
type GetWhoamiHandler interface {
	Handle(GetWhoamiParams, interface{}) middleware.Responder
}

// NewGetWhoami creates a new http.Handler for the get whoami operation
func NewGetWhoami(ctx *middleware.Context, handler GetWhoamiHandler) *GetWhoami {
	return &GetWhoami{Context: ctx, Handler: handler}
}

/*GetWhoami swagger:route GET /whoami Token getWhoami

Информация о токене

*/
type GetWhoami struct {
	Context *middleware.Context
	Handler GetWhoamiHandler
}

func (o *GetWhoami) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWhoamiParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Идентификатор субъекта
	ID string `json:"ID,omitempty"`

	// Роли пользователя
	Roles []string `json:"roles"`

	// Тип субъекта
	// Enum: [CLIENT USER]
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Roles []string `json:"roles"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Roles = dataAO0.Roles

	o.Type = dataAO0.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Roles []string `json:"roles"`

		Type string `json:"type,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.Roles = o.Roles

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLIENT","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataItems0TypeTypePropEnum = append(dataItems0TypeTypePropEnum, v)
	}
}

// property enum
func (o *DataItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (o *DataItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetWhoamiInternalServerErrorBody get whoami internal server error body
// swagger:model GetWhoamiInternalServerErrorBody
type GetWhoamiInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetWhoamiInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetWhoamiInternalServerErrorBodyAO0
	var getWhoamiInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getWhoamiInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getWhoamiInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetWhoamiInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getWhoamiInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getWhoamiInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get whoami internal server error body
func (o *GetWhoamiInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetWhoamiInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWhoamiInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetWhoamiInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetWhoamiOKBody get whoami o k body
// swagger:model GetWhoamiOKBody
type GetWhoamiOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetWhoamiOKBody) UnmarshalJSON(raw []byte) error {
	// GetWhoamiOKBodyAO0
	var getWhoamiOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getWhoamiOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getWhoamiOKBodyAO0

	// GetWhoamiOKBodyAO1
	var dataGetWhoamiOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetWhoamiOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetWhoamiOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetWhoamiOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getWhoamiOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getWhoamiOKBodyAO0)

	var dataGetWhoamiOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataGetWhoamiOKBodyAO1.Data = o.Data

	jsonDataGetWhoamiOKBodyAO1, errGetWhoamiOKBodyAO1 := swag.WriteJSON(dataGetWhoamiOKBodyAO1)
	if errGetWhoamiOKBodyAO1 != nil {
		return nil, errGetWhoamiOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetWhoamiOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get whoami o k body
func (o *GetWhoamiOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWhoamiOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getWhoamiOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getWhoamiOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWhoamiOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWhoamiOKBody) UnmarshalBinary(b []byte) error {
	var res GetWhoamiOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetWhoamiUnauthorizedBody get whoami unauthorized body
// swagger:model GetWhoamiUnauthorizedBody
type GetWhoamiUnauthorizedBody struct {
	models.Error401Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetWhoamiUnauthorizedBody) UnmarshalJSON(raw []byte) error {
	// GetWhoamiUnauthorizedBodyAO0
	var getWhoamiUnauthorizedBodyAO0 models.Error401Data
	if err := swag.ReadJSON(raw, &getWhoamiUnauthorizedBodyAO0); err != nil {
		return err
	}
	o.Error401Data = getWhoamiUnauthorizedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetWhoamiUnauthorizedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getWhoamiUnauthorizedBodyAO0, err := swag.WriteJSON(o.Error401Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getWhoamiUnauthorizedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get whoami unauthorized body
func (o *GetWhoamiUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error401Data
	if err := o.Error401Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetWhoamiUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWhoamiUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetWhoamiUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
