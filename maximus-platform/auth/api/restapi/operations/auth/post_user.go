// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PostUserHandlerFunc turns a function with the right signature into a post user handler
type PostUserHandlerFunc func(PostUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostUserHandlerFunc) Handle(params PostUserParams) middleware.Responder {
	return fn(params)
}

// PostUserHandler interface for that can handle valid post user params
type PostUserHandler interface {
	Handle(PostUserParams) middleware.Responder
}

// NewPostUser creates a new http.Handler for the post user operation
func NewPostUser(ctx *middleware.Context, handler PostUserHandler) *PostUser {
	return &PostUser{Context: ctx, Handler: handler}
}

/*PostUser swagger:route POST /user Auth postUser

Аутентификация пользователя по логин-паролю

*/
type PostUser struct {
	Context *middleware.Context
	Handler PostUserHandler
}

func (o *PostUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostUserParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostUserBadRequestBody post user bad request body
// swagger:model PostUserBadRequestBody
type PostUserBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *PostUserBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostUserBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostUserBadRequestBodyAO0
	var postUserBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postUserBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postUserBadRequestBodyAO0

	// PostUserBadRequestBodyAO1
	var dataPostUserBadRequestBodyAO1 struct {
		Errors *PostUserBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataPostUserBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataPostUserBadRequestBodyAO1.Errors

	o.Message = dataPostUserBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostUserBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postUserBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postUserBadRequestBodyAO0)

	var dataPostUserBadRequestBodyAO1 struct {
		Errors *PostUserBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataPostUserBadRequestBodyAO1.Errors = o.Errors

	dataPostUserBadRequestBodyAO1.Message = o.Message

	jsonDataPostUserBadRequestBodyAO1, errPostUserBadRequestBodyAO1 := swag.WriteJSON(dataPostUserBadRequestBodyAO1)
	if errPostUserBadRequestBodyAO1 != nil {
		return nil, errPostUserBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPostUserBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post user bad request body
func (o *PostUserBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUserBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("postUserBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postUserBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *PostUserBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("postUserBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostUserBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostUserBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUserBadRequestBodyAO1Errors post user bad request body a o1 errors
// swagger:model PostUserBadRequestBodyAO1Errors
type PostUserBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this post user bad request body a o1 errors
func (o *PostUserBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res PostUserBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUserBody post user body
// swagger:model PostUserBody
type PostUserBody struct {
	models.AuthUserParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostUserBody) UnmarshalJSON(raw []byte) error {
	// PostUserParamsBodyAO0
	var postUserParamsBodyAO0 models.AuthUserParams
	if err := swag.ReadJSON(raw, &postUserParamsBodyAO0); err != nil {
		return err
	}
	o.AuthUserParams = postUserParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostUserBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postUserParamsBodyAO0, err := swag.WriteJSON(o.AuthUserParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postUserParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post user body
func (o *PostUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AuthUserParams
	if err := o.AuthUserParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserBody) UnmarshalBinary(b []byte) error {
	var res PostUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUserInternalServerErrorBody post user internal server error body
// swagger:model PostUserInternalServerErrorBody
type PostUserInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostUserInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostUserInternalServerErrorBodyAO0
	var postUserInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &postUserInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = postUserInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostUserInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postUserInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postUserInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post user internal server error body
func (o *PostUserInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostUserInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUserMethodNotAllowedBody post user method not allowed body
// swagger:model PostUserMethodNotAllowedBody
type PostUserMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostUserMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostUserMethodNotAllowedBodyAO0
	var postUserMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postUserMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postUserMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostUserMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postUserMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postUserMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post user method not allowed body
func (o *PostUserMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostUserMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUserOKBody post user o k body
// swagger:model PostUserOKBody
type PostUserOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostUserOKBody) UnmarshalJSON(raw []byte) error {
	// PostUserOKBodyAO0
	var postUserOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postUserOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postUserOKBodyAO0

	// PostUserOKBodyAO1
	var dataPostUserOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostUserOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostUserOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostUserOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postUserOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postUserOKBodyAO0)

	var dataPostUserOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPostUserOKBodyAO1.Data = o.Data

	jsonDataPostUserOKBodyAO1, errPostUserOKBodyAO1 := swag.WriteJSON(dataPostUserOKBodyAO1)
	if errPostUserOKBodyAO1 != nil {
		return nil, errPostUserOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostUserOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post user o k body
func (o *PostUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostUserOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postUserOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserOKBody) UnmarshalBinary(b []byte) error {
	var res PostUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostUserUnauthorizedBody post user unauthorized body
// swagger:model PostUserUnauthorizedBody
type PostUserUnauthorizedBody struct {
	models.Error401Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostUserUnauthorizedBody) UnmarshalJSON(raw []byte) error {
	// PostUserUnauthorizedBodyAO0
	var postUserUnauthorizedBodyAO0 models.Error401Data
	if err := swag.ReadJSON(raw, &postUserUnauthorizedBodyAO0); err != nil {
		return err
	}
	o.Error401Data = postUserUnauthorizedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostUserUnauthorizedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postUserUnauthorizedBodyAO0, err := swag.WriteJSON(o.Error401Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postUserUnauthorizedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post user unauthorized body
func (o *PostUserUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error401Data
	if err := o.Error401Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostUserUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostUserUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostUserUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
