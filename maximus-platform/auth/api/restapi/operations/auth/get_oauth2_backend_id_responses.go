// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetOauth2BackendIDOKCode is the HTTP code returned for type GetOauth2BackendIDOK
const GetOauth2BackendIDOKCode int = 200

/*GetOauth2BackendIDOK Результат запроса пути для аутентификации

swagger:response getOauth2BackendIdOK
*/
type GetOauth2BackendIDOK struct {

	/*
	  In: Body
	*/
	Payload *GetOauth2BackendIDOKBody `json:"body,omitempty"`
}

// NewGetOauth2BackendIDOK creates GetOauth2BackendIDOK with default headers values
func NewGetOauth2BackendIDOK() *GetOauth2BackendIDOK {

	return &GetOauth2BackendIDOK{}
}

// WithPayload adds the payload to the get oauth2 backend Id o k response
func (o *GetOauth2BackendIDOK) WithPayload(payload *GetOauth2BackendIDOKBody) *GetOauth2BackendIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get oauth2 backend Id o k response
func (o *GetOauth2BackendIDOK) SetPayload(payload *GetOauth2BackendIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOauth2BackendIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOauth2BackendIDBadRequestCode is the HTTP code returned for type GetOauth2BackendIDBadRequest
const GetOauth2BackendIDBadRequestCode int = 400

/*GetOauth2BackendIDBadRequest Коллекция авторизации

swagger:response getOauth2BackendIdBadRequest
*/
type GetOauth2BackendIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *GetOauth2BackendIDBadRequestBody `json:"body,omitempty"`
}

// NewGetOauth2BackendIDBadRequest creates GetOauth2BackendIDBadRequest with default headers values
func NewGetOauth2BackendIDBadRequest() *GetOauth2BackendIDBadRequest {

	return &GetOauth2BackendIDBadRequest{}
}

// WithPayload adds the payload to the get oauth2 backend Id bad request response
func (o *GetOauth2BackendIDBadRequest) WithPayload(payload *GetOauth2BackendIDBadRequestBody) *GetOauth2BackendIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get oauth2 backend Id bad request response
func (o *GetOauth2BackendIDBadRequest) SetPayload(payload *GetOauth2BackendIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOauth2BackendIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetOauth2BackendIDInternalServerErrorCode is the HTTP code returned for type GetOauth2BackendIDInternalServerError
const GetOauth2BackendIDInternalServerErrorCode int = 500

/*GetOauth2BackendIDInternalServerError Internal server error

swagger:response getOauth2BackendIdInternalServerError
*/
type GetOauth2BackendIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *GetOauth2BackendIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetOauth2BackendIDInternalServerError creates GetOauth2BackendIDInternalServerError with default headers values
func NewGetOauth2BackendIDInternalServerError() *GetOauth2BackendIDInternalServerError {

	return &GetOauth2BackendIDInternalServerError{}
}

// WithPayload adds the payload to the get oauth2 backend Id internal server error response
func (o *GetOauth2BackendIDInternalServerError) WithPayload(payload *GetOauth2BackendIDInternalServerErrorBody) *GetOauth2BackendIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get oauth2 backend Id internal server error response
func (o *GetOauth2BackendIDInternalServerError) SetPayload(payload *GetOauth2BackendIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetOauth2BackendIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
