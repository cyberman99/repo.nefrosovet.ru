// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostOauth2BackendIDConsentOKCode is the HTTP code returned for type PostOauth2BackendIDConsentOK
const PostOauth2BackendIDConsentOKCode int = 200

/*PostOauth2BackendIDConsentOK Результат аутентификации

swagger:response postOauth2BackendIdConsentOK
*/
type PostOauth2BackendIDConsentOK struct {

	/*
	  In: Body
	*/
	Payload *PostOauth2BackendIDConsentOKBody `json:"body,omitempty"`
}

// NewPostOauth2BackendIDConsentOK creates PostOauth2BackendIDConsentOK with default headers values
func NewPostOauth2BackendIDConsentOK() *PostOauth2BackendIDConsentOK {

	return &PostOauth2BackendIDConsentOK{}
}

// WithPayload adds the payload to the post oauth2 backend Id consent o k response
func (o *PostOauth2BackendIDConsentOK) WithPayload(payload *PostOauth2BackendIDConsentOKBody) *PostOauth2BackendIDConsentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post oauth2 backend Id consent o k response
func (o *PostOauth2BackendIDConsentOK) SetPayload(payload *PostOauth2BackendIDConsentOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOauth2BackendIDConsentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostOauth2BackendIDConsentBadRequestCode is the HTTP code returned for type PostOauth2BackendIDConsentBadRequest
const PostOauth2BackendIDConsentBadRequestCode int = 400

/*PostOauth2BackendIDConsentBadRequest Коллекция авторизации

swagger:response postOauth2BackendIdConsentBadRequest
*/
type PostOauth2BackendIDConsentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostOauth2BackendIDConsentBadRequestBody `json:"body,omitempty"`
}

// NewPostOauth2BackendIDConsentBadRequest creates PostOauth2BackendIDConsentBadRequest with default headers values
func NewPostOauth2BackendIDConsentBadRequest() *PostOauth2BackendIDConsentBadRequest {

	return &PostOauth2BackendIDConsentBadRequest{}
}

// WithPayload adds the payload to the post oauth2 backend Id consent bad request response
func (o *PostOauth2BackendIDConsentBadRequest) WithPayload(payload *PostOauth2BackendIDConsentBadRequestBody) *PostOauth2BackendIDConsentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post oauth2 backend Id consent bad request response
func (o *PostOauth2BackendIDConsentBadRequest) SetPayload(payload *PostOauth2BackendIDConsentBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOauth2BackendIDConsentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostOauth2BackendIDConsentInternalServerErrorCode is the HTTP code returned for type PostOauth2BackendIDConsentInternalServerError
const PostOauth2BackendIDConsentInternalServerErrorCode int = 500

/*PostOauth2BackendIDConsentInternalServerError Internal server error

swagger:response postOauth2BackendIdConsentInternalServerError
*/
type PostOauth2BackendIDConsentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostOauth2BackendIDConsentInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostOauth2BackendIDConsentInternalServerError creates PostOauth2BackendIDConsentInternalServerError with default headers values
func NewPostOauth2BackendIDConsentInternalServerError() *PostOauth2BackendIDConsentInternalServerError {

	return &PostOauth2BackendIDConsentInternalServerError{}
}

// WithPayload adds the payload to the post oauth2 backend Id consent internal server error response
func (o *PostOauth2BackendIDConsentInternalServerError) WithPayload(payload *PostOauth2BackendIDConsentInternalServerErrorBody) *PostOauth2BackendIDConsentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post oauth2 backend Id consent internal server error response
func (o *PostOauth2BackendIDConsentInternalServerError) SetPayload(payload *PostOauth2BackendIDConsentInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostOauth2BackendIDConsentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
