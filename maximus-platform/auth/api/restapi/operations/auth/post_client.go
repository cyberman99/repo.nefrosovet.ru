// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PostClientHandlerFunc turns a function with the right signature into a post client handler
type PostClientHandlerFunc func(PostClientParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostClientHandlerFunc) Handle(params PostClientParams) middleware.Responder {
	return fn(params)
}

// PostClientHandler interface for that can handle valid post client params
type PostClientHandler interface {
	Handle(PostClientParams) middleware.Responder
}

// NewPostClient creates a new http.Handler for the post client operation
func NewPostClient(ctx *middleware.Context, handler PostClientHandler) *PostClient {
	return &PostClient{Context: ctx, Handler: handler}
}

/*PostClient swagger:route POST /client Auth postClient

Аутентификация клиента

*/
type PostClient struct {
	Context *middleware.Context
	Handler PostClientHandler
}

func (o *PostClient) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostClientParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Токен доступа
	// Required: true
	AccessToken *string `json:"accessToken"`

	// Токен обновления
	// Required: true
	RefreshToken *string `json:"refreshToken"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		AccessToken *string `json:"accessToken"`

		RefreshToken *string `json:"refreshToken"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.AccessToken = dataAO0.AccessToken

	o.RefreshToken = dataAO0.RefreshToken

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		AccessToken *string `json:"accessToken"`

		RefreshToken *string `json:"refreshToken"`
	}

	dataAO0.AccessToken = o.AccessToken

	dataAO0.RefreshToken = o.RefreshToken

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataItems0) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("accessToken", "body", o.AccessToken); err != nil {
		return err
	}

	return nil
}

func (o *DataItems0) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("refreshToken", "body", o.RefreshToken); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientBody post client body
// swagger:model PostClientBody
type PostClientBody struct {
	models.AuthClientParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientBody) UnmarshalJSON(raw []byte) error {
	// PostClientParamsBodyAO0
	var postClientParamsBodyAO0 models.AuthClientParams
	if err := swag.ReadJSON(raw, &postClientParamsBodyAO0); err != nil {
		return err
	}
	o.AuthClientParams = postClientParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClientParamsBodyAO0, err := swag.WriteJSON(o.AuthClientParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post client body
func (o *PostClientBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AuthClientParams
	if err := o.AuthClientParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientBody) UnmarshalBinary(b []byte) error {
	var res PostClientBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientInternalServerErrorBody post client internal server error body
// swagger:model PostClientInternalServerErrorBody
type PostClientInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostClientInternalServerErrorBodyAO0
	var postClientInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &postClientInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = postClientInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClientInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post client internal server error body
func (o *PostClientInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostClientInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientMethodNotAllowedBody post client method not allowed body
// swagger:model PostClientMethodNotAllowedBody
type PostClientMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostClientMethodNotAllowedBodyAO0
	var postClientMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postClientMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postClientMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClientMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post client method not allowed body
func (o *PostClientMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostClientMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientOKBody post client o k body
// swagger:model PostClientOKBody
type PostClientOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientOKBody) UnmarshalJSON(raw []byte) error {
	// PostClientOKBodyAO0
	var postClientOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postClientOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postClientOKBodyAO0

	// PostClientOKBodyAO1
	var dataPostClientOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostClientOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostClientOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postClientOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientOKBodyAO0)

	var dataPostClientOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPostClientOKBodyAO1.Data = o.Data

	jsonDataPostClientOKBodyAO1, errPostClientOKBodyAO1 := swag.WriteJSON(dataPostClientOKBodyAO1)
	if errPostClientOKBodyAO1 != nil {
		return nil, errPostClientOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostClientOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post client o k body
func (o *PostClientOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostClientOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postClientOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostClientOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientOKBody) UnmarshalBinary(b []byte) error {
	var res PostClientOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientUnauthorizedBody post client unauthorized body
// swagger:model PostClientUnauthorizedBody
type PostClientUnauthorizedBody struct {
	models.Error401Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientUnauthorizedBody) UnmarshalJSON(raw []byte) error {
	// PostClientUnauthorizedBodyAO0
	var postClientUnauthorizedBodyAO0 models.Error401Data
	if err := swag.ReadJSON(raw, &postClientUnauthorizedBodyAO0); err != nil {
		return err
	}
	o.Error401Data = postClientUnauthorizedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientUnauthorizedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClientUnauthorizedBodyAO0, err := swag.WriteJSON(o.Error401Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientUnauthorizedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post client unauthorized body
func (o *PostClientUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error401Data
	if err := o.Error401Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PostClientUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
