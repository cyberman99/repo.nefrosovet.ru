// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostUserOKCode is the HTTP code returned for type PostUserOK
const PostUserOKCode int = 200

/*PostUserOK Результат аутентификации

swagger:response postUserOK
*/
type PostUserOK struct {

	/*
	  In: Body
	*/
	Payload *PostUserOKBody `json:"body,omitempty"`
}

// NewPostUserOK creates PostUserOK with default headers values
func NewPostUserOK() *PostUserOK {

	return &PostUserOK{}
}

// WithPayload adds the payload to the post user o k response
func (o *PostUserOK) WithPayload(payload *PostUserOKBody) *PostUserOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user o k response
func (o *PostUserOK) SetPayload(payload *PostUserOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserBadRequestCode is the HTTP code returned for type PostUserBadRequest
const PostUserBadRequestCode int = 400

/*PostUserBadRequest Коллекция авторизации

swagger:response postUserBadRequest
*/
type PostUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostUserBadRequestBody `json:"body,omitempty"`
}

// NewPostUserBadRequest creates PostUserBadRequest with default headers values
func NewPostUserBadRequest() *PostUserBadRequest {

	return &PostUserBadRequest{}
}

// WithPayload adds the payload to the post user bad request response
func (o *PostUserBadRequest) WithPayload(payload *PostUserBadRequestBody) *PostUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user bad request response
func (o *PostUserBadRequest) SetPayload(payload *PostUserBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserUnauthorizedCode is the HTTP code returned for type PostUserUnauthorized
const PostUserUnauthorizedCode int = 401

/*PostUserUnauthorized Access denied

swagger:response postUserUnauthorized
*/
type PostUserUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *PostUserUnauthorizedBody `json:"body,omitempty"`
}

// NewPostUserUnauthorized creates PostUserUnauthorized with default headers values
func NewPostUserUnauthorized() *PostUserUnauthorized {

	return &PostUserUnauthorized{}
}

// WithPayload adds the payload to the post user unauthorized response
func (o *PostUserUnauthorized) WithPayload(payload *PostUserUnauthorizedBody) *PostUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user unauthorized response
func (o *PostUserUnauthorized) SetPayload(payload *PostUserUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserMethodNotAllowedCode is the HTTP code returned for type PostUserMethodNotAllowed
const PostUserMethodNotAllowedCode int = 405

/*PostUserMethodNotAllowed Invalid Method

swagger:response postUserMethodNotAllowed
*/
type PostUserMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PostUserMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPostUserMethodNotAllowed creates PostUserMethodNotAllowed with default headers values
func NewPostUserMethodNotAllowed() *PostUserMethodNotAllowed {

	return &PostUserMethodNotAllowed{}
}

// WithPayload adds the payload to the post user method not allowed response
func (o *PostUserMethodNotAllowed) WithPayload(payload *PostUserMethodNotAllowedBody) *PostUserMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user method not allowed response
func (o *PostUserMethodNotAllowed) SetPayload(payload *PostUserMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostUserInternalServerErrorCode is the HTTP code returned for type PostUserInternalServerError
const PostUserInternalServerErrorCode int = 500

/*PostUserInternalServerError Internal server error

swagger:response postUserInternalServerError
*/
type PostUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostUserInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostUserInternalServerError creates PostUserInternalServerError with default headers values
func NewPostUserInternalServerError() *PostUserInternalServerError {

	return &PostUserInternalServerError{}
}

// WithPayload adds the payload to the post user internal server error response
func (o *PostUserInternalServerError) WithPayload(payload *PostUserInternalServerErrorBody) *PostUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post user internal server error response
func (o *PostUserInternalServerError) SetPayload(payload *PostUserInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
