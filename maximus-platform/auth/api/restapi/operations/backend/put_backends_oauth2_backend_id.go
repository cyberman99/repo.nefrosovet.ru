// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PutBackendsOauth2BackendIDHandlerFunc turns a function with the right signature into a put backends oauth2 backend ID handler
type PutBackendsOauth2BackendIDHandlerFunc func(PutBackendsOauth2BackendIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutBackendsOauth2BackendIDHandlerFunc) Handle(params PutBackendsOauth2BackendIDParams) middleware.Responder {
	return fn(params)
}

// PutBackendsOauth2BackendIDHandler interface for that can handle valid put backends oauth2 backend ID params
type PutBackendsOauth2BackendIDHandler interface {
	Handle(PutBackendsOauth2BackendIDParams) middleware.Responder
}

// NewPutBackendsOauth2BackendID creates a new http.Handler for the put backends oauth2 backend ID operation
func NewPutBackendsOauth2BackendID(ctx *middleware.Context, handler PutBackendsOauth2BackendIDHandler) *PutBackendsOauth2BackendID {
	return &PutBackendsOauth2BackendID{Context: ctx, Handler: handler}
}

/*PutBackendsOauth2BackendID swagger:route PUT /backends/oauth2/{backendID} Backend putBackendsOauth2BackendId

Изменение oauth2 бэкенда

*/
type PutBackendsOauth2BackendID struct {
	Context *middleware.Context
	Handler PutBackendsOauth2BackendIDHandler
}

func (o *PutBackendsOauth2BackendID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutBackendsOauth2BackendIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutBackendsOauth2BackendIDBody put backends oauth2 backend ID body
// swagger:model PutBackendsOauth2BackendIDBody
type PutBackendsOauth2BackendIDBody struct {
	models.BackendOauth2Params

	models.BackendParams

	models.BackendOauth2IDParam
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsOauth2BackendIDBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsOauth2BackendIDParamsBodyAO0
	var putBackendsOauth2BackendIDParamsBodyAO0 models.BackendOauth2Params
	if err := swag.ReadJSON(raw, &putBackendsOauth2BackendIDParamsBodyAO0); err != nil {
		return err
	}
	o.BackendOauth2Params = putBackendsOauth2BackendIDParamsBodyAO0

	// PutBackendsOauth2BackendIDParamsBodyAO1
	var putBackendsOauth2BackendIDParamsBodyAO1 models.BackendParams
	if err := swag.ReadJSON(raw, &putBackendsOauth2BackendIDParamsBodyAO1); err != nil {
		return err
	}
	o.BackendParams = putBackendsOauth2BackendIDParamsBodyAO1

	// PutBackendsOauth2BackendIDParamsBodyAO2
	var putBackendsOauth2BackendIDParamsBodyAO2 models.BackendOauth2IDParam
	if err := swag.ReadJSON(raw, &putBackendsOauth2BackendIDParamsBodyAO2); err != nil {
		return err
	}
	o.BackendOauth2IDParam = putBackendsOauth2BackendIDParamsBodyAO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsOauth2BackendIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	putBackendsOauth2BackendIDParamsBodyAO0, err := swag.WriteJSON(o.BackendOauth2Params)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsOauth2BackendIDParamsBodyAO0)

	putBackendsOauth2BackendIDParamsBodyAO1, err := swag.WriteJSON(o.BackendParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsOauth2BackendIDParamsBodyAO1)

	putBackendsOauth2BackendIDParamsBodyAO2, err := swag.WriteJSON(o.BackendOauth2IDParam)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsOauth2BackendIDParamsBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends oauth2 backend ID body
func (o *PutBackendsOauth2BackendIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BackendOauth2Params
	if err := o.BackendOauth2Params.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.BackendParams
	if err := o.BackendParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.BackendOauth2IDParam
	if err := o.BackendOauth2IDParam.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsOauth2BackendIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsOauth2BackendIDInternalServerErrorBody put backends oauth2 backend ID internal server error body
// swagger:model PutBackendsOauth2BackendIDInternalServerErrorBody
type PutBackendsOauth2BackendIDInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsOauth2BackendIDInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsOauth2BackendIDInternalServerErrorBodyAO0
	var putBackendsOauth2BackendIDInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &putBackendsOauth2BackendIDInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = putBackendsOauth2BackendIDInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsOauth2BackendIDInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putBackendsOauth2BackendIDInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsOauth2BackendIDInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends oauth2 backend ID internal server error body
func (o *PutBackendsOauth2BackendIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsOauth2BackendIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsOauth2BackendIDMethodNotAllowedBody put backends oauth2 backend ID method not allowed body
// swagger:model PutBackendsOauth2BackendIDMethodNotAllowedBody
type PutBackendsOauth2BackendIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsOauth2BackendIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsOauth2BackendIDMethodNotAllowedBodyAO0
	var putBackendsOauth2BackendIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putBackendsOauth2BackendIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putBackendsOauth2BackendIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsOauth2BackendIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putBackendsOauth2BackendIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsOauth2BackendIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends oauth2 backend ID method not allowed body
func (o *PutBackendsOauth2BackendIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsOauth2BackendIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsOauth2BackendIDNotFoundBody put backends oauth2 backend ID not found body
// swagger:model PutBackendsOauth2BackendIDNotFoundBody
type PutBackendsOauth2BackendIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsOauth2BackendIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsOauth2BackendIDNotFoundBodyAO0
	var putBackendsOauth2BackendIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putBackendsOauth2BackendIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putBackendsOauth2BackendIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsOauth2BackendIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putBackendsOauth2BackendIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsOauth2BackendIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends oauth2 backend ID not found body
func (o *PutBackendsOauth2BackendIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsOauth2BackendIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsOauth2BackendIDOKBody put backends oauth2 backend ID o k body
// swagger:model PutBackendsOauth2BackendIDOKBody
type PutBackendsOauth2BackendIDOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*Oauth2DataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsOauth2BackendIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsOauth2BackendIDOKBodyAO0
	var putBackendsOauth2BackendIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putBackendsOauth2BackendIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putBackendsOauth2BackendIDOKBodyAO0

	// PutBackendsOauth2BackendIDOKBodyAO1
	var dataPutBackendsOauth2BackendIDOKBodyAO1 struct {
		Data []*Oauth2DataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutBackendsOauth2BackendIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutBackendsOauth2BackendIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsOauth2BackendIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putBackendsOauth2BackendIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsOauth2BackendIDOKBodyAO0)

	var dataPutBackendsOauth2BackendIDOKBodyAO1 struct {
		Data []*Oauth2DataItem `json:"data"`
	}

	dataPutBackendsOauth2BackendIDOKBodyAO1.Data = o.Data

	jsonDataPutBackendsOauth2BackendIDOKBodyAO1, errPutBackendsOauth2BackendIDOKBodyAO1 := swag.WriteJSON(dataPutBackendsOauth2BackendIDOKBodyAO1)
	if errPutBackendsOauth2BackendIDOKBodyAO1 != nil {
		return nil, errPutBackendsOauth2BackendIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutBackendsOauth2BackendIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends oauth2 backend ID o k body
func (o *PutBackendsOauth2BackendIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutBackendsOauth2BackendIDOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("putBackendsOauth2BackendIdOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putBackendsOauth2BackendIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsOauth2BackendIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsOauth2BackendIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
