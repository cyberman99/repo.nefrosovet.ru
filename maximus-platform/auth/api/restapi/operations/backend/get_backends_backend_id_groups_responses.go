// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetBackendsBackendIDGroupsOKCode is the HTTP code returned for type GetBackendsBackendIDGroupsOK
const GetBackendsBackendIDGroupsOKCode int = 200

/*GetBackendsBackendIDGroupsOK Объект групп бэкенда

swagger:response getBackendsBackendIdGroupsOK
*/
type GetBackendsBackendIDGroupsOK struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDGroupsOKBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDGroupsOK creates GetBackendsBackendIDGroupsOK with default headers values
func NewGetBackendsBackendIDGroupsOK() *GetBackendsBackendIDGroupsOK {

	return &GetBackendsBackendIDGroupsOK{}
}

// WithPayload adds the payload to the get backends backend Id groups o k response
func (o *GetBackendsBackendIDGroupsOK) WithPayload(payload *GetBackendsBackendIDGroupsOKBody) *GetBackendsBackendIDGroupsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id groups o k response
func (o *GetBackendsBackendIDGroupsOK) SetPayload(payload *GetBackendsBackendIDGroupsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDGroupsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBackendsBackendIDGroupsNotFoundCode is the HTTP code returned for type GetBackendsBackendIDGroupsNotFound
const GetBackendsBackendIDGroupsNotFoundCode int = 404

/*GetBackendsBackendIDGroupsNotFound Not found

swagger:response getBackendsBackendIdGroupsNotFound
*/
type GetBackendsBackendIDGroupsNotFound struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDGroupsNotFoundBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDGroupsNotFound creates GetBackendsBackendIDGroupsNotFound with default headers values
func NewGetBackendsBackendIDGroupsNotFound() *GetBackendsBackendIDGroupsNotFound {

	return &GetBackendsBackendIDGroupsNotFound{}
}

// WithPayload adds the payload to the get backends backend Id groups not found response
func (o *GetBackendsBackendIDGroupsNotFound) WithPayload(payload *GetBackendsBackendIDGroupsNotFoundBody) *GetBackendsBackendIDGroupsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id groups not found response
func (o *GetBackendsBackendIDGroupsNotFound) SetPayload(payload *GetBackendsBackendIDGroupsNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDGroupsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBackendsBackendIDGroupsMethodNotAllowedCode is the HTTP code returned for type GetBackendsBackendIDGroupsMethodNotAllowed
const GetBackendsBackendIDGroupsMethodNotAllowedCode int = 405

/*GetBackendsBackendIDGroupsMethodNotAllowed Invalid Method

swagger:response getBackendsBackendIdGroupsMethodNotAllowed
*/
type GetBackendsBackendIDGroupsMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDGroupsMethodNotAllowedBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDGroupsMethodNotAllowed creates GetBackendsBackendIDGroupsMethodNotAllowed with default headers values
func NewGetBackendsBackendIDGroupsMethodNotAllowed() *GetBackendsBackendIDGroupsMethodNotAllowed {

	return &GetBackendsBackendIDGroupsMethodNotAllowed{}
}

// WithPayload adds the payload to the get backends backend Id groups method not allowed response
func (o *GetBackendsBackendIDGroupsMethodNotAllowed) WithPayload(payload *GetBackendsBackendIDGroupsMethodNotAllowedBody) *GetBackendsBackendIDGroupsMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id groups method not allowed response
func (o *GetBackendsBackendIDGroupsMethodNotAllowed) SetPayload(payload *GetBackendsBackendIDGroupsMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDGroupsMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBackendsBackendIDGroupsInternalServerErrorCode is the HTTP code returned for type GetBackendsBackendIDGroupsInternalServerError
const GetBackendsBackendIDGroupsInternalServerErrorCode int = 500

/*GetBackendsBackendIDGroupsInternalServerError Internal server error

swagger:response getBackendsBackendIdGroupsInternalServerError
*/
type GetBackendsBackendIDGroupsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDGroupsInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDGroupsInternalServerError creates GetBackendsBackendIDGroupsInternalServerError with default headers values
func NewGetBackendsBackendIDGroupsInternalServerError() *GetBackendsBackendIDGroupsInternalServerError {

	return &GetBackendsBackendIDGroupsInternalServerError{}
}

// WithPayload adds the payload to the get backends backend Id groups internal server error response
func (o *GetBackendsBackendIDGroupsInternalServerError) WithPayload(payload *GetBackendsBackendIDGroupsInternalServerErrorBody) *GetBackendsBackendIDGroupsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id groups internal server error response
func (o *GetBackendsBackendIDGroupsInternalServerError) SetPayload(payload *GetBackendsBackendIDGroupsInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDGroupsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
