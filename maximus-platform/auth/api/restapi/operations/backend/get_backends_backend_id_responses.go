// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetBackendsBackendIDOKCode is the HTTP code returned for type GetBackendsBackendIDOK
const GetBackendsBackendIDOKCode int = 200

/*GetBackendsBackendIDOK SUCCESS

swagger:response getBackendsBackendIdOK
*/
type GetBackendsBackendIDOK struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDOKBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDOK creates GetBackendsBackendIDOK with default headers values
func NewGetBackendsBackendIDOK() *GetBackendsBackendIDOK {

	return &GetBackendsBackendIDOK{}
}

// WithPayload adds the payload to the get backends backend Id o k response
func (o *GetBackendsBackendIDOK) WithPayload(payload *GetBackendsBackendIDOKBody) *GetBackendsBackendIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id o k response
func (o *GetBackendsBackendIDOK) SetPayload(payload *GetBackendsBackendIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBackendsBackendIDNotFoundCode is the HTTP code returned for type GetBackendsBackendIDNotFound
const GetBackendsBackendIDNotFoundCode int = 404

/*GetBackendsBackendIDNotFound Not found

swagger:response getBackendsBackendIdNotFound
*/
type GetBackendsBackendIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDNotFoundBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDNotFound creates GetBackendsBackendIDNotFound with default headers values
func NewGetBackendsBackendIDNotFound() *GetBackendsBackendIDNotFound {

	return &GetBackendsBackendIDNotFound{}
}

// WithPayload adds the payload to the get backends backend Id not found response
func (o *GetBackendsBackendIDNotFound) WithPayload(payload *GetBackendsBackendIDNotFoundBody) *GetBackendsBackendIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id not found response
func (o *GetBackendsBackendIDNotFound) SetPayload(payload *GetBackendsBackendIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBackendsBackendIDMethodNotAllowedCode is the HTTP code returned for type GetBackendsBackendIDMethodNotAllowed
const GetBackendsBackendIDMethodNotAllowedCode int = 405

/*GetBackendsBackendIDMethodNotAllowed Invalid Method

swagger:response getBackendsBackendIdMethodNotAllowed
*/
type GetBackendsBackendIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDMethodNotAllowed creates GetBackendsBackendIDMethodNotAllowed with default headers values
func NewGetBackendsBackendIDMethodNotAllowed() *GetBackendsBackendIDMethodNotAllowed {

	return &GetBackendsBackendIDMethodNotAllowed{}
}

// WithPayload adds the payload to the get backends backend Id method not allowed response
func (o *GetBackendsBackendIDMethodNotAllowed) WithPayload(payload *GetBackendsBackendIDMethodNotAllowedBody) *GetBackendsBackendIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id method not allowed response
func (o *GetBackendsBackendIDMethodNotAllowed) SetPayload(payload *GetBackendsBackendIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetBackendsBackendIDInternalServerErrorCode is the HTTP code returned for type GetBackendsBackendIDInternalServerError
const GetBackendsBackendIDInternalServerErrorCode int = 500

/*GetBackendsBackendIDInternalServerError Internal server error

swagger:response getBackendsBackendIdInternalServerError
*/
type GetBackendsBackendIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *GetBackendsBackendIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetBackendsBackendIDInternalServerError creates GetBackendsBackendIDInternalServerError with default headers values
func NewGetBackendsBackendIDInternalServerError() *GetBackendsBackendIDInternalServerError {

	return &GetBackendsBackendIDInternalServerError{}
}

// WithPayload adds the payload to the get backends backend Id internal server error response
func (o *GetBackendsBackendIDInternalServerError) WithPayload(payload *GetBackendsBackendIDInternalServerErrorBody) *GetBackendsBackendIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get backends backend Id internal server error response
func (o *GetBackendsBackendIDInternalServerError) SetPayload(payload *GetBackendsBackendIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBackendsBackendIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
