// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetBackendsBackendIDTestHandlerFunc turns a function with the right signature into a get backends backend ID test handler
type GetBackendsBackendIDTestHandlerFunc func(GetBackendsBackendIDTestParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBackendsBackendIDTestHandlerFunc) Handle(params GetBackendsBackendIDTestParams) middleware.Responder {
	return fn(params)
}

// GetBackendsBackendIDTestHandler interface for that can handle valid get backends backend ID test params
type GetBackendsBackendIDTestHandler interface {
	Handle(GetBackendsBackendIDTestParams) middleware.Responder
}

// NewGetBackendsBackendIDTest creates a new http.Handler for the get backends backend ID test operation
func NewGetBackendsBackendIDTest(ctx *middleware.Context, handler GetBackendsBackendIDTestHandler) *GetBackendsBackendIDTest {
	return &GetBackendsBackendIDTest{Context: ctx, Handler: handler}
}

/*GetBackendsBackendIDTest swagger:route GET /backends/{backendID}/test Backend getBackendsBackendIdTest

Тест коннекта к бэкенду

*/
type GetBackendsBackendIDTest struct {
	Context *middleware.Context
	Handler GetBackendsBackendIDTestHandler
}

func (o *GetBackendsBackendIDTest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBackendsBackendIDTestParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBackendsBackendIDTestBadRequestBody get backends backend ID test bad request body
// swagger:model GetBackendsBackendIDTestBadRequestBody
type GetBackendsBackendIDTestBadRequestBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*TestDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDTestBadRequestBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDTestBadRequestBodyAO0
	var getBackendsBackendIDTestBadRequestBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getBackendsBackendIDTestBadRequestBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getBackendsBackendIDTestBadRequestBodyAO0

	// GetBackendsBackendIDTestBadRequestBodyAO1
	var dataGetBackendsBackendIDTestBadRequestBodyAO1 struct {
		Data []*TestDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetBackendsBackendIDTestBadRequestBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetBackendsBackendIDTestBadRequestBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDTestBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getBackendsBackendIDTestBadRequestBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDTestBadRequestBodyAO0)

	var dataGetBackendsBackendIDTestBadRequestBodyAO1 struct {
		Data []*TestDataItem `json:"data"`
	}

	dataGetBackendsBackendIDTestBadRequestBodyAO1.Data = o.Data

	jsonDataGetBackendsBackendIDTestBadRequestBodyAO1, errGetBackendsBackendIDTestBadRequestBodyAO1 := swag.WriteJSON(dataGetBackendsBackendIDTestBadRequestBodyAO1)
	if errGetBackendsBackendIDTestBadRequestBodyAO1 != nil {
		return nil, errGetBackendsBackendIDTestBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataGetBackendsBackendIDTestBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID test bad request body
func (o *GetBackendsBackendIDTestBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBackendsBackendIDTestBadRequestBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getBackendsBackendIdTestBadRequest"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBackendsBackendIdTestBadRequest" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDTestBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDTestBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDTestBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsBackendIDTestInternalServerErrorBody get backends backend ID test internal server error body
// swagger:model GetBackendsBackendIDTestInternalServerErrorBody
type GetBackendsBackendIDTestInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDTestInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDTestInternalServerErrorBodyAO0
	var getBackendsBackendIDTestInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getBackendsBackendIDTestInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getBackendsBackendIDTestInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDTestInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsBackendIDTestInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDTestInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID test internal server error body
func (o *GetBackendsBackendIDTestInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDTestInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDTestInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDTestInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsBackendIDTestMethodNotAllowedBody get backends backend ID test method not allowed body
// swagger:model GetBackendsBackendIDTestMethodNotAllowedBody
type GetBackendsBackendIDTestMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDTestMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDTestMethodNotAllowedBodyAO0
	var getBackendsBackendIDTestMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getBackendsBackendIDTestMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getBackendsBackendIDTestMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDTestMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsBackendIDTestMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDTestMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID test method not allowed body
func (o *GetBackendsBackendIDTestMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDTestMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDTestMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDTestMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsBackendIDTestNotFoundBody get backends backend ID test not found body
// swagger:model GetBackendsBackendIDTestNotFoundBody
type GetBackendsBackendIDTestNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDTestNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDTestNotFoundBodyAO0
	var getBackendsBackendIDTestNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getBackendsBackendIDTestNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getBackendsBackendIDTestNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDTestNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsBackendIDTestNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDTestNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID test not found body
func (o *GetBackendsBackendIDTestNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDTestNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDTestNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDTestNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsBackendIDTestOKBody get backends backend ID test o k body
// swagger:model GetBackendsBackendIDTestOKBody
type GetBackendsBackendIDTestOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*TestDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDTestOKBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDTestOKBodyAO0
	var getBackendsBackendIDTestOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getBackendsBackendIDTestOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getBackendsBackendIDTestOKBodyAO0

	// GetBackendsBackendIDTestOKBodyAO1
	var dataGetBackendsBackendIDTestOKBodyAO1 struct {
		Data []*TestDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetBackendsBackendIDTestOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetBackendsBackendIDTestOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDTestOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getBackendsBackendIDTestOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDTestOKBodyAO0)

	var dataGetBackendsBackendIDTestOKBodyAO1 struct {
		Data []*TestDataItem `json:"data"`
	}

	dataGetBackendsBackendIDTestOKBodyAO1.Data = o.Data

	jsonDataGetBackendsBackendIDTestOKBodyAO1, errGetBackendsBackendIDTestOKBodyAO1 := swag.WriteJSON(dataGetBackendsBackendIDTestOKBodyAO1)
	if errGetBackendsBackendIDTestOKBodyAO1 != nil {
		return nil, errGetBackendsBackendIDTestOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetBackendsBackendIDTestOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID test o k body
func (o *GetBackendsBackendIDTestOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBackendsBackendIDTestOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getBackendsBackendIdTestOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBackendsBackendIdTestOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDTestOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDTestOKBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDTestOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// test-data-item test data item
// swagger:model test-data-item
type TestDataItem struct {
	models.BackendTestParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *TestDataItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.BackendTestParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.BackendTestParams = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o TestDataItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.BackendTestParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this test data item
func (o *TestDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BackendTestParams
	if err := o.BackendTestParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *TestDataItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TestDataItem) UnmarshalBinary(b []byte) error {
	var res TestDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
