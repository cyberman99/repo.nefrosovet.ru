// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostBackendsOauth2OKCode is the HTTP code returned for type PostBackendsOauth2OK
const PostBackendsOauth2OKCode int = 200

/*PostBackendsOauth2OK Объект oauth2 бэкенда

swagger:response postBackendsOauth2OK
*/
type PostBackendsOauth2OK struct {

	/*
	  In: Body
	*/
	Payload *PostBackendsOauth2OKBody `json:"body,omitempty"`
}

// NewPostBackendsOauth2OK creates PostBackendsOauth2OK with default headers values
func NewPostBackendsOauth2OK() *PostBackendsOauth2OK {

	return &PostBackendsOauth2OK{}
}

// WithPayload adds the payload to the post backends oauth2 o k response
func (o *PostBackendsOauth2OK) WithPayload(payload *PostBackendsOauth2OKBody) *PostBackendsOauth2OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post backends oauth2 o k response
func (o *PostBackendsOauth2OK) SetPayload(payload *PostBackendsOauth2OKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBackendsOauth2OK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostBackendsOauth2MethodNotAllowedCode is the HTTP code returned for type PostBackendsOauth2MethodNotAllowed
const PostBackendsOauth2MethodNotAllowedCode int = 405

/*PostBackendsOauth2MethodNotAllowed Invalid Method

swagger:response postBackendsOauth2MethodNotAllowed
*/
type PostBackendsOauth2MethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PostBackendsOauth2MethodNotAllowedBody `json:"body,omitempty"`
}

// NewPostBackendsOauth2MethodNotAllowed creates PostBackendsOauth2MethodNotAllowed with default headers values
func NewPostBackendsOauth2MethodNotAllowed() *PostBackendsOauth2MethodNotAllowed {

	return &PostBackendsOauth2MethodNotAllowed{}
}

// WithPayload adds the payload to the post backends oauth2 method not allowed response
func (o *PostBackendsOauth2MethodNotAllowed) WithPayload(payload *PostBackendsOauth2MethodNotAllowedBody) *PostBackendsOauth2MethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post backends oauth2 method not allowed response
func (o *PostBackendsOauth2MethodNotAllowed) SetPayload(payload *PostBackendsOauth2MethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBackendsOauth2MethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostBackendsOauth2InternalServerErrorCode is the HTTP code returned for type PostBackendsOauth2InternalServerError
const PostBackendsOauth2InternalServerErrorCode int = 500

/*PostBackendsOauth2InternalServerError Internal server error

swagger:response postBackendsOauth2InternalServerError
*/
type PostBackendsOauth2InternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostBackendsOauth2InternalServerErrorBody `json:"body,omitempty"`
}

// NewPostBackendsOauth2InternalServerError creates PostBackendsOauth2InternalServerError with default headers values
func NewPostBackendsOauth2InternalServerError() *PostBackendsOauth2InternalServerError {

	return &PostBackendsOauth2InternalServerError{}
}

// WithPayload adds the payload to the post backends oauth2 internal server error response
func (o *PostBackendsOauth2InternalServerError) WithPayload(payload *PostBackendsOauth2InternalServerErrorBody) *PostBackendsOauth2InternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post backends oauth2 internal server error response
func (o *PostBackendsOauth2InternalServerError) SetPayload(payload *PostBackendsOauth2InternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostBackendsOauth2InternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
