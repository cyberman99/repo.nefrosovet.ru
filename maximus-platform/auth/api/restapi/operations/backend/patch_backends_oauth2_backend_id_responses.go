// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PatchBackendsOauth2BackendIDOKCode is the HTTP code returned for type PatchBackendsOauth2BackendIDOK
const PatchBackendsOauth2BackendIDOKCode int = 200

/*PatchBackendsOauth2BackendIDOK Объект oauth2 бэкенда

swagger:response patchBackendsOauth2BackendIdOK
*/
type PatchBackendsOauth2BackendIDOK struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsOauth2BackendIDOKBody `json:"body,omitempty"`
}

// NewPatchBackendsOauth2BackendIDOK creates PatchBackendsOauth2BackendIDOK with default headers values
func NewPatchBackendsOauth2BackendIDOK() *PatchBackendsOauth2BackendIDOK {

	return &PatchBackendsOauth2BackendIDOK{}
}

// WithPayload adds the payload to the patch backends oauth2 backend Id o k response
func (o *PatchBackendsOauth2BackendIDOK) WithPayload(payload *PatchBackendsOauth2BackendIDOKBody) *PatchBackendsOauth2BackendIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends oauth2 backend Id o k response
func (o *PatchBackendsOauth2BackendIDOK) SetPayload(payload *PatchBackendsOauth2BackendIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsOauth2BackendIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchBackendsOauth2BackendIDNotFoundCode is the HTTP code returned for type PatchBackendsOauth2BackendIDNotFound
const PatchBackendsOauth2BackendIDNotFoundCode int = 404

/*PatchBackendsOauth2BackendIDNotFound Not found

swagger:response patchBackendsOauth2BackendIdNotFound
*/
type PatchBackendsOauth2BackendIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsOauth2BackendIDNotFoundBody `json:"body,omitempty"`
}

// NewPatchBackendsOauth2BackendIDNotFound creates PatchBackendsOauth2BackendIDNotFound with default headers values
func NewPatchBackendsOauth2BackendIDNotFound() *PatchBackendsOauth2BackendIDNotFound {

	return &PatchBackendsOauth2BackendIDNotFound{}
}

// WithPayload adds the payload to the patch backends oauth2 backend Id not found response
func (o *PatchBackendsOauth2BackendIDNotFound) WithPayload(payload *PatchBackendsOauth2BackendIDNotFoundBody) *PatchBackendsOauth2BackendIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends oauth2 backend Id not found response
func (o *PatchBackendsOauth2BackendIDNotFound) SetPayload(payload *PatchBackendsOauth2BackendIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsOauth2BackendIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchBackendsOauth2BackendIDMethodNotAllowedCode is the HTTP code returned for type PatchBackendsOauth2BackendIDMethodNotAllowed
const PatchBackendsOauth2BackendIDMethodNotAllowedCode int = 405

/*PatchBackendsOauth2BackendIDMethodNotAllowed Invalid Method

swagger:response patchBackendsOauth2BackendIdMethodNotAllowed
*/
type PatchBackendsOauth2BackendIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsOauth2BackendIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPatchBackendsOauth2BackendIDMethodNotAllowed creates PatchBackendsOauth2BackendIDMethodNotAllowed with default headers values
func NewPatchBackendsOauth2BackendIDMethodNotAllowed() *PatchBackendsOauth2BackendIDMethodNotAllowed {

	return &PatchBackendsOauth2BackendIDMethodNotAllowed{}
}

// WithPayload adds the payload to the patch backends oauth2 backend Id method not allowed response
func (o *PatchBackendsOauth2BackendIDMethodNotAllowed) WithPayload(payload *PatchBackendsOauth2BackendIDMethodNotAllowedBody) *PatchBackendsOauth2BackendIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends oauth2 backend Id method not allowed response
func (o *PatchBackendsOauth2BackendIDMethodNotAllowed) SetPayload(payload *PatchBackendsOauth2BackendIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsOauth2BackendIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchBackendsOauth2BackendIDInternalServerErrorCode is the HTTP code returned for type PatchBackendsOauth2BackendIDInternalServerError
const PatchBackendsOauth2BackendIDInternalServerErrorCode int = 500

/*PatchBackendsOauth2BackendIDInternalServerError Internal server error

swagger:response patchBackendsOauth2BackendIdInternalServerError
*/
type PatchBackendsOauth2BackendIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsOauth2BackendIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewPatchBackendsOauth2BackendIDInternalServerError creates PatchBackendsOauth2BackendIDInternalServerError with default headers values
func NewPatchBackendsOauth2BackendIDInternalServerError() *PatchBackendsOauth2BackendIDInternalServerError {

	return &PatchBackendsOauth2BackendIDInternalServerError{}
}

// WithPayload adds the payload to the patch backends oauth2 backend Id internal server error response
func (o *PatchBackendsOauth2BackendIDInternalServerError) WithPayload(payload *PatchBackendsOauth2BackendIDInternalServerErrorBody) *PatchBackendsOauth2BackendIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends oauth2 backend Id internal server error response
func (o *PatchBackendsOauth2BackendIDInternalServerError) SetPayload(payload *PatchBackendsOauth2BackendIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsOauth2BackendIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
