// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PatchBackendsLdapBackendIDOKCode is the HTTP code returned for type PatchBackendsLdapBackendIDOK
const PatchBackendsLdapBackendIDOKCode int = 200

/*PatchBackendsLdapBackendIDOK Объект LDAP бэкенда

swagger:response patchBackendsLdapBackendIdOK
*/
type PatchBackendsLdapBackendIDOK struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsLdapBackendIDOKBody `json:"body,omitempty"`
}

// NewPatchBackendsLdapBackendIDOK creates PatchBackendsLdapBackendIDOK with default headers values
func NewPatchBackendsLdapBackendIDOK() *PatchBackendsLdapBackendIDOK {

	return &PatchBackendsLdapBackendIDOK{}
}

// WithPayload adds the payload to the patch backends ldap backend Id o k response
func (o *PatchBackendsLdapBackendIDOK) WithPayload(payload *PatchBackendsLdapBackendIDOKBody) *PatchBackendsLdapBackendIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends ldap backend Id o k response
func (o *PatchBackendsLdapBackendIDOK) SetPayload(payload *PatchBackendsLdapBackendIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsLdapBackendIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchBackendsLdapBackendIDNotFoundCode is the HTTP code returned for type PatchBackendsLdapBackendIDNotFound
const PatchBackendsLdapBackendIDNotFoundCode int = 404

/*PatchBackendsLdapBackendIDNotFound Not found

swagger:response patchBackendsLdapBackendIdNotFound
*/
type PatchBackendsLdapBackendIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsLdapBackendIDNotFoundBody `json:"body,omitempty"`
}

// NewPatchBackendsLdapBackendIDNotFound creates PatchBackendsLdapBackendIDNotFound with default headers values
func NewPatchBackendsLdapBackendIDNotFound() *PatchBackendsLdapBackendIDNotFound {

	return &PatchBackendsLdapBackendIDNotFound{}
}

// WithPayload adds the payload to the patch backends ldap backend Id not found response
func (o *PatchBackendsLdapBackendIDNotFound) WithPayload(payload *PatchBackendsLdapBackendIDNotFoundBody) *PatchBackendsLdapBackendIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends ldap backend Id not found response
func (o *PatchBackendsLdapBackendIDNotFound) SetPayload(payload *PatchBackendsLdapBackendIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsLdapBackendIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchBackendsLdapBackendIDMethodNotAllowedCode is the HTTP code returned for type PatchBackendsLdapBackendIDMethodNotAllowed
const PatchBackendsLdapBackendIDMethodNotAllowedCode int = 405

/*PatchBackendsLdapBackendIDMethodNotAllowed Invalid Method

swagger:response patchBackendsLdapBackendIdMethodNotAllowed
*/
type PatchBackendsLdapBackendIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsLdapBackendIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPatchBackendsLdapBackendIDMethodNotAllowed creates PatchBackendsLdapBackendIDMethodNotAllowed with default headers values
func NewPatchBackendsLdapBackendIDMethodNotAllowed() *PatchBackendsLdapBackendIDMethodNotAllowed {

	return &PatchBackendsLdapBackendIDMethodNotAllowed{}
}

// WithPayload adds the payload to the patch backends ldap backend Id method not allowed response
func (o *PatchBackendsLdapBackendIDMethodNotAllowed) WithPayload(payload *PatchBackendsLdapBackendIDMethodNotAllowedBody) *PatchBackendsLdapBackendIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends ldap backend Id method not allowed response
func (o *PatchBackendsLdapBackendIDMethodNotAllowed) SetPayload(payload *PatchBackendsLdapBackendIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsLdapBackendIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchBackendsLdapBackendIDInternalServerErrorCode is the HTTP code returned for type PatchBackendsLdapBackendIDInternalServerError
const PatchBackendsLdapBackendIDInternalServerErrorCode int = 500

/*PatchBackendsLdapBackendIDInternalServerError Internal server error

swagger:response patchBackendsLdapBackendIdInternalServerError
*/
type PatchBackendsLdapBackendIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PatchBackendsLdapBackendIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewPatchBackendsLdapBackendIDInternalServerError creates PatchBackendsLdapBackendIDInternalServerError with default headers values
func NewPatchBackendsLdapBackendIDInternalServerError() *PatchBackendsLdapBackendIDInternalServerError {

	return &PatchBackendsLdapBackendIDInternalServerError{}
}

// WithPayload adds the payload to the patch backends ldap backend Id internal server error response
func (o *PatchBackendsLdapBackendIDInternalServerError) WithPayload(payload *PatchBackendsLdapBackendIDInternalServerErrorBody) *PatchBackendsLdapBackendIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch backends ldap backend Id internal server error response
func (o *PatchBackendsLdapBackendIDInternalServerError) SetPayload(payload *PatchBackendsLdapBackendIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchBackendsLdapBackendIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
