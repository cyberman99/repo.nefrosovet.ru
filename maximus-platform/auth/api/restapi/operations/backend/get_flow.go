// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetFlowHandlerFunc turns a function with the right signature into a get flow handler
type GetFlowHandlerFunc func(GetFlowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFlowHandlerFunc) Handle(params GetFlowParams) middleware.Responder {
	return fn(params)
}

// GetFlowHandler interface for that can handle valid get flow params
type GetFlowHandler interface {
	Handle(GetFlowParams) middleware.Responder
}

// NewGetFlow creates a new http.Handler for the get flow operation
func NewGetFlow(ctx *middleware.Context, handler GetFlowHandler) *GetFlow {
	return &GetFlow{Context: ctx, Handler: handler}
}

/*GetFlow swagger:route GET /flow Backend getFlow

Коллекция последовательности аутентификации

*/
type GetFlow struct {
	Context *middleware.Context
	Handler GetFlowHandler
}

func (o *GetFlow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFlowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetFlowInternalServerErrorBody get flow internal server error body
// swagger:model GetFlowInternalServerErrorBody
type GetFlowInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetFlowInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetFlowInternalServerErrorBodyAO0
	var getFlowInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getFlowInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getFlowInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetFlowInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getFlowInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getFlowInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get flow internal server error body
func (o *GetFlowInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFlowInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFlowInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetFlowInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFlowMethodNotAllowedBody get flow method not allowed body
// swagger:model GetFlowMethodNotAllowedBody
type GetFlowMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetFlowMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetFlowMethodNotAllowedBodyAO0
	var getFlowMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getFlowMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getFlowMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetFlowMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getFlowMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getFlowMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get flow method not allowed body
func (o *GetFlowMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetFlowMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFlowMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetFlowMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetFlowOKBody get flow o k body
// swagger:model GetFlowOKBody
type GetFlowOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*FlowDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetFlowOKBody) UnmarshalJSON(raw []byte) error {
	// GetFlowOKBodyAO0
	var getFlowOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getFlowOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getFlowOKBodyAO0

	// GetFlowOKBodyAO1
	var dataGetFlowOKBodyAO1 struct {
		Data []*FlowDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetFlowOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetFlowOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetFlowOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getFlowOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getFlowOKBodyAO0)

	var dataGetFlowOKBodyAO1 struct {
		Data []*FlowDataItem `json:"data"`
	}

	dataGetFlowOKBodyAO1.Data = o.Data

	jsonDataGetFlowOKBodyAO1, errGetFlowOKBodyAO1 := swag.WriteJSON(dataGetFlowOKBodyAO1)
	if errGetFlowOKBodyAO1 != nil {
		return nil, errGetFlowOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetFlowOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get flow o k body
func (o *GetFlowOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetFlowOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getFlowOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getFlowOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetFlowOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetFlowOKBody) UnmarshalBinary(b []byte) error {
	var res GetFlowOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// flow-data-item flow data item
// swagger:model flow-data-item
type FlowDataItem struct {
	models.FlowParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *FlowDataItem) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.FlowParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.FlowParams = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o FlowDataItem) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.FlowParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this flow data item
func (o *FlowDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.FlowParams
	if err := o.FlowParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *FlowDataItem) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *FlowDataItem) UnmarshalBinary(b []byte) error {
	var res FlowDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
