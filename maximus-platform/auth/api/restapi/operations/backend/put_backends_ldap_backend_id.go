// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PutBackendsLdapBackendIDHandlerFunc turns a function with the right signature into a put backends ldap backend ID handler
type PutBackendsLdapBackendIDHandlerFunc func(PutBackendsLdapBackendIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutBackendsLdapBackendIDHandlerFunc) Handle(params PutBackendsLdapBackendIDParams) middleware.Responder {
	return fn(params)
}

// PutBackendsLdapBackendIDHandler interface for that can handle valid put backends ldap backend ID params
type PutBackendsLdapBackendIDHandler interface {
	Handle(PutBackendsLdapBackendIDParams) middleware.Responder
}

// NewPutBackendsLdapBackendID creates a new http.Handler for the put backends ldap backend ID operation
func NewPutBackendsLdapBackendID(ctx *middleware.Context, handler PutBackendsLdapBackendIDHandler) *PutBackendsLdapBackendID {
	return &PutBackendsLdapBackendID{Context: ctx, Handler: handler}
}

/*PutBackendsLdapBackendID swagger:route PUT /backends/ldap/{backendID} Backend putBackendsLdapBackendId

Изменение LDAP бэкенда

*/
type PutBackendsLdapBackendID struct {
	Context *middleware.Context
	Handler PutBackendsLdapBackendIDHandler
}

func (o *PutBackendsLdapBackendID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutBackendsLdapBackendIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutBackendsLdapBackendIDBody put backends ldap backend ID body
// swagger:model PutBackendsLdapBackendIDBody
type PutBackendsLdapBackendIDBody struct {
	models.BackendLdapParams

	models.PasswordObject

	models.BackendParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsLdapBackendIDBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsLdapBackendIDParamsBodyAO0
	var putBackendsLdapBackendIDParamsBodyAO0 models.BackendLdapParams
	if err := swag.ReadJSON(raw, &putBackendsLdapBackendIDParamsBodyAO0); err != nil {
		return err
	}
	o.BackendLdapParams = putBackendsLdapBackendIDParamsBodyAO0

	// PutBackendsLdapBackendIDParamsBodyAO1
	var putBackendsLdapBackendIDParamsBodyAO1 models.PasswordObject
	if err := swag.ReadJSON(raw, &putBackendsLdapBackendIDParamsBodyAO1); err != nil {
		return err
	}
	o.PasswordObject = putBackendsLdapBackendIDParamsBodyAO1

	// PutBackendsLdapBackendIDParamsBodyAO2
	var putBackendsLdapBackendIDParamsBodyAO2 models.BackendParams
	if err := swag.ReadJSON(raw, &putBackendsLdapBackendIDParamsBodyAO2); err != nil {
		return err
	}
	o.BackendParams = putBackendsLdapBackendIDParamsBodyAO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsLdapBackendIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	putBackendsLdapBackendIDParamsBodyAO0, err := swag.WriteJSON(o.BackendLdapParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsLdapBackendIDParamsBodyAO0)

	putBackendsLdapBackendIDParamsBodyAO1, err := swag.WriteJSON(o.PasswordObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsLdapBackendIDParamsBodyAO1)

	putBackendsLdapBackendIDParamsBodyAO2, err := swag.WriteJSON(o.BackendParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsLdapBackendIDParamsBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends ldap backend ID body
func (o *PutBackendsLdapBackendIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BackendLdapParams
	if err := o.BackendLdapParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PasswordObject
	if err := o.PasswordObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.BackendParams
	if err := o.BackendParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsLdapBackendIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsLdapBackendIDInternalServerErrorBody put backends ldap backend ID internal server error body
// swagger:model PutBackendsLdapBackendIDInternalServerErrorBody
type PutBackendsLdapBackendIDInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsLdapBackendIDInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsLdapBackendIDInternalServerErrorBodyAO0
	var putBackendsLdapBackendIDInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &putBackendsLdapBackendIDInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = putBackendsLdapBackendIDInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsLdapBackendIDInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putBackendsLdapBackendIDInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsLdapBackendIDInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends ldap backend ID internal server error body
func (o *PutBackendsLdapBackendIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsLdapBackendIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsLdapBackendIDMethodNotAllowedBody put backends ldap backend ID method not allowed body
// swagger:model PutBackendsLdapBackendIDMethodNotAllowedBody
type PutBackendsLdapBackendIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsLdapBackendIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsLdapBackendIDMethodNotAllowedBodyAO0
	var putBackendsLdapBackendIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putBackendsLdapBackendIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putBackendsLdapBackendIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsLdapBackendIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putBackendsLdapBackendIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsLdapBackendIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends ldap backend ID method not allowed body
func (o *PutBackendsLdapBackendIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsLdapBackendIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsLdapBackendIDNotFoundBody put backends ldap backend ID not found body
// swagger:model PutBackendsLdapBackendIDNotFoundBody
type PutBackendsLdapBackendIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsLdapBackendIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsLdapBackendIDNotFoundBodyAO0
	var putBackendsLdapBackendIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putBackendsLdapBackendIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putBackendsLdapBackendIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsLdapBackendIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putBackendsLdapBackendIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsLdapBackendIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends ldap backend ID not found body
func (o *PutBackendsLdapBackendIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsLdapBackendIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutBackendsLdapBackendIDOKBody put backends ldap backend ID o k body
// swagger:model PutBackendsLdapBackendIDOKBody
type PutBackendsLdapBackendIDOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*LdapDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutBackendsLdapBackendIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutBackendsLdapBackendIDOKBodyAO0
	var putBackendsLdapBackendIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putBackendsLdapBackendIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putBackendsLdapBackendIDOKBodyAO0

	// PutBackendsLdapBackendIDOKBodyAO1
	var dataPutBackendsLdapBackendIDOKBodyAO1 struct {
		Data []*LdapDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutBackendsLdapBackendIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutBackendsLdapBackendIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutBackendsLdapBackendIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putBackendsLdapBackendIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putBackendsLdapBackendIDOKBodyAO0)

	var dataPutBackendsLdapBackendIDOKBodyAO1 struct {
		Data []*LdapDataItem `json:"data"`
	}

	dataPutBackendsLdapBackendIDOKBodyAO1.Data = o.Data

	jsonDataPutBackendsLdapBackendIDOKBodyAO1, errPutBackendsLdapBackendIDOKBodyAO1 := swag.WriteJSON(dataPutBackendsLdapBackendIDOKBodyAO1)
	if errPutBackendsLdapBackendIDOKBodyAO1 != nil {
		return nil, errPutBackendsLdapBackendIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutBackendsLdapBackendIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put backends ldap backend ID o k body
func (o *PutBackendsLdapBackendIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutBackendsLdapBackendIDOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("putBackendsLdapBackendIdOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putBackendsLdapBackendIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutBackendsLdapBackendIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutBackendsLdapBackendIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
