// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetBackendsBackendIDGroupsHandlerFunc turns a function with the right signature into a get backends backend ID groups handler
type GetBackendsBackendIDGroupsHandlerFunc func(GetBackendsBackendIDGroupsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBackendsBackendIDGroupsHandlerFunc) Handle(params GetBackendsBackendIDGroupsParams) middleware.Responder {
	return fn(params)
}

// GetBackendsBackendIDGroupsHandler interface for that can handle valid get backends backend ID groups params
type GetBackendsBackendIDGroupsHandler interface {
	Handle(GetBackendsBackendIDGroupsParams) middleware.Responder
}

// NewGetBackendsBackendIDGroups creates a new http.Handler for the get backends backend ID groups operation
func NewGetBackendsBackendIDGroups(ctx *middleware.Context, handler GetBackendsBackendIDGroupsHandler) *GetBackendsBackendIDGroups {
	return &GetBackendsBackendIDGroups{Context: ctx, Handler: handler}
}

/*GetBackendsBackendIDGroups swagger:route GET /backends/{backendID}/groups Backend getBackendsBackendIdGroups

Коллекция соответствия групп бэкенда

*/
type GetBackendsBackendIDGroups struct {
	Context *middleware.Context
	Handler GetBackendsBackendIDGroupsHandler
}

func (o *GetBackendsBackendIDGroups) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBackendsBackendIDGroupsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBackendsBackendIDGroupsInternalServerErrorBody get backends backend ID groups internal server error body
// swagger:model GetBackendsBackendIDGroupsInternalServerErrorBody
type GetBackendsBackendIDGroupsInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDGroupsInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDGroupsInternalServerErrorBodyAO0
	var getBackendsBackendIDGroupsInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getBackendsBackendIDGroupsInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getBackendsBackendIDGroupsInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDGroupsInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsBackendIDGroupsInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDGroupsInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID groups internal server error body
func (o *GetBackendsBackendIDGroupsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDGroupsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsBackendIDGroupsMethodNotAllowedBody get backends backend ID groups method not allowed body
// swagger:model GetBackendsBackendIDGroupsMethodNotAllowedBody
type GetBackendsBackendIDGroupsMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDGroupsMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDGroupsMethodNotAllowedBodyAO0
	var getBackendsBackendIDGroupsMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getBackendsBackendIDGroupsMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getBackendsBackendIDGroupsMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDGroupsMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsBackendIDGroupsMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDGroupsMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID groups method not allowed body
func (o *GetBackendsBackendIDGroupsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDGroupsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsBackendIDGroupsNotFoundBody get backends backend ID groups not found body
// swagger:model GetBackendsBackendIDGroupsNotFoundBody
type GetBackendsBackendIDGroupsNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDGroupsNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDGroupsNotFoundBodyAO0
	var getBackendsBackendIDGroupsNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getBackendsBackendIDGroupsNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getBackendsBackendIDGroupsNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDGroupsNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsBackendIDGroupsNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDGroupsNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID groups not found body
func (o *GetBackendsBackendIDGroupsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDGroupsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsBackendIDGroupsOKBody get backends backend ID groups o k body
// swagger:model GetBackendsBackendIDGroupsOKBody
type GetBackendsBackendIDGroupsOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsBackendIDGroupsOKBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsBackendIDGroupsOKBodyAO0
	var getBackendsBackendIDGroupsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getBackendsBackendIDGroupsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getBackendsBackendIDGroupsOKBodyAO0

	// GetBackendsBackendIDGroupsOKBodyAO1
	var dataGetBackendsBackendIDGroupsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetBackendsBackendIDGroupsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetBackendsBackendIDGroupsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsBackendIDGroupsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getBackendsBackendIDGroupsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsBackendIDGroupsOKBodyAO0)

	var dataGetBackendsBackendIDGroupsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataGetBackendsBackendIDGroupsOKBodyAO1.Data = o.Data

	jsonDataGetBackendsBackendIDGroupsOKBodyAO1, errGetBackendsBackendIDGroupsOKBodyAO1 := swag.WriteJSON(dataGetBackendsBackendIDGroupsOKBodyAO1)
	if errGetBackendsBackendIDGroupsOKBodyAO1 != nil {
		return nil, errGetBackendsBackendIDGroupsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetBackendsBackendIDGroupsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends backend ID groups o k body
func (o *GetBackendsBackendIDGroupsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBackendsBackendIDGroupsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getBackendsBackendIdGroupsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getBackendsBackendIdGroupsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsBackendIDGroupsOKBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsBackendIDGroupsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
