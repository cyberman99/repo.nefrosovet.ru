// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetBackendsHandlerFunc turns a function with the right signature into a get backends handler
type GetBackendsHandlerFunc func(GetBackendsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBackendsHandlerFunc) Handle(params GetBackendsParams) middleware.Responder {
	return fn(params)
}

// GetBackendsHandler interface for that can handle valid get backends params
type GetBackendsHandler interface {
	Handle(GetBackendsParams) middleware.Responder
}

// NewGetBackends creates a new http.Handler for the get backends operation
func NewGetBackends(ctx *middleware.Context, handler GetBackendsHandler) *GetBackends {
	return &GetBackends{Context: ctx, Handler: handler}
}

/*GetBackends swagger:route GET /backends Backend getBackends

Коллекция бэкендов

*/
type GetBackends struct {
	Context *middleware.Context
	Handler GetBackendsHandler
}

func (o *GetBackends) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetBackendsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBackendsInternalServerErrorBody get backends internal server error body
// swagger:model GetBackendsInternalServerErrorBody
type GetBackendsInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsInternalServerErrorBodyAO0
	var getBackendsInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getBackendsInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getBackendsInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends internal server error body
func (o *GetBackendsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsMethodNotAllowedBody get backends method not allowed body
// swagger:model GetBackendsMethodNotAllowedBody
type GetBackendsMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsMethodNotAllowedBodyAO0
	var getBackendsMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getBackendsMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getBackendsMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getBackendsMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends method not allowed body
func (o *GetBackendsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetBackendsOKBody get backends o k body
// swagger:model GetBackendsOKBody
type GetBackendsOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []interface{} `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetBackendsOKBody) UnmarshalJSON(raw []byte) error {
	// GetBackendsOKBodyAO0
	var getBackendsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getBackendsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getBackendsOKBodyAO0

	// GetBackendsOKBodyAO1
	var dataGetBackendsOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetBackendsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetBackendsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetBackendsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getBackendsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getBackendsOKBodyAO0)

	var dataGetBackendsOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}

	dataGetBackendsOKBodyAO1.Data = o.Data

	jsonDataGetBackendsOKBodyAO1, errGetBackendsOKBodyAO1 := swag.WriteJSON(dataGetBackendsOKBodyAO1)
	if errGetBackendsOKBodyAO1 != nil {
		return nil, errGetBackendsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetBackendsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get backends o k body
func (o *GetBackendsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBackendsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getBackendsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBackendsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBackendsOKBody) UnmarshalBinary(b []byte) error {
	var res GetBackendsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
