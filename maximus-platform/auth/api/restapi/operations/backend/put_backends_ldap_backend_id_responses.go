// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutBackendsLdapBackendIDOKCode is the HTTP code returned for type PutBackendsLdapBackendIDOK
const PutBackendsLdapBackendIDOKCode int = 200

/*PutBackendsLdapBackendIDOK Объект LDAP бэкенда

swagger:response putBackendsLdapBackendIdOK
*/
type PutBackendsLdapBackendIDOK struct {

	/*
	  In: Body
	*/
	Payload *PutBackendsLdapBackendIDOKBody `json:"body,omitempty"`
}

// NewPutBackendsLdapBackendIDOK creates PutBackendsLdapBackendIDOK with default headers values
func NewPutBackendsLdapBackendIDOK() *PutBackendsLdapBackendIDOK {

	return &PutBackendsLdapBackendIDOK{}
}

// WithPayload adds the payload to the put backends ldap backend Id o k response
func (o *PutBackendsLdapBackendIDOK) WithPayload(payload *PutBackendsLdapBackendIDOKBody) *PutBackendsLdapBackendIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put backends ldap backend Id o k response
func (o *PutBackendsLdapBackendIDOK) SetPayload(payload *PutBackendsLdapBackendIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutBackendsLdapBackendIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutBackendsLdapBackendIDNotFoundCode is the HTTP code returned for type PutBackendsLdapBackendIDNotFound
const PutBackendsLdapBackendIDNotFoundCode int = 404

/*PutBackendsLdapBackendIDNotFound Not found

swagger:response putBackendsLdapBackendIdNotFound
*/
type PutBackendsLdapBackendIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *PutBackendsLdapBackendIDNotFoundBody `json:"body,omitempty"`
}

// NewPutBackendsLdapBackendIDNotFound creates PutBackendsLdapBackendIDNotFound with default headers values
func NewPutBackendsLdapBackendIDNotFound() *PutBackendsLdapBackendIDNotFound {

	return &PutBackendsLdapBackendIDNotFound{}
}

// WithPayload adds the payload to the put backends ldap backend Id not found response
func (o *PutBackendsLdapBackendIDNotFound) WithPayload(payload *PutBackendsLdapBackendIDNotFoundBody) *PutBackendsLdapBackendIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put backends ldap backend Id not found response
func (o *PutBackendsLdapBackendIDNotFound) SetPayload(payload *PutBackendsLdapBackendIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutBackendsLdapBackendIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutBackendsLdapBackendIDMethodNotAllowedCode is the HTTP code returned for type PutBackendsLdapBackendIDMethodNotAllowed
const PutBackendsLdapBackendIDMethodNotAllowedCode int = 405

/*PutBackendsLdapBackendIDMethodNotAllowed Invalid Method

swagger:response putBackendsLdapBackendIdMethodNotAllowed
*/
type PutBackendsLdapBackendIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PutBackendsLdapBackendIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPutBackendsLdapBackendIDMethodNotAllowed creates PutBackendsLdapBackendIDMethodNotAllowed with default headers values
func NewPutBackendsLdapBackendIDMethodNotAllowed() *PutBackendsLdapBackendIDMethodNotAllowed {

	return &PutBackendsLdapBackendIDMethodNotAllowed{}
}

// WithPayload adds the payload to the put backends ldap backend Id method not allowed response
func (o *PutBackendsLdapBackendIDMethodNotAllowed) WithPayload(payload *PutBackendsLdapBackendIDMethodNotAllowedBody) *PutBackendsLdapBackendIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put backends ldap backend Id method not allowed response
func (o *PutBackendsLdapBackendIDMethodNotAllowed) SetPayload(payload *PutBackendsLdapBackendIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutBackendsLdapBackendIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutBackendsLdapBackendIDInternalServerErrorCode is the HTTP code returned for type PutBackendsLdapBackendIDInternalServerError
const PutBackendsLdapBackendIDInternalServerErrorCode int = 500

/*PutBackendsLdapBackendIDInternalServerError Internal server error

swagger:response putBackendsLdapBackendIdInternalServerError
*/
type PutBackendsLdapBackendIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PutBackendsLdapBackendIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewPutBackendsLdapBackendIDInternalServerError creates PutBackendsLdapBackendIDInternalServerError with default headers values
func NewPutBackendsLdapBackendIDInternalServerError() *PutBackendsLdapBackendIDInternalServerError {

	return &PutBackendsLdapBackendIDInternalServerError{}
}

// WithPayload adds the payload to the put backends ldap backend Id internal server error response
func (o *PutBackendsLdapBackendIDInternalServerError) WithPayload(payload *PutBackendsLdapBackendIDInternalServerErrorBody) *PutBackendsLdapBackendIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put backends ldap backend Id internal server error response
func (o *PutBackendsLdapBackendIDInternalServerError) SetPayload(payload *PutBackendsLdapBackendIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutBackendsLdapBackendIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
