// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PostFlowHandlerFunc turns a function with the right signature into a post flow handler
type PostFlowHandlerFunc func(PostFlowParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFlowHandlerFunc) Handle(params PostFlowParams) middleware.Responder {
	return fn(params)
}

// PostFlowHandler interface for that can handle valid post flow params
type PostFlowHandler interface {
	Handle(PostFlowParams) middleware.Responder
}

// NewPostFlow creates a new http.Handler for the post flow operation
func NewPostFlow(ctx *middleware.Context, handler PostFlowHandler) *PostFlow {
	return &PostFlow{Context: ctx, Handler: handler}
}

/*PostFlow swagger:route POST /flow Backend postFlow

Редактирование последовательности аутентификации

*/
type PostFlow struct {
	Context *middleware.Context
	Handler PostFlowHandler
}

func (o *PostFlow) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostFlowParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostFlowInternalServerErrorBody post flow internal server error body
// swagger:model PostFlowInternalServerErrorBody
type PostFlowInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostFlowInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostFlowInternalServerErrorBodyAO0
	var postFlowInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &postFlowInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = postFlowInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostFlowInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postFlowInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postFlowInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post flow internal server error body
func (o *PostFlowInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostFlowInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFlowInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostFlowInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostFlowMethodNotAllowedBody post flow method not allowed body
// swagger:model PostFlowMethodNotAllowedBody
type PostFlowMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostFlowMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostFlowMethodNotAllowedBodyAO0
	var postFlowMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postFlowMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postFlowMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostFlowMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postFlowMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postFlowMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post flow method not allowed body
func (o *PostFlowMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostFlowMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFlowMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostFlowMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostFlowNotFoundBody post flow not found body
// swagger:model PostFlowNotFoundBody
type PostFlowNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostFlowNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PostFlowNotFoundBodyAO0
	var postFlowNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &postFlowNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = postFlowNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostFlowNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postFlowNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postFlowNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post flow not found body
func (o *PostFlowNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostFlowNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFlowNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostFlowNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostFlowOKBody post flow o k body
// swagger:model PostFlowOKBody
type PostFlowOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*FlowDataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostFlowOKBody) UnmarshalJSON(raw []byte) error {
	// PostFlowOKBodyAO0
	var postFlowOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postFlowOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postFlowOKBodyAO0

	// PostFlowOKBodyAO1
	var dataPostFlowOKBodyAO1 struct {
		Data []*FlowDataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostFlowOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostFlowOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostFlowOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postFlowOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postFlowOKBodyAO0)

	var dataPostFlowOKBodyAO1 struct {
		Data []*FlowDataItem `json:"data"`
	}

	dataPostFlowOKBodyAO1.Data = o.Data

	jsonDataPostFlowOKBodyAO1, errPostFlowOKBodyAO1 := swag.WriteJSON(dataPostFlowOKBodyAO1)
	if errPostFlowOKBodyAO1 != nil {
		return nil, errPostFlowOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostFlowOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post flow o k body
func (o *PostFlowOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFlowOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("postFlowOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postFlowOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostFlowOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFlowOKBody) UnmarshalBinary(b []byte) error {
	var res PostFlowOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostFlowParamsBodyItems0 post flow params body items0
// swagger:model PostFlowParamsBodyItems0
type PostFlowParamsBodyItems0 struct {
	models.FlowParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostFlowParamsBodyItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.FlowParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.FlowParams = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostFlowParamsBodyItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.FlowParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post flow params body items0
func (o *PostFlowParamsBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.FlowParams
	if err := o.FlowParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostFlowParamsBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFlowParamsBodyItems0) UnmarshalBinary(b []byte) error {
	var res PostFlowParamsBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
