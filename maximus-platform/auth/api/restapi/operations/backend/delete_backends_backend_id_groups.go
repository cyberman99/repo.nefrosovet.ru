// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// DeleteBackendsBackendIDGroupsHandlerFunc turns a function with the right signature into a delete backends backend ID groups handler
type DeleteBackendsBackendIDGroupsHandlerFunc func(DeleteBackendsBackendIDGroupsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteBackendsBackendIDGroupsHandlerFunc) Handle(params DeleteBackendsBackendIDGroupsParams) middleware.Responder {
	return fn(params)
}

// DeleteBackendsBackendIDGroupsHandler interface for that can handle valid delete backends backend ID groups params
type DeleteBackendsBackendIDGroupsHandler interface {
	Handle(DeleteBackendsBackendIDGroupsParams) middleware.Responder
}

// NewDeleteBackendsBackendIDGroups creates a new http.Handler for the delete backends backend ID groups operation
func NewDeleteBackendsBackendIDGroups(ctx *middleware.Context, handler DeleteBackendsBackendIDGroupsHandler) *DeleteBackendsBackendIDGroups {
	return &DeleteBackendsBackendIDGroups{Context: ctx, Handler: handler}
}

/*DeleteBackendsBackendIDGroups swagger:route DELETE /backends/{backendID}/groups Backend deleteBackendsBackendIdGroups

Удаление соответствия групп бэкенда

*/
type DeleteBackendsBackendIDGroups struct {
	Context *middleware.Context
	Handler DeleteBackendsBackendIDGroupsHandler
}

func (o *DeleteBackendsBackendIDGroups) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteBackendsBackendIDGroupsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {
	models.BackendGroupParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.BackendGroupParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.BackendGroupParams = aO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.BackendGroupParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BackendGroupParams
	if err := o.BackendGroupParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteBackendsBackendIDGroupsInternalServerErrorBody delete backends backend ID groups internal server error body
// swagger:model DeleteBackendsBackendIDGroupsInternalServerErrorBody
type DeleteBackendsBackendIDGroupsInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteBackendsBackendIDGroupsInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// DeleteBackendsBackendIDGroupsInternalServerErrorBodyAO0
	var deleteBackendsBackendIDGroupsInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &deleteBackendsBackendIDGroupsInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = deleteBackendsBackendIDGroupsInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteBackendsBackendIDGroupsInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	deleteBackendsBackendIDGroupsInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteBackendsBackendIDGroupsInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete backends backend ID groups internal server error body
func (o *DeleteBackendsBackendIDGroupsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteBackendsBackendIDGroupsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteBackendsBackendIDGroupsMethodNotAllowedBody delete backends backend ID groups method not allowed body
// swagger:model DeleteBackendsBackendIDGroupsMethodNotAllowedBody
type DeleteBackendsBackendIDGroupsMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteBackendsBackendIDGroupsMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// DeleteBackendsBackendIDGroupsMethodNotAllowedBodyAO0
	var deleteBackendsBackendIDGroupsMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &deleteBackendsBackendIDGroupsMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = deleteBackendsBackendIDGroupsMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteBackendsBackendIDGroupsMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	deleteBackendsBackendIDGroupsMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteBackendsBackendIDGroupsMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete backends backend ID groups method not allowed body
func (o *DeleteBackendsBackendIDGroupsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res DeleteBackendsBackendIDGroupsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteBackendsBackendIDGroupsNotFoundBody delete backends backend ID groups not found body
// swagger:model DeleteBackendsBackendIDGroupsNotFoundBody
type DeleteBackendsBackendIDGroupsNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteBackendsBackendIDGroupsNotFoundBody) UnmarshalJSON(raw []byte) error {
	// DeleteBackendsBackendIDGroupsNotFoundBodyAO0
	var deleteBackendsBackendIDGroupsNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &deleteBackendsBackendIDGroupsNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = deleteBackendsBackendIDGroupsNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteBackendsBackendIDGroupsNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	deleteBackendsBackendIDGroupsNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteBackendsBackendIDGroupsNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete backends backend ID groups not found body
func (o *DeleteBackendsBackendIDGroupsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteBackendsBackendIDGroupsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteBackendsBackendIDGroupsOKBody delete backends backend ID groups o k body
// swagger:model DeleteBackendsBackendIDGroupsOKBody
type DeleteBackendsBackendIDGroupsOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteBackendsBackendIDGroupsOKBody) UnmarshalJSON(raw []byte) error {
	// DeleteBackendsBackendIDGroupsOKBodyAO0
	var deleteBackendsBackendIDGroupsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &deleteBackendsBackendIDGroupsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = deleteBackendsBackendIDGroupsOKBodyAO0

	// DeleteBackendsBackendIDGroupsOKBodyAO1
	var dataDeleteBackendsBackendIDGroupsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataDeleteBackendsBackendIDGroupsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataDeleteBackendsBackendIDGroupsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteBackendsBackendIDGroupsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	deleteBackendsBackendIDGroupsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteBackendsBackendIDGroupsOKBodyAO0)

	var dataDeleteBackendsBackendIDGroupsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataDeleteBackendsBackendIDGroupsOKBodyAO1.Data = o.Data

	jsonDataDeleteBackendsBackendIDGroupsOKBodyAO1, errDeleteBackendsBackendIDGroupsOKBodyAO1 := swag.WriteJSON(dataDeleteBackendsBackendIDGroupsOKBodyAO1)
	if errDeleteBackendsBackendIDGroupsOKBodyAO1 != nil {
		return nil, errDeleteBackendsBackendIDGroupsOKBodyAO1
	}
	_parts = append(_parts, jsonDataDeleteBackendsBackendIDGroupsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete backends backend ID groups o k body
func (o *DeleteBackendsBackendIDGroupsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteBackendsBackendIDGroupsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("deleteBackendsBackendIdGroupsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteBackendsBackendIdGroupsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteBackendsBackendIDGroupsOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteBackendsBackendIDGroupsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
