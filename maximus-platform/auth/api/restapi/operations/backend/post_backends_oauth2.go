// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PostBackendsOauth2HandlerFunc turns a function with the right signature into a post backends oauth2 handler
type PostBackendsOauth2HandlerFunc func(PostBackendsOauth2Params) middleware.Responder

// Handle executing the request and returning a response
func (fn PostBackendsOauth2HandlerFunc) Handle(params PostBackendsOauth2Params) middleware.Responder {
	return fn(params)
}

// PostBackendsOauth2Handler interface for that can handle valid post backends oauth2 params
type PostBackendsOauth2Handler interface {
	Handle(PostBackendsOauth2Params) middleware.Responder
}

// NewPostBackendsOauth2 creates a new http.Handler for the post backends oauth2 operation
func NewPostBackendsOauth2(ctx *middleware.Context, handler PostBackendsOauth2Handler) *PostBackendsOauth2 {
	return &PostBackendsOauth2{Context: ctx, Handler: handler}
}

/*PostBackendsOauth2 swagger:route POST /backends/oauth2 Backend postBackendsOauth2

Создание oauth2 бэкенда

*/
type PostBackendsOauth2 struct {
	Context *middleware.Context
	Handler PostBackendsOauth2Handler
}

func (o *PostBackendsOauth2) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostBackendsOauth2Params()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostBackendsOauth2Body post backends oauth2 body
// swagger:model PostBackendsOauth2Body
type PostBackendsOauth2Body struct {
	models.BackendOauth2Params

	models.BackendParams

	models.BackendOauth2IDParam
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostBackendsOauth2Body) UnmarshalJSON(raw []byte) error {
	// PostBackendsOauth2ParamsBodyAO0
	var postBackendsOauth2ParamsBodyAO0 models.BackendOauth2Params
	if err := swag.ReadJSON(raw, &postBackendsOauth2ParamsBodyAO0); err != nil {
		return err
	}
	o.BackendOauth2Params = postBackendsOauth2ParamsBodyAO0

	// PostBackendsOauth2ParamsBodyAO1
	var postBackendsOauth2ParamsBodyAO1 models.BackendParams
	if err := swag.ReadJSON(raw, &postBackendsOauth2ParamsBodyAO1); err != nil {
		return err
	}
	o.BackendParams = postBackendsOauth2ParamsBodyAO1

	// PostBackendsOauth2ParamsBodyAO2
	var postBackendsOauth2ParamsBodyAO2 models.BackendOauth2IDParam
	if err := swag.ReadJSON(raw, &postBackendsOauth2ParamsBodyAO2); err != nil {
		return err
	}
	o.BackendOauth2IDParam = postBackendsOauth2ParamsBodyAO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostBackendsOauth2Body) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	postBackendsOauth2ParamsBodyAO0, err := swag.WriteJSON(o.BackendOauth2Params)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postBackendsOauth2ParamsBodyAO0)

	postBackendsOauth2ParamsBodyAO1, err := swag.WriteJSON(o.BackendParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postBackendsOauth2ParamsBodyAO1)

	postBackendsOauth2ParamsBodyAO2, err := swag.WriteJSON(o.BackendOauth2IDParam)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postBackendsOauth2ParamsBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post backends oauth2 body
func (o *PostBackendsOauth2Body) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.BackendOauth2Params
	if err := o.BackendOauth2Params.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.BackendParams
	if err := o.BackendParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.BackendOauth2IDParam
	if err := o.BackendOauth2IDParam.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostBackendsOauth2Body) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBackendsOauth2Body) UnmarshalBinary(b []byte) error {
	var res PostBackendsOauth2Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostBackendsOauth2InternalServerErrorBody post backends oauth2 internal server error body
// swagger:model PostBackendsOauth2InternalServerErrorBody
type PostBackendsOauth2InternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostBackendsOauth2InternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostBackendsOauth2InternalServerErrorBodyAO0
	var postBackendsOauth2InternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &postBackendsOauth2InternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = postBackendsOauth2InternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostBackendsOauth2InternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postBackendsOauth2InternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postBackendsOauth2InternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post backends oauth2 internal server error body
func (o *PostBackendsOauth2InternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostBackendsOauth2InternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBackendsOauth2InternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostBackendsOauth2InternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostBackendsOauth2MethodNotAllowedBody post backends oauth2 method not allowed body
// swagger:model PostBackendsOauth2MethodNotAllowedBody
type PostBackendsOauth2MethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostBackendsOauth2MethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostBackendsOauth2MethodNotAllowedBodyAO0
	var postBackendsOauth2MethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postBackendsOauth2MethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postBackendsOauth2MethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostBackendsOauth2MethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postBackendsOauth2MethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postBackendsOauth2MethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post backends oauth2 method not allowed body
func (o *PostBackendsOauth2MethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostBackendsOauth2MethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBackendsOauth2MethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostBackendsOauth2MethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostBackendsOauth2OKBody post backends oauth2 o k body
// swagger:model PostBackendsOauth2OKBody
type PostBackendsOauth2OKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*Oauth2DataItem `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostBackendsOauth2OKBody) UnmarshalJSON(raw []byte) error {
	// PostBackendsOauth2OKBodyAO0
	var postBackendsOauth2OKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postBackendsOauth2OKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postBackendsOauth2OKBodyAO0

	// PostBackendsOauth2OKBodyAO1
	var dataPostBackendsOauth2OKBodyAO1 struct {
		Data []*Oauth2DataItem `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostBackendsOauth2OKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostBackendsOauth2OKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostBackendsOauth2OKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postBackendsOauth2OKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postBackendsOauth2OKBodyAO0)

	var dataPostBackendsOauth2OKBodyAO1 struct {
		Data []*Oauth2DataItem `json:"data"`
	}

	dataPostBackendsOauth2OKBodyAO1.Data = o.Data

	jsonDataPostBackendsOauth2OKBodyAO1, errPostBackendsOauth2OKBodyAO1 := swag.WriteJSON(dataPostBackendsOauth2OKBodyAO1)
	if errPostBackendsOauth2OKBodyAO1 != nil {
		return nil, errPostBackendsOauth2OKBodyAO1
	}
	_parts = append(_parts, jsonDataPostBackendsOauth2OKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post backends oauth2 o k body
func (o *PostBackendsOauth2OKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostBackendsOauth2OKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("postBackendsOauth2OK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postBackendsOauth2OK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostBackendsOauth2OKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostBackendsOauth2OKBody) UnmarshalBinary(b []byte) error {
	var res PostBackendsOauth2OKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
