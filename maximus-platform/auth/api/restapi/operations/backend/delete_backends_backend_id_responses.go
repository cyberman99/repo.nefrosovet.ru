// Code generated by go-swagger; DO NOT EDIT.

package backend

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteBackendsBackendIDOKCode is the HTTP code returned for type DeleteBackendsBackendIDOK
const DeleteBackendsBackendIDOKCode int = 200

/*DeleteBackendsBackendIDOK SUCCESS

swagger:response deleteBackendsBackendIdOK
*/
type DeleteBackendsBackendIDOK struct {

	/*
	  In: Body
	*/
	Payload *DeleteBackendsBackendIDOKBody `json:"body,omitempty"`
}

// NewDeleteBackendsBackendIDOK creates DeleteBackendsBackendIDOK with default headers values
func NewDeleteBackendsBackendIDOK() *DeleteBackendsBackendIDOK {

	return &DeleteBackendsBackendIDOK{}
}

// WithPayload adds the payload to the delete backends backend Id o k response
func (o *DeleteBackendsBackendIDOK) WithPayload(payload *DeleteBackendsBackendIDOKBody) *DeleteBackendsBackendIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete backends backend Id o k response
func (o *DeleteBackendsBackendIDOK) SetPayload(payload *DeleteBackendsBackendIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBackendsBackendIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteBackendsBackendIDNotFoundCode is the HTTP code returned for type DeleteBackendsBackendIDNotFound
const DeleteBackendsBackendIDNotFoundCode int = 404

/*DeleteBackendsBackendIDNotFound Not found

swagger:response deleteBackendsBackendIdNotFound
*/
type DeleteBackendsBackendIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *DeleteBackendsBackendIDNotFoundBody `json:"body,omitempty"`
}

// NewDeleteBackendsBackendIDNotFound creates DeleteBackendsBackendIDNotFound with default headers values
func NewDeleteBackendsBackendIDNotFound() *DeleteBackendsBackendIDNotFound {

	return &DeleteBackendsBackendIDNotFound{}
}

// WithPayload adds the payload to the delete backends backend Id not found response
func (o *DeleteBackendsBackendIDNotFound) WithPayload(payload *DeleteBackendsBackendIDNotFoundBody) *DeleteBackendsBackendIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete backends backend Id not found response
func (o *DeleteBackendsBackendIDNotFound) SetPayload(payload *DeleteBackendsBackendIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBackendsBackendIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteBackendsBackendIDMethodNotAllowedCode is the HTTP code returned for type DeleteBackendsBackendIDMethodNotAllowed
const DeleteBackendsBackendIDMethodNotAllowedCode int = 405

/*DeleteBackendsBackendIDMethodNotAllowed Invalid Method

swagger:response deleteBackendsBackendIdMethodNotAllowed
*/
type DeleteBackendsBackendIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *DeleteBackendsBackendIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewDeleteBackendsBackendIDMethodNotAllowed creates DeleteBackendsBackendIDMethodNotAllowed with default headers values
func NewDeleteBackendsBackendIDMethodNotAllowed() *DeleteBackendsBackendIDMethodNotAllowed {

	return &DeleteBackendsBackendIDMethodNotAllowed{}
}

// WithPayload adds the payload to the delete backends backend Id method not allowed response
func (o *DeleteBackendsBackendIDMethodNotAllowed) WithPayload(payload *DeleteBackendsBackendIDMethodNotAllowedBody) *DeleteBackendsBackendIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete backends backend Id method not allowed response
func (o *DeleteBackendsBackendIDMethodNotAllowed) SetPayload(payload *DeleteBackendsBackendIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBackendsBackendIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteBackendsBackendIDInternalServerErrorCode is the HTTP code returned for type DeleteBackendsBackendIDInternalServerError
const DeleteBackendsBackendIDInternalServerErrorCode int = 500

/*DeleteBackendsBackendIDInternalServerError Internal server error

swagger:response deleteBackendsBackendIdInternalServerError
*/
type DeleteBackendsBackendIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *DeleteBackendsBackendIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewDeleteBackendsBackendIDInternalServerError creates DeleteBackendsBackendIDInternalServerError with default headers values
func NewDeleteBackendsBackendIDInternalServerError() *DeleteBackendsBackendIDInternalServerError {

	return &DeleteBackendsBackendIDInternalServerError{}
}

// WithPayload adds the payload to the delete backends backend Id internal server error response
func (o *DeleteBackendsBackendIDInternalServerError) WithPayload(payload *DeleteBackendsBackendIDInternalServerErrorBody) *DeleteBackendsBackendIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete backends backend Id internal server error response
func (o *DeleteBackendsBackendIDInternalServerError) SetPayload(payload *DeleteBackendsBackendIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteBackendsBackendIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
