// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/admin"
	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/auth"
	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/backend"
	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/client"
	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/event"
	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/j_w_k"
	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/role"
	"repo.nefrosovet.ru/maximus-platform/auth/api/restapi/operations/token"
)

// NewAuthAPI creates a new Auth instance
func NewAuthAPI(spec *loads.Document) *AuthAPI {
	return &AuthAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		BackendDeleteBackendsBackendIDHandler: backend.DeleteBackendsBackendIDHandlerFunc(func(params backend.DeleteBackendsBackendIDParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendDeleteBackendsBackendID has not yet been implemented")
		}),
		BackendDeleteBackendsBackendIDGroupsHandler: backend.DeleteBackendsBackendIDGroupsHandlerFunc(func(params backend.DeleteBackendsBackendIDGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendDeleteBackendsBackendIDGroups has not yet been implemented")
		}),
		ClientDeleteClientsClientIDHandler: client.DeleteClientsClientIDHandlerFunc(func(params client.DeleteClientsClientIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientDeleteClientsClientID has not yet been implemented")
		}),
		RoleDeleteRolesRoleIDHandler: role.DeleteRolesRoleIDHandlerFunc(func(params role.DeleteRolesRoleIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RoleDeleteRolesRoleID has not yet been implemented")
		}),
		RoleDeleteRolesRoleIDUsersUserIDHandler: role.DeleteRolesRoleIDUsersUserIDHandlerFunc(func(params role.DeleteRolesRoleIDUsersUserIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RoleDeleteRolesRoleIDUsersUserID has not yet been implemented")
		}),
		BackendGetBackendsHandler: backend.GetBackendsHandlerFunc(func(params backend.GetBackendsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendGetBackends has not yet been implemented")
		}),
		BackendGetBackendsBackendIDHandler: backend.GetBackendsBackendIDHandlerFunc(func(params backend.GetBackendsBackendIDParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendGetBackendsBackendID has not yet been implemented")
		}),
		BackendGetBackendsBackendIDGroupsHandler: backend.GetBackendsBackendIDGroupsHandlerFunc(func(params backend.GetBackendsBackendIDGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendGetBackendsBackendIDGroups has not yet been implemented")
		}),
		BackendGetBackendsBackendIDTestHandler: backend.GetBackendsBackendIDTestHandlerFunc(func(params backend.GetBackendsBackendIDTestParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendGetBackendsBackendIDTest has not yet been implemented")
		}),
		ClientGetClientsHandler: client.GetClientsHandlerFunc(func(params client.GetClientsParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientGetClients has not yet been implemented")
		}),
		ClientGetClientsClientIDHandler: client.GetClientsClientIDHandlerFunc(func(params client.GetClientsClientIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientGetClientsClientID has not yet been implemented")
		}),
		EventGetEventsHandler: event.GetEventsHandlerFunc(func(params event.GetEventsParams) middleware.Responder {
			return middleware.NotImplemented("operation EventGetEvents has not yet been implemented")
		}),
		EventGetEventsEventIDHandler: event.GetEventsEventIDHandlerFunc(func(params event.GetEventsEventIDParams) middleware.Responder {
			return middleware.NotImplemented("operation EventGetEventsEventID has not yet been implemented")
		}),
		BackendGetFlowHandler: backend.GetFlowHandlerFunc(func(params backend.GetFlowParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendGetFlow has not yet been implemented")
		}),
		JWKGetJwkHandler: j_w_k.GetJwkHandlerFunc(func(params j_w_k.GetJwkParams) middleware.Responder {
			return middleware.NotImplemented("operation JWKGetJwk has not yet been implemented")
		}),
		AuthGetOauth2BackendIDHandler: auth.GetOauth2BackendIDHandlerFunc(func(params auth.GetOauth2BackendIDParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthGetOauth2BackendID has not yet been implemented")
		}),
		RoleGetRolesHandler: role.GetRolesHandlerFunc(func(params role.GetRolesParams) middleware.Responder {
			return middleware.NotImplemented("operation RoleGetRoles has not yet been implemented")
		}),
		RoleGetRolesRoleIDHandler: role.GetRolesRoleIDHandlerFunc(func(params role.GetRolesRoleIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RoleGetRolesRoleID has not yet been implemented")
		}),
		RoleGetRolesRoleIDUsersHandler: role.GetRolesRoleIDUsersHandlerFunc(func(params role.GetRolesRoleIDUsersParams) middleware.Responder {
			return middleware.NotImplemented("operation RoleGetRolesRoleIDUsers has not yet been implemented")
		}),
		TokenGetWhoamiHandler: token.GetWhoamiHandlerFunc(func(params token.GetWhoamiParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation TokenGetWhoami has not yet been implemented")
		}),
		BackendPatchBackendsLdapBackendIDHandler: backend.PatchBackendsLdapBackendIDHandlerFunc(func(params backend.PatchBackendsLdapBackendIDParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendPatchBackendsLdapBackendID has not yet been implemented")
		}),
		BackendPatchBackendsOauth2BackendIDHandler: backend.PatchBackendsOauth2BackendIDHandlerFunc(func(params backend.PatchBackendsOauth2BackendIDParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendPatchBackendsOauth2BackendID has not yet been implemented")
		}),
		ClientPatchClientsClientIDHandler: client.PatchClientsClientIDHandlerFunc(func(params client.PatchClientsClientIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientPatchClientsClientID has not yet been implemented")
		}),
		AdminPostAdminHandler: admin.PostAdminHandlerFunc(func(params admin.PostAdminParams) middleware.Responder {
			return middleware.NotImplemented("operation AdminPostAdmin has not yet been implemented")
		}),
		BackendPostBackendsBackendIDGroupsHandler: backend.PostBackendsBackendIDGroupsHandlerFunc(func(params backend.PostBackendsBackendIDGroupsParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendPostBackendsBackendIDGroups has not yet been implemented")
		}),
		BackendPostBackendsLdapHandler: backend.PostBackendsLdapHandlerFunc(func(params backend.PostBackendsLdapParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendPostBackendsLdap has not yet been implemented")
		}),
		BackendPostBackendsOauth2Handler: backend.PostBackendsOauth2HandlerFunc(func(params backend.PostBackendsOauth2Params) middleware.Responder {
			return middleware.NotImplemented("operation BackendPostBackendsOauth2 has not yet been implemented")
		}),
		AuthPostClientHandler: auth.PostClientHandlerFunc(func(params auth.PostClientParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostClient has not yet been implemented")
		}),
		ClientPostClientsHandler: client.PostClientsHandlerFunc(func(params client.PostClientsParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientPostClients has not yet been implemented")
		}),
		BackendPostFlowHandler: backend.PostFlowHandlerFunc(func(params backend.PostFlowParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendPostFlow has not yet been implemented")
		}),
		AuthPostIdentifyHandler: auth.PostIdentifyHandlerFunc(func(params auth.PostIdentifyParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostIdentify has not yet been implemented")
		}),
		AuthPostOauth2BackendIDConsentHandler: auth.PostOauth2BackendIDConsentHandlerFunc(func(params auth.PostOauth2BackendIDConsentParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostOauth2BackendIDConsent has not yet been implemented")
		}),
		AuthPostRefreshHandler: auth.PostRefreshHandlerFunc(func(params auth.PostRefreshParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostRefresh has not yet been implemented")
		}),
		RolePostRolesHandler: role.PostRolesHandlerFunc(func(params role.PostRolesParams) middleware.Responder {
			return middleware.NotImplemented("operation RolePostRoles has not yet been implemented")
		}),
		RolePostRolesRoleIDUsersUserIDHandler: role.PostRolesRoleIDUsersUserIDHandlerFunc(func(params role.PostRolesRoleIDUsersUserIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RolePostRolesRoleIDUsersUserID has not yet been implemented")
		}),
		AuthPostUserHandler: auth.PostUserHandlerFunc(func(params auth.PostUserParams) middleware.Responder {
			return middleware.NotImplemented("operation AuthPostUser has not yet been implemented")
		}),
		BackendPutBackendsLdapBackendIDHandler: backend.PutBackendsLdapBackendIDHandlerFunc(func(params backend.PutBackendsLdapBackendIDParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendPutBackendsLdapBackendID has not yet been implemented")
		}),
		BackendPutBackendsOauth2BackendIDHandler: backend.PutBackendsOauth2BackendIDHandlerFunc(func(params backend.PutBackendsOauth2BackendIDParams) middleware.Responder {
			return middleware.NotImplemented("operation BackendPutBackendsOauth2BackendID has not yet been implemented")
		}),
		ClientPutClientsClientIDHandler: client.PutClientsClientIDHandlerFunc(func(params client.PutClientsClientIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ClientPutClientsClientID has not yet been implemented")
		}),
		RolePutRolesRoleIDHandler: role.PutRolesRoleIDHandlerFunc(func(params role.PutRolesRoleIDParams) middleware.Responder {
			return middleware.NotImplemented("operation RolePutRolesRoleID has not yet been implemented")
		}),

		// Applies when the "Authorization" header is set
		BearerAuth: func(token string) (interface{}, error) {
			return nil, errors.NotImplemented("api key auth (Bearer) Authorization from header param [Authorization] has not yet been implemented")
		},

		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*AuthAPI #### RESTFUL Auth API
 */
type AuthAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// BearerAuth registers a function that takes a token and returns a principal
	// it performs authentication based on an api key Authorization provided in the header
	BearerAuth func(string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// BackendDeleteBackendsBackendIDHandler sets the operation handler for the delete backends backend ID operation
	BackendDeleteBackendsBackendIDHandler backend.DeleteBackendsBackendIDHandler
	// BackendDeleteBackendsBackendIDGroupsHandler sets the operation handler for the delete backends backend ID groups operation
	BackendDeleteBackendsBackendIDGroupsHandler backend.DeleteBackendsBackendIDGroupsHandler
	// ClientDeleteClientsClientIDHandler sets the operation handler for the delete clients client ID operation
	ClientDeleteClientsClientIDHandler client.DeleteClientsClientIDHandler
	// RoleDeleteRolesRoleIDHandler sets the operation handler for the delete roles role ID operation
	RoleDeleteRolesRoleIDHandler role.DeleteRolesRoleIDHandler
	// RoleDeleteRolesRoleIDUsersUserIDHandler sets the operation handler for the delete roles role ID users user ID operation
	RoleDeleteRolesRoleIDUsersUserIDHandler role.DeleteRolesRoleIDUsersUserIDHandler
	// BackendGetBackendsHandler sets the operation handler for the get backends operation
	BackendGetBackendsHandler backend.GetBackendsHandler
	// BackendGetBackendsBackendIDHandler sets the operation handler for the get backends backend ID operation
	BackendGetBackendsBackendIDHandler backend.GetBackendsBackendIDHandler
	// BackendGetBackendsBackendIDGroupsHandler sets the operation handler for the get backends backend ID groups operation
	BackendGetBackendsBackendIDGroupsHandler backend.GetBackendsBackendIDGroupsHandler
	// BackendGetBackendsBackendIDTestHandler sets the operation handler for the get backends backend ID test operation
	BackendGetBackendsBackendIDTestHandler backend.GetBackendsBackendIDTestHandler
	// ClientGetClientsHandler sets the operation handler for the get clients operation
	ClientGetClientsHandler client.GetClientsHandler
	// ClientGetClientsClientIDHandler sets the operation handler for the get clients client ID operation
	ClientGetClientsClientIDHandler client.GetClientsClientIDHandler
	// EventGetEventsHandler sets the operation handler for the get events operation
	EventGetEventsHandler event.GetEventsHandler
	// EventGetEventsEventIDHandler sets the operation handler for the get events event ID operation
	EventGetEventsEventIDHandler event.GetEventsEventIDHandler
	// BackendGetFlowHandler sets the operation handler for the get flow operation
	BackendGetFlowHandler backend.GetFlowHandler
	// JWKGetJwkHandler sets the operation handler for the get jwk operation
	JWKGetJwkHandler j_w_k.GetJwkHandler
	// AuthGetOauth2BackendIDHandler sets the operation handler for the get oauth2 backend ID operation
	AuthGetOauth2BackendIDHandler auth.GetOauth2BackendIDHandler
	// RoleGetRolesHandler sets the operation handler for the get roles operation
	RoleGetRolesHandler role.GetRolesHandler
	// RoleGetRolesRoleIDHandler sets the operation handler for the get roles role ID operation
	RoleGetRolesRoleIDHandler role.GetRolesRoleIDHandler
	// RoleGetRolesRoleIDUsersHandler sets the operation handler for the get roles role ID users operation
	RoleGetRolesRoleIDUsersHandler role.GetRolesRoleIDUsersHandler
	// TokenGetWhoamiHandler sets the operation handler for the get whoami operation
	TokenGetWhoamiHandler token.GetWhoamiHandler
	// BackendPatchBackendsLdapBackendIDHandler sets the operation handler for the patch backends ldap backend ID operation
	BackendPatchBackendsLdapBackendIDHandler backend.PatchBackendsLdapBackendIDHandler
	// BackendPatchBackendsOauth2BackendIDHandler sets the operation handler for the patch backends oauth2 backend ID operation
	BackendPatchBackendsOauth2BackendIDHandler backend.PatchBackendsOauth2BackendIDHandler
	// ClientPatchClientsClientIDHandler sets the operation handler for the patch clients client ID operation
	ClientPatchClientsClientIDHandler client.PatchClientsClientIDHandler
	// AdminPostAdminHandler sets the operation handler for the post admin operation
	AdminPostAdminHandler admin.PostAdminHandler
	// BackendPostBackendsBackendIDGroupsHandler sets the operation handler for the post backends backend ID groups operation
	BackendPostBackendsBackendIDGroupsHandler backend.PostBackendsBackendIDGroupsHandler
	// BackendPostBackendsLdapHandler sets the operation handler for the post backends ldap operation
	BackendPostBackendsLdapHandler backend.PostBackendsLdapHandler
	// BackendPostBackendsOauth2Handler sets the operation handler for the post backends oauth2 operation
	BackendPostBackendsOauth2Handler backend.PostBackendsOauth2Handler
	// AuthPostClientHandler sets the operation handler for the post client operation
	AuthPostClientHandler auth.PostClientHandler
	// ClientPostClientsHandler sets the operation handler for the post clients operation
	ClientPostClientsHandler client.PostClientsHandler
	// BackendPostFlowHandler sets the operation handler for the post flow operation
	BackendPostFlowHandler backend.PostFlowHandler
	// AuthPostIdentifyHandler sets the operation handler for the post identify operation
	AuthPostIdentifyHandler auth.PostIdentifyHandler
	// AuthPostOauth2BackendIDConsentHandler sets the operation handler for the post oauth2 backend ID consent operation
	AuthPostOauth2BackendIDConsentHandler auth.PostOauth2BackendIDConsentHandler
	// AuthPostRefreshHandler sets the operation handler for the post refresh operation
	AuthPostRefreshHandler auth.PostRefreshHandler
	// RolePostRolesHandler sets the operation handler for the post roles operation
	RolePostRolesHandler role.PostRolesHandler
	// RolePostRolesRoleIDUsersUserIDHandler sets the operation handler for the post roles role ID users user ID operation
	RolePostRolesRoleIDUsersUserIDHandler role.PostRolesRoleIDUsersUserIDHandler
	// AuthPostUserHandler sets the operation handler for the post user operation
	AuthPostUserHandler auth.PostUserHandler
	// BackendPutBackendsLdapBackendIDHandler sets the operation handler for the put backends ldap backend ID operation
	BackendPutBackendsLdapBackendIDHandler backend.PutBackendsLdapBackendIDHandler
	// BackendPutBackendsOauth2BackendIDHandler sets the operation handler for the put backends oauth2 backend ID operation
	BackendPutBackendsOauth2BackendIDHandler backend.PutBackendsOauth2BackendIDHandler
	// ClientPutClientsClientIDHandler sets the operation handler for the put clients client ID operation
	ClientPutClientsClientIDHandler client.PutClientsClientIDHandler
	// RolePutRolesRoleIDHandler sets the operation handler for the put roles role ID operation
	RolePutRolesRoleIDHandler role.PutRolesRoleIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *AuthAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *AuthAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *AuthAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *AuthAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *AuthAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *AuthAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *AuthAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the AuthAPI
func (o *AuthAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.BearerAuth == nil {
		unregistered = append(unregistered, "AuthorizationAuth")
	}

	if o.BackendDeleteBackendsBackendIDHandler == nil {
		unregistered = append(unregistered, "backend.DeleteBackendsBackendIDHandler")
	}

	if o.BackendDeleteBackendsBackendIDGroupsHandler == nil {
		unregistered = append(unregistered, "backend.DeleteBackendsBackendIDGroupsHandler")
	}

	if o.ClientDeleteClientsClientIDHandler == nil {
		unregistered = append(unregistered, "client.DeleteClientsClientIDHandler")
	}

	if o.RoleDeleteRolesRoleIDHandler == nil {
		unregistered = append(unregistered, "role.DeleteRolesRoleIDHandler")
	}

	if o.RoleDeleteRolesRoleIDUsersUserIDHandler == nil {
		unregistered = append(unregistered, "role.DeleteRolesRoleIDUsersUserIDHandler")
	}

	if o.BackendGetBackendsHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendsHandler")
	}

	if o.BackendGetBackendsBackendIDHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendsBackendIDHandler")
	}

	if o.BackendGetBackendsBackendIDGroupsHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendsBackendIDGroupsHandler")
	}

	if o.BackendGetBackendsBackendIDTestHandler == nil {
		unregistered = append(unregistered, "backend.GetBackendsBackendIDTestHandler")
	}

	if o.ClientGetClientsHandler == nil {
		unregistered = append(unregistered, "client.GetClientsHandler")
	}

	if o.ClientGetClientsClientIDHandler == nil {
		unregistered = append(unregistered, "client.GetClientsClientIDHandler")
	}

	if o.EventGetEventsHandler == nil {
		unregistered = append(unregistered, "event.GetEventsHandler")
	}

	if o.EventGetEventsEventIDHandler == nil {
		unregistered = append(unregistered, "event.GetEventsEventIDHandler")
	}

	if o.BackendGetFlowHandler == nil {
		unregistered = append(unregistered, "backend.GetFlowHandler")
	}

	if o.JWKGetJwkHandler == nil {
		unregistered = append(unregistered, "j_w_k.GetJwkHandler")
	}

	if o.AuthGetOauth2BackendIDHandler == nil {
		unregistered = append(unregistered, "auth.GetOauth2BackendIDHandler")
	}

	if o.RoleGetRolesHandler == nil {
		unregistered = append(unregistered, "role.GetRolesHandler")
	}

	if o.RoleGetRolesRoleIDHandler == nil {
		unregistered = append(unregistered, "role.GetRolesRoleIDHandler")
	}

	if o.RoleGetRolesRoleIDUsersHandler == nil {
		unregistered = append(unregistered, "role.GetRolesRoleIDUsersHandler")
	}

	if o.TokenGetWhoamiHandler == nil {
		unregistered = append(unregistered, "token.GetWhoamiHandler")
	}

	if o.BackendPatchBackendsLdapBackendIDHandler == nil {
		unregistered = append(unregistered, "backend.PatchBackendsLdapBackendIDHandler")
	}

	if o.BackendPatchBackendsOauth2BackendIDHandler == nil {
		unregistered = append(unregistered, "backend.PatchBackendsOauth2BackendIDHandler")
	}

	if o.ClientPatchClientsClientIDHandler == nil {
		unregistered = append(unregistered, "client.PatchClientsClientIDHandler")
	}

	if o.AdminPostAdminHandler == nil {
		unregistered = append(unregistered, "admin.PostAdminHandler")
	}

	if o.BackendPostBackendsBackendIDGroupsHandler == nil {
		unregistered = append(unregistered, "backend.PostBackendsBackendIDGroupsHandler")
	}

	if o.BackendPostBackendsLdapHandler == nil {
		unregistered = append(unregistered, "backend.PostBackendsLdapHandler")
	}

	if o.BackendPostBackendsOauth2Handler == nil {
		unregistered = append(unregistered, "backend.PostBackendsOauth2Handler")
	}

	if o.AuthPostClientHandler == nil {
		unregistered = append(unregistered, "auth.PostClientHandler")
	}

	if o.ClientPostClientsHandler == nil {
		unregistered = append(unregistered, "client.PostClientsHandler")
	}

	if o.BackendPostFlowHandler == nil {
		unregistered = append(unregistered, "backend.PostFlowHandler")
	}

	if o.AuthPostIdentifyHandler == nil {
		unregistered = append(unregistered, "auth.PostIdentifyHandler")
	}

	if o.AuthPostOauth2BackendIDConsentHandler == nil {
		unregistered = append(unregistered, "auth.PostOauth2BackendIDConsentHandler")
	}

	if o.AuthPostRefreshHandler == nil {
		unregistered = append(unregistered, "auth.PostRefreshHandler")
	}

	if o.RolePostRolesHandler == nil {
		unregistered = append(unregistered, "role.PostRolesHandler")
	}

	if o.RolePostRolesRoleIDUsersUserIDHandler == nil {
		unregistered = append(unregistered, "role.PostRolesRoleIDUsersUserIDHandler")
	}

	if o.AuthPostUserHandler == nil {
		unregistered = append(unregistered, "auth.PostUserHandler")
	}

	if o.BackendPutBackendsLdapBackendIDHandler == nil {
		unregistered = append(unregistered, "backend.PutBackendsLdapBackendIDHandler")
	}

	if o.BackendPutBackendsOauth2BackendIDHandler == nil {
		unregistered = append(unregistered, "backend.PutBackendsOauth2BackendIDHandler")
	}

	if o.ClientPutClientsClientIDHandler == nil {
		unregistered = append(unregistered, "client.PutClientsClientIDHandler")
	}

	if o.RolePutRolesRoleIDHandler == nil {
		unregistered = append(unregistered, "role.PutRolesRoleIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *AuthAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *AuthAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	result := make(map[string]runtime.Authenticator)
	for name, scheme := range schemes {
		switch name {

		case "Bearer":

			result[name] = o.APIKeyAuthenticator(scheme.Name, scheme.In, o.BearerAuth)

		}
	}
	return result

}

// Authorizer returns the registered authorizer
func (o *AuthAPI) Authorizer() runtime.Authorizer {

	return o.APIAuthorizer

}

// ConsumersFor gets the consumers for the specified media types
func (o *AuthAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *AuthAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *AuthAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the auth API
func (o *AuthAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *AuthAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/backends/{backendID}"] = backend.NewDeleteBackendsBackendID(o.context, o.BackendDeleteBackendsBackendIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/backends/{backendID}/groups"] = backend.NewDeleteBackendsBackendIDGroups(o.context, o.BackendDeleteBackendsBackendIDGroupsHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/clients/{clientID}"] = client.NewDeleteClientsClientID(o.context, o.ClientDeleteClientsClientIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/roles/{roleID}"] = role.NewDeleteRolesRoleID(o.context, o.RoleDeleteRolesRoleIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/roles/{roleID}/users/{userID}"] = role.NewDeleteRolesRoleIDUsersUserID(o.context, o.RoleDeleteRolesRoleIDUsersUserIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/backends"] = backend.NewGetBackends(o.context, o.BackendGetBackendsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/backends/{backendID}"] = backend.NewGetBackendsBackendID(o.context, o.BackendGetBackendsBackendIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/backends/{backendID}/groups"] = backend.NewGetBackendsBackendIDGroups(o.context, o.BackendGetBackendsBackendIDGroupsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/backends/{backendID}/test"] = backend.NewGetBackendsBackendIDTest(o.context, o.BackendGetBackendsBackendIDTestHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clients"] = client.NewGetClients(o.context, o.ClientGetClientsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/clients/{clientID}"] = client.NewGetClientsClientID(o.context, o.ClientGetClientsClientIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = event.NewGetEvents(o.context, o.EventGetEventsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events/{eventID}"] = event.NewGetEventsEventID(o.context, o.EventGetEventsEventIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/flow"] = backend.NewGetFlow(o.context, o.BackendGetFlowHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/jwk"] = j_w_k.NewGetJwk(o.context, o.JWKGetJwkHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/oauth2/{backendID}"] = auth.NewGetOauth2BackendID(o.context, o.AuthGetOauth2BackendIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles"] = role.NewGetRoles(o.context, o.RoleGetRolesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles/{roleID}"] = role.NewGetRolesRoleID(o.context, o.RoleGetRolesRoleIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/roles/{roleID}/users"] = role.NewGetRolesRoleIDUsers(o.context, o.RoleGetRolesRoleIDUsersHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/whoami"] = token.NewGetWhoami(o.context, o.TokenGetWhoamiHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/backends/ldap/{backendID}"] = backend.NewPatchBackendsLdapBackendID(o.context, o.BackendPatchBackendsLdapBackendIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/backends/oauth2/{backendID}"] = backend.NewPatchBackendsOauth2BackendID(o.context, o.BackendPatchBackendsOauth2BackendIDHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/clients/{clientID}"] = client.NewPatchClientsClientID(o.context, o.ClientPatchClientsClientIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/admin"] = admin.NewPostAdmin(o.context, o.AdminPostAdminHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/backends/{backendID}/groups"] = backend.NewPostBackendsBackendIDGroups(o.context, o.BackendPostBackendsBackendIDGroupsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/backends/ldap"] = backend.NewPostBackendsLdap(o.context, o.BackendPostBackendsLdapHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/backends/oauth2"] = backend.NewPostBackendsOauth2(o.context, o.BackendPostBackendsOauth2Handler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/client"] = auth.NewPostClient(o.context, o.AuthPostClientHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/clients"] = client.NewPostClients(o.context, o.ClientPostClientsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/flow"] = backend.NewPostFlow(o.context, o.BackendPostFlowHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/identify"] = auth.NewPostIdentify(o.context, o.AuthPostIdentifyHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/oauth2/{backendID}/consent"] = auth.NewPostOauth2BackendIDConsent(o.context, o.AuthPostOauth2BackendIDConsentHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/refresh"] = auth.NewPostRefresh(o.context, o.AuthPostRefreshHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/roles"] = role.NewPostRoles(o.context, o.RolePostRolesHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/roles/{roleID}/users/{userID}"] = role.NewPostRolesRoleIDUsersUserID(o.context, o.RolePostRolesRoleIDUsersUserIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = auth.NewPostUser(o.context, o.AuthPostUserHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/backends/ldap/{backendID}"] = backend.NewPutBackendsLdapBackendID(o.context, o.BackendPutBackendsLdapBackendIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/backends/oauth2/{backendID}"] = backend.NewPutBackendsOauth2BackendID(o.context, o.BackendPutBackendsOauth2BackendIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/clients/{clientID}"] = client.NewPutClientsClientID(o.context, o.ClientPutClientsClientIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/roles/{roleID}"] = role.NewPutRolesRoleID(o.context, o.RolePutRolesRoleIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *AuthAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *AuthAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *AuthAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *AuthAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
