// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// DeleteRolesRoleIDHandlerFunc turns a function with the right signature into a delete roles role ID handler
type DeleteRolesRoleIDHandlerFunc func(DeleteRolesRoleIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteRolesRoleIDHandlerFunc) Handle(params DeleteRolesRoleIDParams) middleware.Responder {
	return fn(params)
}

// DeleteRolesRoleIDHandler interface for that can handle valid delete roles role ID params
type DeleteRolesRoleIDHandler interface {
	Handle(DeleteRolesRoleIDParams) middleware.Responder
}

// NewDeleteRolesRoleID creates a new http.Handler for the delete roles role ID operation
func NewDeleteRolesRoleID(ctx *middleware.Context, handler DeleteRolesRoleIDHandler) *DeleteRolesRoleID {
	return &DeleteRolesRoleID{Context: ctx, Handler: handler}
}

/*DeleteRolesRoleID swagger:route DELETE /roles/{roleID} Role deleteRolesRoleId

Удаление роли

*/
type DeleteRolesRoleID struct {
	Context *middleware.Context
	Handler DeleteRolesRoleIDHandler
}

func (o *DeleteRolesRoleID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteRolesRoleIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {
	models.RoleParams

	// default
	// Required: true
	Default *bool `json:"default"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.RoleParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.RoleParams = aO0

	// now for regular properties
	var propsDataItems0 struct {
		Default *bool `json:"default"`
	}
	if err := swag.ReadJSON(raw, &propsDataItems0); err != nil {
		return err
	}
	o.Default = propsDataItems0.Default

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(o.RoleParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsDataItems0 struct {
		Default *bool `json:"default"`
	}
	propsDataItems0.Default = o.Default

	jsonDataPropsDataItems0, errDataItems0 := swag.WriteJSON(propsDataItems0)
	if errDataItems0 != nil {
		return nil, errDataItems0
	}
	_parts = append(_parts, jsonDataPropsDataItems0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.RoleParams
	if err := o.RoleParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataItems0) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", o.Default); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteRolesRoleIDInternalServerErrorBody delete roles role ID internal server error body
// swagger:model DeleteRolesRoleIDInternalServerErrorBody
type DeleteRolesRoleIDInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteRolesRoleIDInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// DeleteRolesRoleIDInternalServerErrorBodyAO0
	var deleteRolesRoleIDInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &deleteRolesRoleIDInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = deleteRolesRoleIDInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteRolesRoleIDInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	deleteRolesRoleIDInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteRolesRoleIDInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete roles role ID internal server error body
func (o *DeleteRolesRoleIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteRolesRoleIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteRolesRoleIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res DeleteRolesRoleIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteRolesRoleIDMethodNotAllowedBody delete roles role ID method not allowed body
// swagger:model DeleteRolesRoleIDMethodNotAllowedBody
type DeleteRolesRoleIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteRolesRoleIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// DeleteRolesRoleIDMethodNotAllowedBodyAO0
	var deleteRolesRoleIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &deleteRolesRoleIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = deleteRolesRoleIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteRolesRoleIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	deleteRolesRoleIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteRolesRoleIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete roles role ID method not allowed body
func (o *DeleteRolesRoleIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteRolesRoleIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteRolesRoleIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res DeleteRolesRoleIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteRolesRoleIDNotFoundBody delete roles role ID not found body
// swagger:model DeleteRolesRoleIDNotFoundBody
type DeleteRolesRoleIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteRolesRoleIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// DeleteRolesRoleIDNotFoundBodyAO0
	var deleteRolesRoleIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &deleteRolesRoleIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = deleteRolesRoleIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteRolesRoleIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	deleteRolesRoleIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteRolesRoleIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete roles role ID not found body
func (o *DeleteRolesRoleIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteRolesRoleIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteRolesRoleIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res DeleteRolesRoleIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// DeleteRolesRoleIDOKBody delete roles role ID o k body
// swagger:model DeleteRolesRoleIDOKBody
type DeleteRolesRoleIDOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteRolesRoleIDOKBody) UnmarshalJSON(raw []byte) error {
	// DeleteRolesRoleIDOKBodyAO0
	var deleteRolesRoleIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &deleteRolesRoleIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = deleteRolesRoleIDOKBodyAO0

	// DeleteRolesRoleIDOKBodyAO1
	var dataDeleteRolesRoleIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataDeleteRolesRoleIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataDeleteRolesRoleIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteRolesRoleIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	deleteRolesRoleIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, deleteRolesRoleIDOKBodyAO0)

	var dataDeleteRolesRoleIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataDeleteRolesRoleIDOKBodyAO1.Data = o.Data

	jsonDataDeleteRolesRoleIDOKBodyAO1, errDeleteRolesRoleIDOKBodyAO1 := swag.WriteJSON(dataDeleteRolesRoleIDOKBodyAO1)
	if errDeleteRolesRoleIDOKBodyAO1 != nil {
		return nil, errDeleteRolesRoleIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataDeleteRolesRoleIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete roles role ID o k body
func (o *DeleteRolesRoleIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteRolesRoleIDOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("deleteRolesRoleIdOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteRolesRoleIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteRolesRoleIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteRolesRoleIDOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteRolesRoleIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
