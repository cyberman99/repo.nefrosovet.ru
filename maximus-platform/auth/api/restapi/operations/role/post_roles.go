// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PostRolesHandlerFunc turns a function with the right signature into a post roles handler
type PostRolesHandlerFunc func(PostRolesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostRolesHandlerFunc) Handle(params PostRolesParams) middleware.Responder {
	return fn(params)
}

// PostRolesHandler interface for that can handle valid post roles params
type PostRolesHandler interface {
	Handle(PostRolesParams) middleware.Responder
}

// NewPostRoles creates a new http.Handler for the post roles operation
func NewPostRoles(ctx *middleware.Context, handler PostRolesHandler) *PostRoles {
	return &PostRoles{Context: ctx, Handler: handler}
}

/*PostRoles swagger:route POST /roles Role postRoles

Создание роли

*/
type PostRoles struct {
	Context *middleware.Context
	Handler PostRolesHandler
}

func (o *PostRoles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostRolesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostRolesBody post roles body
// swagger:model PostRolesBody
type PostRolesBody struct {
	models.RoleParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostRolesBody) UnmarshalJSON(raw []byte) error {
	// PostRolesParamsBodyAO0
	var postRolesParamsBodyAO0 models.RoleParams
	if err := swag.ReadJSON(raw, &postRolesParamsBodyAO0); err != nil {
		return err
	}
	o.RoleParams = postRolesParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostRolesBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postRolesParamsBodyAO0, err := swag.WriteJSON(o.RoleParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postRolesParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post roles body
func (o *PostRolesBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.RoleParams
	if err := o.RoleParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostRolesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRolesBody) UnmarshalBinary(b []byte) error {
	var res PostRolesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostRolesInternalServerErrorBody post roles internal server error body
// swagger:model PostRolesInternalServerErrorBody
type PostRolesInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostRolesInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostRolesInternalServerErrorBodyAO0
	var postRolesInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &postRolesInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = postRolesInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostRolesInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postRolesInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postRolesInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post roles internal server error body
func (o *PostRolesInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostRolesInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRolesInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostRolesInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostRolesMethodNotAllowedBody post roles method not allowed body
// swagger:model PostRolesMethodNotAllowedBody
type PostRolesMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostRolesMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostRolesMethodNotAllowedBodyAO0
	var postRolesMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postRolesMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postRolesMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostRolesMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postRolesMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postRolesMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post roles method not allowed body
func (o *PostRolesMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostRolesMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRolesMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostRolesMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostRolesOKBody post roles o k body
// swagger:model PostRolesOKBody
type PostRolesOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostRolesOKBody) UnmarshalJSON(raw []byte) error {
	// PostRolesOKBodyAO0
	var postRolesOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postRolesOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postRolesOKBodyAO0

	// PostRolesOKBodyAO1
	var dataPostRolesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostRolesOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostRolesOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostRolesOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postRolesOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postRolesOKBodyAO0)

	var dataPostRolesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPostRolesOKBodyAO1.Data = o.Data

	jsonDataPostRolesOKBodyAO1, errPostRolesOKBodyAO1 := swag.WriteJSON(dataPostRolesOKBodyAO1)
	if errPostRolesOKBodyAO1 != nil {
		return nil, errPostRolesOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostRolesOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post roles o k body
func (o *PostRolesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostRolesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("postRolesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postRolesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostRolesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostRolesOKBody) UnmarshalBinary(b []byte) error {
	var res PostRolesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
