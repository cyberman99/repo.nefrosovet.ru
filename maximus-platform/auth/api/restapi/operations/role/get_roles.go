// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetRolesHandlerFunc turns a function with the right signature into a get roles handler
type GetRolesHandlerFunc func(GetRolesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRolesHandlerFunc) Handle(params GetRolesParams) middleware.Responder {
	return fn(params)
}

// GetRolesHandler interface for that can handle valid get roles params
type GetRolesHandler interface {
	Handle(GetRolesParams) middleware.Responder
}

// NewGetRoles creates a new http.Handler for the get roles operation
func NewGetRoles(ctx *middleware.Context, handler GetRolesHandler) *GetRoles {
	return &GetRoles{Context: ctx, Handler: handler}
}

/*GetRoles swagger:route GET /roles Role getRoles

Коллекция ролей

*/
type GetRoles struct {
	Context *middleware.Context
	Handler GetRolesHandler
}

func (o *GetRoles) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRolesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRolesBadRequestBody get roles bad request body
// swagger:model GetRolesBadRequestBody
type GetRolesBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *GetRolesBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesBadRequestBody) UnmarshalJSON(raw []byte) error {
	// GetRolesBadRequestBodyAO0
	var getRolesBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &getRolesBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = getRolesBadRequestBodyAO0

	// GetRolesBadRequestBodyAO1
	var dataGetRolesBadRequestBodyAO1 struct {
		Errors *GetRolesBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataGetRolesBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataGetRolesBadRequestBodyAO1.Errors

	o.Message = dataGetRolesBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getRolesBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesBadRequestBodyAO0)

	var dataGetRolesBadRequestBodyAO1 struct {
		Errors *GetRolesBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataGetRolesBadRequestBodyAO1.Errors = o.Errors

	dataGetRolesBadRequestBodyAO1.Message = o.Message

	jsonDataGetRolesBadRequestBodyAO1, errGetRolesBadRequestBodyAO1 := swag.WriteJSON(dataGetRolesBadRequestBodyAO1)
	if errGetRolesBadRequestBodyAO1 != nil {
		return nil, errGetRolesBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataGetRolesBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles bad request body
func (o *GetRolesBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRolesBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("getRolesBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getRolesBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *GetRolesBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("getRolesBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetRolesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRolesBadRequestBodyAO1Errors get roles bad request body a o1 errors
// swagger:model GetRolesBadRequestBodyAO1Errors
type GetRolesBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this get roles bad request body a o1 errors
func (o *GetRolesBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res GetRolesBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRolesInternalServerErrorBody get roles internal server error body
// swagger:model GetRolesInternalServerErrorBody
type GetRolesInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetRolesInternalServerErrorBodyAO0
	var getRolesInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getRolesInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getRolesInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getRolesInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles internal server error body
func (o *GetRolesInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetRolesInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRolesMethodNotAllowedBody get roles method not allowed body
// swagger:model GetRolesMethodNotAllowedBody
type GetRolesMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetRolesMethodNotAllowedBodyAO0
	var getRolesMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getRolesMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getRolesMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getRolesMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles method not allowed body
func (o *GetRolesMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetRolesMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRolesOKBody get roles o k body
// swagger:model GetRolesOKBody
type GetRolesOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesOKBody) UnmarshalJSON(raw []byte) error {
	// GetRolesOKBodyAO0
	var getRolesOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getRolesOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getRolesOKBodyAO0

	// GetRolesOKBodyAO1
	var dataGetRolesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetRolesOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetRolesOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getRolesOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesOKBodyAO0)

	var dataGetRolesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataGetRolesOKBodyAO1.Data = o.Data

	jsonDataGetRolesOKBodyAO1, errGetRolesOKBodyAO1 := swag.WriteJSON(dataGetRolesOKBodyAO1)
	if errGetRolesOKBodyAO1 != nil {
		return nil, errGetRolesOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetRolesOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles o k body
func (o *GetRolesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRolesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getRolesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRolesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesOKBody) UnmarshalBinary(b []byte) error {
	var res GetRolesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
