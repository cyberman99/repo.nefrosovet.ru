// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PutRolesRoleIDHandlerFunc turns a function with the right signature into a put roles role ID handler
type PutRolesRoleIDHandlerFunc func(PutRolesRoleIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutRolesRoleIDHandlerFunc) Handle(params PutRolesRoleIDParams) middleware.Responder {
	return fn(params)
}

// PutRolesRoleIDHandler interface for that can handle valid put roles role ID params
type PutRolesRoleIDHandler interface {
	Handle(PutRolesRoleIDParams) middleware.Responder
}

// NewPutRolesRoleID creates a new http.Handler for the put roles role ID operation
func NewPutRolesRoleID(ctx *middleware.Context, handler PutRolesRoleIDHandler) *PutRolesRoleID {
	return &PutRolesRoleID{Context: ctx, Handler: handler}
}

/*PutRolesRoleID swagger:route PUT /roles/{roleID} Role putRolesRoleId

Изменение роли

*/
type PutRolesRoleID struct {
	Context *middleware.Context
	Handler PutRolesRoleIDHandler
}

func (o *PutRolesRoleID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutRolesRoleIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutRolesRoleIDBadRequestBody put roles role ID bad request body
// swagger:model PutRolesRoleIDBadRequestBody
type PutRolesRoleIDBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *PutRolesRoleIDBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutRolesRoleIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutRolesRoleIDBadRequestBodyAO0
	var putRolesRoleIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putRolesRoleIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putRolesRoleIDBadRequestBodyAO0

	// PutRolesRoleIDBadRequestBodyAO1
	var dataPutRolesRoleIDBadRequestBodyAO1 struct {
		Errors *PutRolesRoleIDBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataPutRolesRoleIDBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataPutRolesRoleIDBadRequestBodyAO1.Errors

	o.Message = dataPutRolesRoleIDBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutRolesRoleIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putRolesRoleIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putRolesRoleIDBadRequestBodyAO0)

	var dataPutRolesRoleIDBadRequestBodyAO1 struct {
		Errors *PutRolesRoleIDBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataPutRolesRoleIDBadRequestBodyAO1.Errors = o.Errors

	dataPutRolesRoleIDBadRequestBodyAO1.Message = o.Message

	jsonDataPutRolesRoleIDBadRequestBodyAO1, errPutRolesRoleIDBadRequestBodyAO1 := swag.WriteJSON(dataPutRolesRoleIDBadRequestBodyAO1)
	if errPutRolesRoleIDBadRequestBodyAO1 != nil {
		return nil, errPutRolesRoleIDBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPutRolesRoleIDBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put roles role ID bad request body
func (o *PutRolesRoleIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutRolesRoleIDBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("putRolesRoleIdBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putRolesRoleIdBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *PutRolesRoleIDBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putRolesRoleIdBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesRoleIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesRoleIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutRolesRoleIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutRolesRoleIDBadRequestBodyAO1Errors put roles role ID bad request body a o1 errors
// swagger:model PutRolesRoleIDBadRequestBodyAO1Errors
type PutRolesRoleIDBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this put roles role ID bad request body a o1 errors
func (o *PutRolesRoleIDBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesRoleIDBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesRoleIDBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res PutRolesRoleIDBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutRolesRoleIDBody put roles role ID body
// swagger:model PutRolesRoleIDBody
type PutRolesRoleIDBody struct {

	// Описание роли
	Description string `json:"description,omitempty"`
}

// Validate validates this put roles role ID body
func (o *PutRolesRoleIDBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesRoleIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesRoleIDBody) UnmarshalBinary(b []byte) error {
	var res PutRolesRoleIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutRolesRoleIDInternalServerErrorBody put roles role ID internal server error body
// swagger:model PutRolesRoleIDInternalServerErrorBody
type PutRolesRoleIDInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutRolesRoleIDInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PutRolesRoleIDInternalServerErrorBodyAO0
	var putRolesRoleIDInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &putRolesRoleIDInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = putRolesRoleIDInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutRolesRoleIDInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putRolesRoleIDInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putRolesRoleIDInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put roles role ID internal server error body
func (o *PutRolesRoleIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesRoleIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesRoleIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutRolesRoleIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutRolesRoleIDMethodNotAllowedBody put roles role ID method not allowed body
// swagger:model PutRolesRoleIDMethodNotAllowedBody
type PutRolesRoleIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutRolesRoleIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutRolesRoleIDMethodNotAllowedBodyAO0
	var putRolesRoleIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putRolesRoleIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putRolesRoleIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutRolesRoleIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putRolesRoleIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putRolesRoleIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put roles role ID method not allowed body
func (o *PutRolesRoleIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesRoleIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesRoleIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutRolesRoleIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutRolesRoleIDNotFoundBody put roles role ID not found body
// swagger:model PutRolesRoleIDNotFoundBody
type PutRolesRoleIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutRolesRoleIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutRolesRoleIDNotFoundBodyAO0
	var putRolesRoleIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putRolesRoleIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putRolesRoleIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutRolesRoleIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putRolesRoleIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putRolesRoleIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put roles role ID not found body
func (o *PutRolesRoleIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesRoleIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesRoleIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutRolesRoleIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutRolesRoleIDOKBody put roles role ID o k body
// swagger:model PutRolesRoleIDOKBody
type PutRolesRoleIDOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutRolesRoleIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutRolesRoleIDOKBodyAO0
	var putRolesRoleIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putRolesRoleIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putRolesRoleIDOKBodyAO0

	// PutRolesRoleIDOKBodyAO1
	var dataPutRolesRoleIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutRolesRoleIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutRolesRoleIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutRolesRoleIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putRolesRoleIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putRolesRoleIDOKBodyAO0)

	var dataPutRolesRoleIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPutRolesRoleIDOKBodyAO1.Data = o.Data

	jsonDataPutRolesRoleIDOKBodyAO1, errPutRolesRoleIDOKBodyAO1 := swag.WriteJSON(dataPutRolesRoleIDOKBodyAO1)
	if errPutRolesRoleIDOKBodyAO1 != nil {
		return nil, errPutRolesRoleIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutRolesRoleIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put roles role ID o k body
func (o *PutRolesRoleIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutRolesRoleIDOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("putRolesRoleIdOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putRolesRoleIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutRolesRoleIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutRolesRoleIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutRolesRoleIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
