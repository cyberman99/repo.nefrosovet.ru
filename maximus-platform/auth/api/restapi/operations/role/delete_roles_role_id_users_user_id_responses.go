// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DeleteRolesRoleIDUsersUserIDOKCode is the HTTP code returned for type DeleteRolesRoleIDUsersUserIDOK
const DeleteRolesRoleIDUsersUserIDOKCode int = 200

/*DeleteRolesRoleIDUsersUserIDOK SUCCESS

swagger:response deleteRolesRoleIdUsersUserIdOK
*/
type DeleteRolesRoleIDUsersUserIDOK struct {

	/*
	  In: Body
	*/
	Payload *DeleteRolesRoleIDUsersUserIDOKBody `json:"body,omitempty"`
}

// NewDeleteRolesRoleIDUsersUserIDOK creates DeleteRolesRoleIDUsersUserIDOK with default headers values
func NewDeleteRolesRoleIDUsersUserIDOK() *DeleteRolesRoleIDUsersUserIDOK {

	return &DeleteRolesRoleIDUsersUserIDOK{}
}

// WithPayload adds the payload to the delete roles role Id users user Id o k response
func (o *DeleteRolesRoleIDUsersUserIDOK) WithPayload(payload *DeleteRolesRoleIDUsersUserIDOKBody) *DeleteRolesRoleIDUsersUserIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete roles role Id users user Id o k response
func (o *DeleteRolesRoleIDUsersUserIDOK) SetPayload(payload *DeleteRolesRoleIDUsersUserIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRolesRoleIDUsersUserIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRolesRoleIDUsersUserIDBadRequestCode is the HTTP code returned for type DeleteRolesRoleIDUsersUserIDBadRequest
const DeleteRolesRoleIDUsersUserIDBadRequestCode int = 400

/*DeleteRolesRoleIDUsersUserIDBadRequest Коллекция авторизации

swagger:response deleteRolesRoleIdUsersUserIdBadRequest
*/
type DeleteRolesRoleIDUsersUserIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *DeleteRolesRoleIDUsersUserIDBadRequestBody `json:"body,omitempty"`
}

// NewDeleteRolesRoleIDUsersUserIDBadRequest creates DeleteRolesRoleIDUsersUserIDBadRequest with default headers values
func NewDeleteRolesRoleIDUsersUserIDBadRequest() *DeleteRolesRoleIDUsersUserIDBadRequest {

	return &DeleteRolesRoleIDUsersUserIDBadRequest{}
}

// WithPayload adds the payload to the delete roles role Id users user Id bad request response
func (o *DeleteRolesRoleIDUsersUserIDBadRequest) WithPayload(payload *DeleteRolesRoleIDUsersUserIDBadRequestBody) *DeleteRolesRoleIDUsersUserIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete roles role Id users user Id bad request response
func (o *DeleteRolesRoleIDUsersUserIDBadRequest) SetPayload(payload *DeleteRolesRoleIDUsersUserIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRolesRoleIDUsersUserIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRolesRoleIDUsersUserIDNotFoundCode is the HTTP code returned for type DeleteRolesRoleIDUsersUserIDNotFound
const DeleteRolesRoleIDUsersUserIDNotFoundCode int = 404

/*DeleteRolesRoleIDUsersUserIDNotFound Not found

swagger:response deleteRolesRoleIdUsersUserIdNotFound
*/
type DeleteRolesRoleIDUsersUserIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *DeleteRolesRoleIDUsersUserIDNotFoundBody `json:"body,omitempty"`
}

// NewDeleteRolesRoleIDUsersUserIDNotFound creates DeleteRolesRoleIDUsersUserIDNotFound with default headers values
func NewDeleteRolesRoleIDUsersUserIDNotFound() *DeleteRolesRoleIDUsersUserIDNotFound {

	return &DeleteRolesRoleIDUsersUserIDNotFound{}
}

// WithPayload adds the payload to the delete roles role Id users user Id not found response
func (o *DeleteRolesRoleIDUsersUserIDNotFound) WithPayload(payload *DeleteRolesRoleIDUsersUserIDNotFoundBody) *DeleteRolesRoleIDUsersUserIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete roles role Id users user Id not found response
func (o *DeleteRolesRoleIDUsersUserIDNotFound) SetPayload(payload *DeleteRolesRoleIDUsersUserIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRolesRoleIDUsersUserIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRolesRoleIDUsersUserIDMethodNotAllowedCode is the HTTP code returned for type DeleteRolesRoleIDUsersUserIDMethodNotAllowed
const DeleteRolesRoleIDUsersUserIDMethodNotAllowedCode int = 405

/*DeleteRolesRoleIDUsersUserIDMethodNotAllowed Invalid Method

swagger:response deleteRolesRoleIdUsersUserIdMethodNotAllowed
*/
type DeleteRolesRoleIDUsersUserIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *DeleteRolesRoleIDUsersUserIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewDeleteRolesRoleIDUsersUserIDMethodNotAllowed creates DeleteRolesRoleIDUsersUserIDMethodNotAllowed with default headers values
func NewDeleteRolesRoleIDUsersUserIDMethodNotAllowed() *DeleteRolesRoleIDUsersUserIDMethodNotAllowed {

	return &DeleteRolesRoleIDUsersUserIDMethodNotAllowed{}
}

// WithPayload adds the payload to the delete roles role Id users user Id method not allowed response
func (o *DeleteRolesRoleIDUsersUserIDMethodNotAllowed) WithPayload(payload *DeleteRolesRoleIDUsersUserIDMethodNotAllowedBody) *DeleteRolesRoleIDUsersUserIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete roles role Id users user Id method not allowed response
func (o *DeleteRolesRoleIDUsersUserIDMethodNotAllowed) SetPayload(payload *DeleteRolesRoleIDUsersUserIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRolesRoleIDUsersUserIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRolesRoleIDUsersUserIDInternalServerErrorCode is the HTTP code returned for type DeleteRolesRoleIDUsersUserIDInternalServerError
const DeleteRolesRoleIDUsersUserIDInternalServerErrorCode int = 500

/*DeleteRolesRoleIDUsersUserIDInternalServerError Internal server error

swagger:response deleteRolesRoleIdUsersUserIdInternalServerError
*/
type DeleteRolesRoleIDUsersUserIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *DeleteRolesRoleIDUsersUserIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewDeleteRolesRoleIDUsersUserIDInternalServerError creates DeleteRolesRoleIDUsersUserIDInternalServerError with default headers values
func NewDeleteRolesRoleIDUsersUserIDInternalServerError() *DeleteRolesRoleIDUsersUserIDInternalServerError {

	return &DeleteRolesRoleIDUsersUserIDInternalServerError{}
}

// WithPayload adds the payload to the delete roles role Id users user Id internal server error response
func (o *DeleteRolesRoleIDUsersUserIDInternalServerError) WithPayload(payload *DeleteRolesRoleIDUsersUserIDInternalServerErrorBody) *DeleteRolesRoleIDUsersUserIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete roles role Id users user Id internal server error response
func (o *DeleteRolesRoleIDUsersUserIDInternalServerError) SetPayload(payload *DeleteRolesRoleIDUsersUserIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRolesRoleIDUsersUserIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
