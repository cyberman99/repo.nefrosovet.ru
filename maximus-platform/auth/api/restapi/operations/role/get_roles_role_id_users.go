// Code generated by go-swagger; DO NOT EDIT.

package role

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetRolesRoleIDUsersHandlerFunc turns a function with the right signature into a get roles role ID users handler
type GetRolesRoleIDUsersHandlerFunc func(GetRolesRoleIDUsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRolesRoleIDUsersHandlerFunc) Handle(params GetRolesRoleIDUsersParams) middleware.Responder {
	return fn(params)
}

// GetRolesRoleIDUsersHandler interface for that can handle valid get roles role ID users params
type GetRolesRoleIDUsersHandler interface {
	Handle(GetRolesRoleIDUsersParams) middleware.Responder
}

// NewGetRolesRoleIDUsers creates a new http.Handler for the get roles role ID users operation
func NewGetRolesRoleIDUsers(ctx *middleware.Context, handler GetRolesRoleIDUsersHandler) *GetRolesRoleIDUsers {
	return &GetRolesRoleIDUsers{Context: ctx, Handler: handler}
}

/*GetRolesRoleIDUsers swagger:route GET /roles/{roleID}/users Role getRolesRoleIdUsers

Коллекция пользователей роли

*/
type GetRolesRoleIDUsers struct {
	Context *middleware.Context
	Handler GetRolesRoleIDUsersHandler
}

func (o *GetRolesRoleIDUsers) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRolesRoleIDUsersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRolesRoleIDUsersInternalServerErrorBody get roles role ID users internal server error body
// swagger:model GetRolesRoleIDUsersInternalServerErrorBody
type GetRolesRoleIDUsersInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesRoleIDUsersInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetRolesRoleIDUsersInternalServerErrorBodyAO0
	var getRolesRoleIDUsersInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getRolesRoleIDUsersInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getRolesRoleIDUsersInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesRoleIDUsersInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getRolesRoleIDUsersInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesRoleIDUsersInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles role ID users internal server error body
func (o *GetRolesRoleIDUsersInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesRoleIDUsersInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesRoleIDUsersInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetRolesRoleIDUsersInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRolesRoleIDUsersMethodNotAllowedBody get roles role ID users method not allowed body
// swagger:model GetRolesRoleIDUsersMethodNotAllowedBody
type GetRolesRoleIDUsersMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesRoleIDUsersMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetRolesRoleIDUsersMethodNotAllowedBodyAO0
	var getRolesRoleIDUsersMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getRolesRoleIDUsersMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getRolesRoleIDUsersMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesRoleIDUsersMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getRolesRoleIDUsersMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesRoleIDUsersMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles role ID users method not allowed body
func (o *GetRolesRoleIDUsersMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesRoleIDUsersMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesRoleIDUsersMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetRolesRoleIDUsersMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRolesRoleIDUsersNotFoundBody get roles role ID users not found body
// swagger:model GetRolesRoleIDUsersNotFoundBody
type GetRolesRoleIDUsersNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesRoleIDUsersNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetRolesRoleIDUsersNotFoundBodyAO0
	var getRolesRoleIDUsersNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getRolesRoleIDUsersNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getRolesRoleIDUsersNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesRoleIDUsersNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getRolesRoleIDUsersNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesRoleIDUsersNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles role ID users not found body
func (o *GetRolesRoleIDUsersNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesRoleIDUsersNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesRoleIDUsersNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetRolesRoleIDUsersNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetRolesRoleIDUsersOKBody get roles role ID users o k body
// swagger:model GetRolesRoleIDUsersOKBody
type GetRolesRoleIDUsersOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []string `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetRolesRoleIDUsersOKBody) UnmarshalJSON(raw []byte) error {
	// GetRolesRoleIDUsersOKBodyAO0
	var getRolesRoleIDUsersOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getRolesRoleIDUsersOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getRolesRoleIDUsersOKBodyAO0

	// GetRolesRoleIDUsersOKBodyAO1
	var dataGetRolesRoleIDUsersOKBodyAO1 struct {
		Data []string `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetRolesRoleIDUsersOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetRolesRoleIDUsersOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetRolesRoleIDUsersOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getRolesRoleIDUsersOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getRolesRoleIDUsersOKBodyAO0)

	var dataGetRolesRoleIDUsersOKBodyAO1 struct {
		Data []string `json:"data"`
	}

	dataGetRolesRoleIDUsersOKBodyAO1.Data = o.Data

	jsonDataGetRolesRoleIDUsersOKBodyAO1, errGetRolesRoleIDUsersOKBodyAO1 := swag.WriteJSON(dataGetRolesRoleIDUsersOKBodyAO1)
	if errGetRolesRoleIDUsersOKBodyAO1 != nil {
		return nil, errGetRolesRoleIDUsersOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetRolesRoleIDUsersOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get roles role ID users o k body
func (o *GetRolesRoleIDUsersOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRolesRoleIDUsersOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getRolesRoleIdUsersOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRolesRoleIDUsersOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolesRoleIDUsersOKBody) UnmarshalBinary(b []byte) error {
	var res GetRolesRoleIDUsersOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
