// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PostClientsOKCode is the HTTP code returned for type PostClientsOK
const PostClientsOKCode int = 200

/*PostClientsOK Объект клиента

swagger:response postClientsOK
*/
type PostClientsOK struct {

	/*
	  In: Body
	*/
	Payload *PostClientsOKBody `json:"body,omitempty"`
}

// NewPostClientsOK creates PostClientsOK with default headers values
func NewPostClientsOK() *PostClientsOK {

	return &PostClientsOK{}
}

// WithPayload adds the payload to the post clients o k response
func (o *PostClientsOK) WithPayload(payload *PostClientsOKBody) *PostClientsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post clients o k response
func (o *PostClientsOK) SetPayload(payload *PostClientsOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostClientsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostClientsBadRequestCode is the HTTP code returned for type PostClientsBadRequest
const PostClientsBadRequestCode int = 400

/*PostClientsBadRequest Коллекция авторизации

swagger:response postClientsBadRequest
*/
type PostClientsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PostClientsBadRequestBody `json:"body,omitempty"`
}

// NewPostClientsBadRequest creates PostClientsBadRequest with default headers values
func NewPostClientsBadRequest() *PostClientsBadRequest {

	return &PostClientsBadRequest{}
}

// WithPayload adds the payload to the post clients bad request response
func (o *PostClientsBadRequest) WithPayload(payload *PostClientsBadRequestBody) *PostClientsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post clients bad request response
func (o *PostClientsBadRequest) SetPayload(payload *PostClientsBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostClientsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostClientsNotFoundCode is the HTTP code returned for type PostClientsNotFound
const PostClientsNotFoundCode int = 404

/*PostClientsNotFound Not found

swagger:response postClientsNotFound
*/
type PostClientsNotFound struct {

	/*
	  In: Body
	*/
	Payload *PostClientsNotFoundBody `json:"body,omitempty"`
}

// NewPostClientsNotFound creates PostClientsNotFound with default headers values
func NewPostClientsNotFound() *PostClientsNotFound {

	return &PostClientsNotFound{}
}

// WithPayload adds the payload to the post clients not found response
func (o *PostClientsNotFound) WithPayload(payload *PostClientsNotFoundBody) *PostClientsNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post clients not found response
func (o *PostClientsNotFound) SetPayload(payload *PostClientsNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostClientsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostClientsMethodNotAllowedCode is the HTTP code returned for type PostClientsMethodNotAllowed
const PostClientsMethodNotAllowedCode int = 405

/*PostClientsMethodNotAllowed Invalid Method

swagger:response postClientsMethodNotAllowed
*/
type PostClientsMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PostClientsMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPostClientsMethodNotAllowed creates PostClientsMethodNotAllowed with default headers values
func NewPostClientsMethodNotAllowed() *PostClientsMethodNotAllowed {

	return &PostClientsMethodNotAllowed{}
}

// WithPayload adds the payload to the post clients method not allowed response
func (o *PostClientsMethodNotAllowed) WithPayload(payload *PostClientsMethodNotAllowedBody) *PostClientsMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post clients method not allowed response
func (o *PostClientsMethodNotAllowed) SetPayload(payload *PostClientsMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostClientsMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostClientsInternalServerErrorCode is the HTTP code returned for type PostClientsInternalServerError
const PostClientsInternalServerErrorCode int = 500

/*PostClientsInternalServerError Internal server error

swagger:response postClientsInternalServerError
*/
type PostClientsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PostClientsInternalServerErrorBody `json:"body,omitempty"`
}

// NewPostClientsInternalServerError creates PostClientsInternalServerError with default headers values
func NewPostClientsInternalServerError() *PostClientsInternalServerError {

	return &PostClientsInternalServerError{}
}

// WithPayload adds the payload to the post clients internal server error response
func (o *PostClientsInternalServerError) WithPayload(payload *PostClientsInternalServerErrorBody) *PostClientsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post clients internal server error response
func (o *PostClientsInternalServerError) SetPayload(payload *PostClientsInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostClientsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
