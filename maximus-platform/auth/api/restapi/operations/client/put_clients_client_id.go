// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PutClientsClientIDHandlerFunc turns a function with the right signature into a put clients client ID handler
type PutClientsClientIDHandlerFunc func(PutClientsClientIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutClientsClientIDHandlerFunc) Handle(params PutClientsClientIDParams) middleware.Responder {
	return fn(params)
}

// PutClientsClientIDHandler interface for that can handle valid put clients client ID params
type PutClientsClientIDHandler interface {
	Handle(PutClientsClientIDParams) middleware.Responder
}

// NewPutClientsClientID creates a new http.Handler for the put clients client ID operation
func NewPutClientsClientID(ctx *middleware.Context, handler PutClientsClientIDHandler) *PutClientsClientID {
	return &PutClientsClientID{Context: ctx, Handler: handler}
}

/*PutClientsClientID swagger:route PUT /clients/{clientID} Client putClientsClientId

Изменение клиента

*/
type PutClientsClientID struct {
	Context *middleware.Context
	Handler PutClientsClientIDHandler
}

func (o *PutClientsClientID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutClientsClientIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutClientsClientIDBadRequestBody put clients client ID bad request body
// swagger:model PutClientsClientIDBadRequestBody
type PutClientsClientIDBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *PutClientsClientIDBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClientsClientIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutClientsClientIDBadRequestBodyAO0
	var putClientsClientIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putClientsClientIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putClientsClientIDBadRequestBodyAO0

	// PutClientsClientIDBadRequestBodyAO1
	var dataPutClientsClientIDBadRequestBodyAO1 struct {
		Errors *PutClientsClientIDBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataPutClientsClientIDBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataPutClientsClientIDBadRequestBodyAO1.Errors

	o.Message = dataPutClientsClientIDBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClientsClientIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putClientsClientIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClientsClientIDBadRequestBodyAO0)

	var dataPutClientsClientIDBadRequestBodyAO1 struct {
		Errors *PutClientsClientIDBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataPutClientsClientIDBadRequestBodyAO1.Errors = o.Errors

	dataPutClientsClientIDBadRequestBodyAO1.Message = o.Message

	jsonDataPutClientsClientIDBadRequestBodyAO1, errPutClientsClientIDBadRequestBodyAO1 := swag.WriteJSON(dataPutClientsClientIDBadRequestBodyAO1)
	if errPutClientsClientIDBadRequestBodyAO1 != nil {
		return nil, errPutClientsClientIDBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPutClientsClientIDBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clients client ID bad request body
func (o *PutClientsClientIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutClientsClientIDBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("putClientsClientIdBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("putClientsClientIdBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *PutClientsClientIDBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("putClientsClientIdBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutClientsClientIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClientsClientIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutClientsClientIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutClientsClientIDBadRequestBodyAO1Errors put clients client ID bad request body a o1 errors
// swagger:model PutClientsClientIDBadRequestBodyAO1Errors
type PutClientsClientIDBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this put clients client ID bad request body a o1 errors
func (o *PutClientsClientIDBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutClientsClientIDBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClientsClientIDBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res PutClientsClientIDBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutClientsClientIDBody put clients client ID body
// swagger:model PutClientsClientIDBody
type PutClientsClientIDBody struct {
	models.ClientParams

	models.PasswordObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClientsClientIDBody) UnmarshalJSON(raw []byte) error {
	// PutClientsClientIDParamsBodyAO0
	var putClientsClientIDParamsBodyAO0 models.ClientParams
	if err := swag.ReadJSON(raw, &putClientsClientIDParamsBodyAO0); err != nil {
		return err
	}
	o.ClientParams = putClientsClientIDParamsBodyAO0

	// PutClientsClientIDParamsBodyAO1
	var putClientsClientIDParamsBodyAO1 models.PasswordObject
	if err := swag.ReadJSON(raw, &putClientsClientIDParamsBodyAO1); err != nil {
		return err
	}
	o.PasswordObject = putClientsClientIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClientsClientIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putClientsClientIDParamsBodyAO0, err := swag.WriteJSON(o.ClientParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClientsClientIDParamsBodyAO0)

	putClientsClientIDParamsBodyAO1, err := swag.WriteJSON(o.PasswordObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClientsClientIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clients client ID body
func (o *PutClientsClientIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ClientParams
	if err := o.ClientParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PasswordObject
	if err := o.PasswordObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClientsClientIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClientsClientIDBody) UnmarshalBinary(b []byte) error {
	var res PutClientsClientIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutClientsClientIDInternalServerErrorBody put clients client ID internal server error body
// swagger:model PutClientsClientIDInternalServerErrorBody
type PutClientsClientIDInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClientsClientIDInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PutClientsClientIDInternalServerErrorBodyAO0
	var putClientsClientIDInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &putClientsClientIDInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = putClientsClientIDInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClientsClientIDInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClientsClientIDInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClientsClientIDInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clients client ID internal server error body
func (o *PutClientsClientIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClientsClientIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClientsClientIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutClientsClientIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutClientsClientIDMethodNotAllowedBody put clients client ID method not allowed body
// swagger:model PutClientsClientIDMethodNotAllowedBody
type PutClientsClientIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClientsClientIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutClientsClientIDMethodNotAllowedBodyAO0
	var putClientsClientIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putClientsClientIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putClientsClientIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClientsClientIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClientsClientIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClientsClientIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clients client ID method not allowed body
func (o *PutClientsClientIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClientsClientIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClientsClientIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutClientsClientIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutClientsClientIDNotFoundBody put clients client ID not found body
// swagger:model PutClientsClientIDNotFoundBody
type PutClientsClientIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClientsClientIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutClientsClientIDNotFoundBodyAO0
	var putClientsClientIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putClientsClientIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putClientsClientIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClientsClientIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClientsClientIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClientsClientIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clients client ID not found body
func (o *PutClientsClientIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClientsClientIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClientsClientIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutClientsClientIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutClientsClientIDOKBody put clients client ID o k body
// swagger:model PutClientsClientIDOKBody
type PutClientsClientIDOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClientsClientIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutClientsClientIDOKBodyAO0
	var putClientsClientIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putClientsClientIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putClientsClientIDOKBodyAO0

	// PutClientsClientIDOKBodyAO1
	var dataPutClientsClientIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutClientsClientIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutClientsClientIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClientsClientIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putClientsClientIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClientsClientIDOKBodyAO0)

	var dataPutClientsClientIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPutClientsClientIDOKBodyAO1.Data = o.Data

	jsonDataPutClientsClientIDOKBodyAO1, errPutClientsClientIDOKBodyAO1 := swag.WriteJSON(dataPutClientsClientIDOKBodyAO1)
	if errPutClientsClientIDOKBodyAO1 != nil {
		return nil, errPutClientsClientIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutClientsClientIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clients client ID o k body
func (o *PutClientsClientIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutClientsClientIDOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("putClientsClientIdOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putClientsClientIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutClientsClientIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClientsClientIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutClientsClientIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
