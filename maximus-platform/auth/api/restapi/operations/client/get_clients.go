// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetClientsHandlerFunc turns a function with the right signature into a get clients handler
type GetClientsHandlerFunc func(GetClientsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetClientsHandlerFunc) Handle(params GetClientsParams) middleware.Responder {
	return fn(params)
}

// GetClientsHandler interface for that can handle valid get clients params
type GetClientsHandler interface {
	Handle(GetClientsParams) middleware.Responder
}

// NewGetClients creates a new http.Handler for the get clients operation
func NewGetClients(ctx *middleware.Context, handler GetClientsHandler) *GetClients {
	return &GetClients{Context: ctx, Handler: handler}
}

/*GetClients swagger:route GET /clients Client getClients

Коллекция клиентов

*/
type GetClients struct {
	Context *middleware.Context
	Handler GetClientsHandler
}

func (o *GetClients) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetClientsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Идентификатор клиента
	ID string `json:"ID,omitempty"`

	models.ClientParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	// AO1
	var aO1 models.ClientParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ClientParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`
	}

	dataAO0.ID = o.ID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.ClientParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ClientParams
	if err := o.ClientParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetClientsInternalServerErrorBody get clients internal server error body
// swagger:model GetClientsInternalServerErrorBody
type GetClientsInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetClientsInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetClientsInternalServerErrorBodyAO0
	var getClientsInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getClientsInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getClientsInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetClientsInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getClientsInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getClientsInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get clients internal server error body
func (o *GetClientsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetClientsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetClientsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetClientsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetClientsMethodNotAllowedBody get clients method not allowed body
// swagger:model GetClientsMethodNotAllowedBody
type GetClientsMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetClientsMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetClientsMethodNotAllowedBodyAO0
	var getClientsMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getClientsMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getClientsMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetClientsMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getClientsMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getClientsMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get clients method not allowed body
func (o *GetClientsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetClientsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetClientsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetClientsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetClientsOKBody get clients o k body
// swagger:model GetClientsOKBody
type GetClientsOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetClientsOKBody) UnmarshalJSON(raw []byte) error {
	// GetClientsOKBodyAO0
	var getClientsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getClientsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getClientsOKBodyAO0

	// GetClientsOKBodyAO1
	var dataGetClientsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetClientsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetClientsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetClientsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getClientsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getClientsOKBodyAO0)

	var dataGetClientsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataGetClientsOKBodyAO1.Data = o.Data

	jsonDataGetClientsOKBodyAO1, errGetClientsOKBodyAO1 := swag.WriteJSON(dataGetClientsOKBodyAO1)
	if errGetClientsOKBodyAO1 != nil {
		return nil, errGetClientsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetClientsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get clients o k body
func (o *GetClientsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetClientsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getClientsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getClientsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetClientsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetClientsOKBody) UnmarshalBinary(b []byte) error {
	var res GetClientsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
