// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PatchClientsClientIDHandlerFunc turns a function with the right signature into a patch clients client ID handler
type PatchClientsClientIDHandlerFunc func(PatchClientsClientIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchClientsClientIDHandlerFunc) Handle(params PatchClientsClientIDParams) middleware.Responder {
	return fn(params)
}

// PatchClientsClientIDHandler interface for that can handle valid patch clients client ID params
type PatchClientsClientIDHandler interface {
	Handle(PatchClientsClientIDParams) middleware.Responder
}

// NewPatchClientsClientID creates a new http.Handler for the patch clients client ID operation
func NewPatchClientsClientID(ctx *middleware.Context, handler PatchClientsClientIDHandler) *PatchClientsClientID {
	return &PatchClientsClientID{Context: ctx, Handler: handler}
}

/*PatchClientsClientID swagger:route PATCH /clients/{clientID} Client patchClientsClientId

Изменение клиента

*/
type PatchClientsClientID struct {
	Context *middleware.Context
	Handler PatchClientsClientIDHandler
}

func (o *PatchClientsClientID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchClientsClientIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchClientsClientIDBadRequestBody patch clients client ID bad request body
// swagger:model PatchClientsClientIDBadRequestBody
type PatchClientsClientIDBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *PatchClientsClientIDBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchClientsClientIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PatchClientsClientIDBadRequestBodyAO0
	var patchClientsClientIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &patchClientsClientIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = patchClientsClientIDBadRequestBodyAO0

	// PatchClientsClientIDBadRequestBodyAO1
	var dataPatchClientsClientIDBadRequestBodyAO1 struct {
		Errors *PatchClientsClientIDBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataPatchClientsClientIDBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataPatchClientsClientIDBadRequestBodyAO1.Errors

	o.Message = dataPatchClientsClientIDBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchClientsClientIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patchClientsClientIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchClientsClientIDBadRequestBodyAO0)

	var dataPatchClientsClientIDBadRequestBodyAO1 struct {
		Errors *PatchClientsClientIDBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataPatchClientsClientIDBadRequestBodyAO1.Errors = o.Errors

	dataPatchClientsClientIDBadRequestBodyAO1.Message = o.Message

	jsonDataPatchClientsClientIDBadRequestBodyAO1, errPatchClientsClientIDBadRequestBodyAO1 := swag.WriteJSON(dataPatchClientsClientIDBadRequestBodyAO1)
	if errPatchClientsClientIDBadRequestBodyAO1 != nil {
		return nil, errPatchClientsClientIDBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPatchClientsClientIDBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch clients client ID bad request body
func (o *PatchClientsClientIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchClientsClientIDBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("patchClientsClientIdBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("patchClientsClientIdBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *PatchClientsClientIDBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("patchClientsClientIdBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchClientsClientIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchClientsClientIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PatchClientsClientIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchClientsClientIDBadRequestBodyAO1Errors patch clients client ID bad request body a o1 errors
// swagger:model PatchClientsClientIDBadRequestBodyAO1Errors
type PatchClientsClientIDBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this patch clients client ID bad request body a o1 errors
func (o *PatchClientsClientIDBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PatchClientsClientIDBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchClientsClientIDBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res PatchClientsClientIDBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchClientsClientIDBody patch clients client ID body
// swagger:model PatchClientsClientIDBody
type PatchClientsClientIDBody struct {
	models.PatchClientParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchClientsClientIDBody) UnmarshalJSON(raw []byte) error {
	// PatchClientsClientIDParamsBodyAO0
	var patchClientsClientIDParamsBodyAO0 models.PatchClientParams
	if err := swag.ReadJSON(raw, &patchClientsClientIDParamsBodyAO0); err != nil {
		return err
	}
	o.PatchClientParams = patchClientsClientIDParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchClientsClientIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patchClientsClientIDParamsBodyAO0, err := swag.WriteJSON(o.PatchClientParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchClientsClientIDParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch clients client ID body
func (o *PatchClientsClientIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PatchClientParams
	if err := o.PatchClientParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatchClientsClientIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchClientsClientIDBody) UnmarshalBinary(b []byte) error {
	var res PatchClientsClientIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchClientsClientIDInternalServerErrorBody patch clients client ID internal server error body
// swagger:model PatchClientsClientIDInternalServerErrorBody
type PatchClientsClientIDInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchClientsClientIDInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PatchClientsClientIDInternalServerErrorBodyAO0
	var patchClientsClientIDInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &patchClientsClientIDInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = patchClientsClientIDInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchClientsClientIDInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patchClientsClientIDInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchClientsClientIDInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch clients client ID internal server error body
func (o *PatchClientsClientIDInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatchClientsClientIDInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchClientsClientIDInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PatchClientsClientIDInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchClientsClientIDMethodNotAllowedBody patch clients client ID method not allowed body
// swagger:model PatchClientsClientIDMethodNotAllowedBody
type PatchClientsClientIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchClientsClientIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PatchClientsClientIDMethodNotAllowedBodyAO0
	var patchClientsClientIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &patchClientsClientIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = patchClientsClientIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchClientsClientIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patchClientsClientIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchClientsClientIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch clients client ID method not allowed body
func (o *PatchClientsClientIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatchClientsClientIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchClientsClientIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PatchClientsClientIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchClientsClientIDNotFoundBody patch clients client ID not found body
// swagger:model PatchClientsClientIDNotFoundBody
type PatchClientsClientIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchClientsClientIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PatchClientsClientIDNotFoundBodyAO0
	var patchClientsClientIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &patchClientsClientIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = patchClientsClientIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchClientsClientIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	patchClientsClientIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchClientsClientIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch clients client ID not found body
func (o *PatchClientsClientIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PatchClientsClientIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchClientsClientIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PatchClientsClientIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PatchClientsClientIDOKBody patch clients client ID o k body
// swagger:model PatchClientsClientIDOKBody
type PatchClientsClientIDOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PatchClientsClientIDOKBody) UnmarshalJSON(raw []byte) error {
	// PatchClientsClientIDOKBodyAO0
	var patchClientsClientIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &patchClientsClientIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = patchClientsClientIDOKBodyAO0

	// PatchClientsClientIDOKBodyAO1
	var dataPatchClientsClientIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPatchClientsClientIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPatchClientsClientIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PatchClientsClientIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	patchClientsClientIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, patchClientsClientIDOKBodyAO0)

	var dataPatchClientsClientIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPatchClientsClientIDOKBodyAO1.Data = o.Data

	jsonDataPatchClientsClientIDOKBodyAO1, errPatchClientsClientIDOKBodyAO1 := swag.WriteJSON(dataPatchClientsClientIDOKBodyAO1)
	if errPatchClientsClientIDOKBodyAO1 != nil {
		return nil, errPatchClientsClientIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPatchClientsClientIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this patch clients client ID o k body
func (o *PatchClientsClientIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchClientsClientIDOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("patchClientsClientIdOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("patchClientsClientIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchClientsClientIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchClientsClientIDOKBody) UnmarshalBinary(b []byte) error {
	var res PatchClientsClientIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
