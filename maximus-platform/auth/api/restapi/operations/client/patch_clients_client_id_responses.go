// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PatchClientsClientIDOKCode is the HTTP code returned for type PatchClientsClientIDOK
const PatchClientsClientIDOKCode int = 200

/*PatchClientsClientIDOK Объект клиента

swagger:response patchClientsClientIdOK
*/
type PatchClientsClientIDOK struct {

	/*
	  In: Body
	*/
	Payload *PatchClientsClientIDOKBody `json:"body,omitempty"`
}

// NewPatchClientsClientIDOK creates PatchClientsClientIDOK with default headers values
func NewPatchClientsClientIDOK() *PatchClientsClientIDOK {

	return &PatchClientsClientIDOK{}
}

// WithPayload adds the payload to the patch clients client Id o k response
func (o *PatchClientsClientIDOK) WithPayload(payload *PatchClientsClientIDOKBody) *PatchClientsClientIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch clients client Id o k response
func (o *PatchClientsClientIDOK) SetPayload(payload *PatchClientsClientIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchClientsClientIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchClientsClientIDBadRequestCode is the HTTP code returned for type PatchClientsClientIDBadRequest
const PatchClientsClientIDBadRequestCode int = 400

/*PatchClientsClientIDBadRequest Коллекция авторизации

swagger:response patchClientsClientIdBadRequest
*/
type PatchClientsClientIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PatchClientsClientIDBadRequestBody `json:"body,omitempty"`
}

// NewPatchClientsClientIDBadRequest creates PatchClientsClientIDBadRequest with default headers values
func NewPatchClientsClientIDBadRequest() *PatchClientsClientIDBadRequest {

	return &PatchClientsClientIDBadRequest{}
}

// WithPayload adds the payload to the patch clients client Id bad request response
func (o *PatchClientsClientIDBadRequest) WithPayload(payload *PatchClientsClientIDBadRequestBody) *PatchClientsClientIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch clients client Id bad request response
func (o *PatchClientsClientIDBadRequest) SetPayload(payload *PatchClientsClientIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchClientsClientIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchClientsClientIDNotFoundCode is the HTTP code returned for type PatchClientsClientIDNotFound
const PatchClientsClientIDNotFoundCode int = 404

/*PatchClientsClientIDNotFound Not found

swagger:response patchClientsClientIdNotFound
*/
type PatchClientsClientIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *PatchClientsClientIDNotFoundBody `json:"body,omitempty"`
}

// NewPatchClientsClientIDNotFound creates PatchClientsClientIDNotFound with default headers values
func NewPatchClientsClientIDNotFound() *PatchClientsClientIDNotFound {

	return &PatchClientsClientIDNotFound{}
}

// WithPayload adds the payload to the patch clients client Id not found response
func (o *PatchClientsClientIDNotFound) WithPayload(payload *PatchClientsClientIDNotFoundBody) *PatchClientsClientIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch clients client Id not found response
func (o *PatchClientsClientIDNotFound) SetPayload(payload *PatchClientsClientIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchClientsClientIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchClientsClientIDMethodNotAllowedCode is the HTTP code returned for type PatchClientsClientIDMethodNotAllowed
const PatchClientsClientIDMethodNotAllowedCode int = 405

/*PatchClientsClientIDMethodNotAllowed Invalid Method

swagger:response patchClientsClientIdMethodNotAllowed
*/
type PatchClientsClientIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PatchClientsClientIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPatchClientsClientIDMethodNotAllowed creates PatchClientsClientIDMethodNotAllowed with default headers values
func NewPatchClientsClientIDMethodNotAllowed() *PatchClientsClientIDMethodNotAllowed {

	return &PatchClientsClientIDMethodNotAllowed{}
}

// WithPayload adds the payload to the patch clients client Id method not allowed response
func (o *PatchClientsClientIDMethodNotAllowed) WithPayload(payload *PatchClientsClientIDMethodNotAllowedBody) *PatchClientsClientIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch clients client Id method not allowed response
func (o *PatchClientsClientIDMethodNotAllowed) SetPayload(payload *PatchClientsClientIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchClientsClientIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchClientsClientIDInternalServerErrorCode is the HTTP code returned for type PatchClientsClientIDInternalServerError
const PatchClientsClientIDInternalServerErrorCode int = 500

/*PatchClientsClientIDInternalServerError Internal server error

swagger:response patchClientsClientIdInternalServerError
*/
type PatchClientsClientIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *PatchClientsClientIDInternalServerErrorBody `json:"body,omitempty"`
}

// NewPatchClientsClientIDInternalServerError creates PatchClientsClientIDInternalServerError with default headers values
func NewPatchClientsClientIDInternalServerError() *PatchClientsClientIDInternalServerError {

	return &PatchClientsClientIDInternalServerError{}
}

// WithPayload adds the payload to the patch clients client Id internal server error response
func (o *PatchClientsClientIDInternalServerError) WithPayload(payload *PatchClientsClientIDInternalServerErrorBody) *PatchClientsClientIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch clients client Id internal server error response
func (o *PatchClientsClientIDInternalServerError) SetPayload(payload *PatchClientsClientIDInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchClientsClientIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
