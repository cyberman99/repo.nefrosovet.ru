// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// PostClientsHandlerFunc turns a function with the right signature into a post clients handler
type PostClientsHandlerFunc func(PostClientsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostClientsHandlerFunc) Handle(params PostClientsParams) middleware.Responder {
	return fn(params)
}

// PostClientsHandler interface for that can handle valid post clients params
type PostClientsHandler interface {
	Handle(PostClientsParams) middleware.Responder
}

// NewPostClients creates a new http.Handler for the post clients operation
func NewPostClients(ctx *middleware.Context, handler PostClientsHandler) *PostClients {
	return &PostClients{Context: ctx, Handler: handler}
}

/*PostClients swagger:route POST /clients Client postClients

Создание клиента

*/
type PostClients struct {
	Context *middleware.Context
	Handler PostClientsHandler
}

func (o *PostClients) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostClientsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostClientsBadRequestBody post clients bad request body
// swagger:model PostClientsBadRequestBody
type PostClientsBadRequestBody struct {
	models.Error400Data

	// errors
	// Required: true
	Errors *PostClientsBadRequestBodyAO1Errors `json:"errors"`

	// message
	// Required: true
	Message *string `json:"message"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientsBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostClientsBadRequestBodyAO0
	var postClientsBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postClientsBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postClientsBadRequestBodyAO0

	// PostClientsBadRequestBodyAO1
	var dataPostClientsBadRequestBodyAO1 struct {
		Errors *PostClientsBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}
	if err := swag.ReadJSON(raw, &dataPostClientsBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataPostClientsBadRequestBodyAO1.Errors

	o.Message = dataPostClientsBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientsBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postClientsBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientsBadRequestBodyAO0)

	var dataPostClientsBadRequestBodyAO1 struct {
		Errors *PostClientsBadRequestBodyAO1Errors `json:"errors"`

		Message *string `json:"message"`
	}

	dataPostClientsBadRequestBodyAO1.Errors = o.Errors

	dataPostClientsBadRequestBodyAO1.Message = o.Message

	jsonDataPostClientsBadRequestBodyAO1, errPostClientsBadRequestBodyAO1 := swag.WriteJSON(dataPostClientsBadRequestBodyAO1)
	if errPostClientsBadRequestBodyAO1 != nil {
		return nil, errPostClientsBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPostClientsBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clients bad request body
func (o *PostClientsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostClientsBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("postClientsBadRequest"+"."+"errors", "body", o.Errors); err != nil {
		return err
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postClientsBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

func (o *PostClientsBadRequestBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("postClientsBadRequest"+"."+"message", "body", o.Message); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostClientsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostClientsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientsBadRequestBodyAO1Errors post clients bad request body a o1 errors
// swagger:model PostClientsBadRequestBodyAO1Errors
type PostClientsBadRequestBodyAO1Errors struct {

	// core
	Core string `json:"core,omitempty"`

	// json
	JSON string `json:"json,omitempty"`

	// validation
	Validation interface{} `json:"validation,omitempty"`
}

// Validate validates this post clients bad request body a o1 errors
func (o *PostClientsBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientsBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientsBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res PostClientsBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientsBody post clients body
// swagger:model PostClientsBody
type PostClientsBody struct {
	models.ClientParams

	models.PasswordObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientsBody) UnmarshalJSON(raw []byte) error {
	// PostClientsParamsBodyAO0
	var postClientsParamsBodyAO0 models.ClientParams
	if err := swag.ReadJSON(raw, &postClientsParamsBodyAO0); err != nil {
		return err
	}
	o.ClientParams = postClientsParamsBodyAO0

	// PostClientsParamsBodyAO1
	var postClientsParamsBodyAO1 models.PasswordObject
	if err := swag.ReadJSON(raw, &postClientsParamsBodyAO1); err != nil {
		return err
	}
	o.PasswordObject = postClientsParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientsBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postClientsParamsBodyAO0, err := swag.WriteJSON(o.ClientParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientsParamsBodyAO0)

	postClientsParamsBodyAO1, err := swag.WriteJSON(o.PasswordObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientsParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clients body
func (o *PostClientsBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ClientParams
	if err := o.ClientParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PasswordObject
	if err := o.PasswordObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientsBody) UnmarshalBinary(b []byte) error {
	var res PostClientsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientsInternalServerErrorBody post clients internal server error body
// swagger:model PostClientsInternalServerErrorBody
type PostClientsInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientsInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostClientsInternalServerErrorBodyAO0
	var postClientsInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &postClientsInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = postClientsInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientsInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClientsInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientsInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clients internal server error body
func (o *PostClientsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostClientsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientsMethodNotAllowedBody post clients method not allowed body
// swagger:model PostClientsMethodNotAllowedBody
type PostClientsMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientsMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostClientsMethodNotAllowedBodyAO0
	var postClientsMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postClientsMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postClientsMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientsMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClientsMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientsMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clients method not allowed body
func (o *PostClientsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostClientsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientsNotFoundBody post clients not found body
// swagger:model PostClientsNotFoundBody
type PostClientsNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientsNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PostClientsNotFoundBodyAO0
	var postClientsNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &postClientsNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = postClientsNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientsNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClientsNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientsNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clients not found body
func (o *PostClientsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClientsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostClientsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostClientsOKBody post clients o k body
// swagger:model PostClientsOKBody
type PostClientsOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClientsOKBody) UnmarshalJSON(raw []byte) error {
	// PostClientsOKBodyAO0
	var postClientsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postClientsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postClientsOKBodyAO0

	// PostClientsOKBodyAO1
	var dataPostClientsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostClientsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostClientsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClientsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postClientsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClientsOKBodyAO0)

	var dataPostClientsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPostClientsOKBodyAO1.Data = o.Data

	jsonDataPostClientsOKBodyAO1, errPostClientsOKBodyAO1 := swag.WriteJSON(dataPostClientsOKBodyAO1)
	if errPostClientsOKBodyAO1 != nil {
		return nil, errPostClientsOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostClientsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clients o k body
func (o *PostClientsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostClientsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("postClientsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postClientsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostClientsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClientsOKBody) UnmarshalBinary(b []byte) error {
	var res PostClientsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
