// Code generated by go-swagger; DO NOT EDIT.

package j_w_k

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/auth/api/models"
)

// GetJwkHandlerFunc turns a function with the right signature into a get jwk handler
type GetJwkHandlerFunc func(GetJwkParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetJwkHandlerFunc) Handle(params GetJwkParams) middleware.Responder {
	return fn(params)
}

// GetJwkHandler interface for that can handle valid get jwk params
type GetJwkHandler interface {
	Handle(GetJwkParams) middleware.Responder
}

// NewGetJwk creates a new http.Handler for the get jwk operation
func NewGetJwk(ctx *middleware.Context, handler GetJwkHandler) *GetJwk {
	return &GetJwk{Context: ctx, Handler: handler}
}

/*GetJwk swagger:route GET /jwk JWK getJwk

Информация о ключе

*/
type GetJwk struct {
	Context *middleware.Context
	Handler GetJwkHandler
}

func (o *GetJwk) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetJwkParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetJwkInternalServerErrorBody get jwk internal server error body
// swagger:model GetJwkInternalServerErrorBody
type GetJwkInternalServerErrorBody struct {
	models.Error500Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetJwkInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// GetJwkInternalServerErrorBodyAO0
	var getJwkInternalServerErrorBodyAO0 models.Error500Data
	if err := swag.ReadJSON(raw, &getJwkInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error500Data = getJwkInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetJwkInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getJwkInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error500Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getJwkInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get jwk internal server error body
func (o *GetJwkInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error500Data
	if err := o.Error500Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetJwkInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJwkInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetJwkInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetJwkOKBody get jwk o k body
// swagger:model GetJwkOKBody
type GetJwkOKBody struct {

	// keys
	// Required: true
	Keys []*KeysItems0 `json:"keys"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetJwkOKBody) UnmarshalJSON(raw []byte) error {
	// GetJwkOKBodyAO0
	var dataGetJwkOKBodyAO0 struct {
		Keys []*KeysItems0 `json:"keys"`
	}
	if err := swag.ReadJSON(raw, &dataGetJwkOKBodyAO0); err != nil {
		return err
	}

	o.Keys = dataGetJwkOKBodyAO0.Keys

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetJwkOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataGetJwkOKBodyAO0 struct {
		Keys []*KeysItems0 `json:"keys"`
	}

	dataGetJwkOKBodyAO0.Keys = o.Keys

	jsonDataGetJwkOKBodyAO0, errGetJwkOKBodyAO0 := swag.WriteJSON(dataGetJwkOKBodyAO0)
	if errGetJwkOKBodyAO0 != nil {
		return nil, errGetJwkOKBodyAO0
	}
	_parts = append(_parts, jsonDataGetJwkOKBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get jwk o k body
func (o *GetJwkOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJwkOKBody) validateKeys(formats strfmt.Registry) error {

	if err := validate.Required("getJwkOK"+"."+"keys", "body", o.Keys); err != nil {
		return err
	}

	for i := 0; i < len(o.Keys); i++ {
		if swag.IsZero(o.Keys[i]) { // not required
			continue
		}

		if o.Keys[i] != nil {
			if err := o.Keys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getJwkOK" + "." + "keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetJwkOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetJwkOKBody) UnmarshalBinary(b []byte) error {
	var res GetJwkOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// KeysItems0 keys items0
// swagger:model KeysItems0
type KeysItems0 struct {

	// Криптографический алгоритм подписи
	// Required: true
	// Enum: [HS256]
	Alg *string `json:"alg"`

	// Криптографический ключ
	// Required: true
	K *string `json:"k"`

	// Идентификатор ключа
	// Required: true
	Kid *string `json:"kid"`

	// ...
	// Required: true
	Kty *string `json:"kty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *KeysItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Alg *string `json:"alg"`

		K *string `json:"k"`

		Kid *string `json:"kid"`

		Kty *string `json:"kty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.Alg = dataAO0.Alg

	o.K = dataAO0.K

	o.Kid = dataAO0.Kid

	o.Kty = dataAO0.Kty

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o KeysItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Alg *string `json:"alg"`

		K *string `json:"k"`

		Kid *string `json:"kid"`

		Kty *string `json:"kty"`
	}

	dataAO0.Alg = o.Alg

	dataAO0.K = o.K

	dataAO0.Kid = o.Kid

	dataAO0.Kty = o.Kty

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this keys items0
func (o *KeysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAlg(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateK(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKid(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var keysItems0TypeAlgPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HS256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keysItems0TypeAlgPropEnum = append(keysItems0TypeAlgPropEnum, v)
	}
}

// property enum
func (o *KeysItems0) validateAlgEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, keysItems0TypeAlgPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *KeysItems0) validateAlg(formats strfmt.Registry) error {

	if err := validate.Required("alg", "body", o.Alg); err != nil {
		return err
	}

	// value enum
	if err := o.validateAlgEnum("alg", "body", *o.Alg); err != nil {
		return err
	}

	return nil
}

func (o *KeysItems0) validateK(formats strfmt.Registry) error {

	if err := validate.Required("k", "body", o.K); err != nil {
		return err
	}

	return nil
}

func (o *KeysItems0) validateKid(formats strfmt.Registry) error {

	if err := validate.Required("kid", "body", o.Kid); err != nil {
		return err
	}

	return nil
}

func (o *KeysItems0) validateKty(formats strfmt.Registry) error {

	if err := validate.Required("kty", "body", o.Kty); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *KeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeysItems0) UnmarshalBinary(b []byte) error {
	var res KeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
