// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackendPatchLdapParams Backend_patch_ldap_params
// swagger:model Backend_patch_ldap_params
type BackendPatchLdapParams struct {

	// База поиска
	BaseDN *string `json:"baseDN,omitempty"`

	// DN пользователя
	BindDN *string `json:"bindDN,omitempty"`

	// Использование шифрования
	// Enum: [NONE TLS STARTTLS]
	Cipher *string `json:"cipher,omitempty"`

	// Описание бэкенда
	Description *string `json:"description,omitempty"`

	// Фильтр поиска
	Filter *string `json:"filter,omitempty"`

	// Ldap хост
	Host *string `json:"host,omitempty"`

	// Пароль пользователя
	Password *string `json:"password,omitempty"`

	// Ldap порт
	Port *int64 `json:"port,omitempty"`

	// Сущность синхронизации
	// Enum: [PATIENT EMPLOYEE]
	Sync *string `json:"sync,omitempty"`
}

// Validate validates this backend patch ldap params
func (m *BackendPatchLdapParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCipher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSync(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var backendPatchLdapParamsTypeCipherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","TLS","STARTTLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backendPatchLdapParamsTypeCipherPropEnum = append(backendPatchLdapParamsTypeCipherPropEnum, v)
	}
}

const (

	// BackendPatchLdapParamsCipherNONE captures enum value "NONE"
	BackendPatchLdapParamsCipherNONE string = "NONE"

	// BackendPatchLdapParamsCipherTLS captures enum value "TLS"
	BackendPatchLdapParamsCipherTLS string = "TLS"

	// BackendPatchLdapParamsCipherSTARTTLS captures enum value "STARTTLS"
	BackendPatchLdapParamsCipherSTARTTLS string = "STARTTLS"
)

// prop value enum
func (m *BackendPatchLdapParams) validateCipherEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backendPatchLdapParamsTypeCipherPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackendPatchLdapParams) validateCipher(formats strfmt.Registry) error {

	if swag.IsZero(m.Cipher) { // not required
		return nil
	}

	// value enum
	if err := m.validateCipherEnum("cipher", "body", *m.Cipher); err != nil {
		return err
	}

	return nil
}

var backendPatchLdapParamsTypeSyncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PATIENT","EMPLOYEE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backendPatchLdapParamsTypeSyncPropEnum = append(backendPatchLdapParamsTypeSyncPropEnum, v)
	}
}

const (

	// BackendPatchLdapParamsSyncPATIENT captures enum value "PATIENT"
	BackendPatchLdapParamsSyncPATIENT string = "PATIENT"

	// BackendPatchLdapParamsSyncEMPLOYEE captures enum value "EMPLOYEE"
	BackendPatchLdapParamsSyncEMPLOYEE string = "EMPLOYEE"
)

// prop value enum
func (m *BackendPatchLdapParams) validateSyncEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backendPatchLdapParamsTypeSyncPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackendPatchLdapParams) validateSync(formats strfmt.Registry) error {

	if swag.IsZero(m.Sync) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyncEnum("sync", "body", *m.Sync); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackendPatchLdapParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackendPatchLdapParams) UnmarshalBinary(b []byte) error {
	var res BackendPatchLdapParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
