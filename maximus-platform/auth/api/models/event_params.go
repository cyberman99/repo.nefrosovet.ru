// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventParams Event_params
// swagger:model Event_params
type EventParams struct {

	// Идентификатор события
	// Required: true
	ID *string `json:"ID"`

	// IP адрес источника
	IP string `json:"IP,omitempty"`

	// Дата-время события
	// Required: true
	Created *string `json:"created"`

	// Идентификатор субъекта
	EntityID *string `json:"entityID,omitempty"`

	// Логин субъекта
	EntityLogin *string `json:"entityLogin,omitempty"`

	// Статус события
	// Required: true
	// Enum: [SUCCESS FAILED]
	Status *string `json:"status"`

	// Тип события
	// Required: true
	// Enum: [USER_LOGIN CLIENT_LOGIN DRIVER_LOGIN USER_REFRESH CLIENT_REFRESH]
	Type *string `json:"type"`
}

// Validate validates this event params
func (m *EventParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("ID", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *EventParams) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

var eventParamsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventParamsTypeStatusPropEnum = append(eventParamsTypeStatusPropEnum, v)
	}
}

const (

	// EventParamsStatusSUCCESS captures enum value "SUCCESS"
	EventParamsStatusSUCCESS string = "SUCCESS"

	// EventParamsStatusFAILED captures enum value "FAILED"
	EventParamsStatusFAILED string = "FAILED"
)

// prop value enum
func (m *EventParams) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventParamsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var eventParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER_LOGIN","CLIENT_LOGIN","DRIVER_LOGIN","USER_REFRESH","CLIENT_REFRESH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventParamsTypeTypePropEnum = append(eventParamsTypeTypePropEnum, v)
	}
}

const (

	// EventParamsTypeUSERLOGIN captures enum value "USER_LOGIN"
	EventParamsTypeUSERLOGIN string = "USER_LOGIN"

	// EventParamsTypeCLIENTLOGIN captures enum value "CLIENT_LOGIN"
	EventParamsTypeCLIENTLOGIN string = "CLIENT_LOGIN"

	// EventParamsTypeDRIVERLOGIN captures enum value "DRIVER_LOGIN"
	EventParamsTypeDRIVERLOGIN string = "DRIVER_LOGIN"

	// EventParamsTypeUSERREFRESH captures enum value "USER_REFRESH"
	EventParamsTypeUSERREFRESH string = "USER_REFRESH"

	// EventParamsTypeCLIENTREFRESH captures enum value "CLIENT_REFRESH"
	EventParamsTypeCLIENTREFRESH string = "CLIENT_REFRESH"
)

// prop value enum
func (m *EventParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventParamsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventParams) UnmarshalBinary(b []byte) error {
	var res EventParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
