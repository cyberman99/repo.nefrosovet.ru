// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackendLdapParams Backend_ldap_params
// swagger:model Backend_ldap_params
type BackendLdapParams struct {

	// База поиска
	// Required: true
	BaseDN *string `json:"baseDN"`

	// DN пользователя
	// Required: true
	BindDN *string `json:"bindDN"`

	// Использование шифрования
	// Enum: [NONE TLS STARTTLS]
	Cipher *string `json:"cipher,omitempty"`

	// Фильтр поиска
	// Required: true
	Filter *string `json:"filter"`

	// Ldap хост
	// Required: true
	Host *string `json:"host"`

	// Ldap порт
	// Required: true
	Port *int64 `json:"port"`

	// Сущность синхронизации
	// Required: true
	// Enum: [PATIENT EMPLOYEE]
	Sync *string `json:"sync"`
}

// Validate validates this backend ldap params
func (m *BackendLdapParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseDN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBindDN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCipher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSync(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackendLdapParams) validateBaseDN(formats strfmt.Registry) error {

	if err := validate.Required("baseDN", "body", m.BaseDN); err != nil {
		return err
	}

	return nil
}

func (m *BackendLdapParams) validateBindDN(formats strfmt.Registry) error {

	if err := validate.Required("bindDN", "body", m.BindDN); err != nil {
		return err
	}

	return nil
}

var backendLdapParamsTypeCipherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","TLS","STARTTLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backendLdapParamsTypeCipherPropEnum = append(backendLdapParamsTypeCipherPropEnum, v)
	}
}

const (

	// BackendLdapParamsCipherNONE captures enum value "NONE"
	BackendLdapParamsCipherNONE string = "NONE"

	// BackendLdapParamsCipherTLS captures enum value "TLS"
	BackendLdapParamsCipherTLS string = "TLS"

	// BackendLdapParamsCipherSTARTTLS captures enum value "STARTTLS"
	BackendLdapParamsCipherSTARTTLS string = "STARTTLS"
)

// prop value enum
func (m *BackendLdapParams) validateCipherEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backendLdapParamsTypeCipherPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackendLdapParams) validateCipher(formats strfmt.Registry) error {

	if swag.IsZero(m.Cipher) { // not required
		return nil
	}

	// value enum
	if err := m.validateCipherEnum("cipher", "body", *m.Cipher); err != nil {
		return err
	}

	return nil
}

func (m *BackendLdapParams) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	return nil
}

func (m *BackendLdapParams) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *BackendLdapParams) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

var backendLdapParamsTypeSyncPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PATIENT","EMPLOYEE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		backendLdapParamsTypeSyncPropEnum = append(backendLdapParamsTypeSyncPropEnum, v)
	}
}

const (

	// BackendLdapParamsSyncPATIENT captures enum value "PATIENT"
	BackendLdapParamsSyncPATIENT string = "PATIENT"

	// BackendLdapParamsSyncEMPLOYEE captures enum value "EMPLOYEE"
	BackendLdapParamsSyncEMPLOYEE string = "EMPLOYEE"
)

// prop value enum
func (m *BackendLdapParams) validateSyncEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, backendLdapParamsTypeSyncPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BackendLdapParams) validateSync(formats strfmt.Registry) error {

	if err := validate.Required("sync", "body", m.Sync); err != nil {
		return err
	}

	// value enum
	if err := m.validateSyncEnum("sync", "body", *m.Sync); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackendLdapParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackendLdapParams) UnmarshalBinary(b []byte) error {
	var res BackendLdapParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
