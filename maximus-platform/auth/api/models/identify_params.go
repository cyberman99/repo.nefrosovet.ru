// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IdentifyParams Identify_params
// swagger:model Identify_params
type IdentifyParams struct {

	// Номер смарт-карты
	// Required: true
	CardNumber *string `json:"cardNumber"`

	// Тип пользователя
	// Enum: [PATIENT EMPLOYEE]
	User string `json:"user,omitempty"`
}

// Validate validates this identify params
func (m *IdentifyParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCardNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IdentifyParams) validateCardNumber(formats strfmt.Registry) error {

	if err := validate.Required("cardNumber", "body", m.CardNumber); err != nil {
		return err
	}

	return nil
}

var identifyParamsTypeUserPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PATIENT","EMPLOYEE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		identifyParamsTypeUserPropEnum = append(identifyParamsTypeUserPropEnum, v)
	}
}

const (

	// IdentifyParamsUserPATIENT captures enum value "PATIENT"
	IdentifyParamsUserPATIENT string = "PATIENT"

	// IdentifyParamsUserEMPLOYEE captures enum value "EMPLOYEE"
	IdentifyParamsUserEMPLOYEE string = "EMPLOYEE"
)

// prop value enum
func (m *IdentifyParams) validateUserEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, identifyParamsTypeUserPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IdentifyParams) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserEnum("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IdentifyParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IdentifyParams) UnmarshalBinary(b []byte) error {
	var res IdentifyParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
