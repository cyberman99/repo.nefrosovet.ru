// Code generated by go-swagger; DO NOT EDIT.

package utils

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PostLinkReader is a Reader for the PostLink structure.
type PostLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPostLinkMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostLinkOK creates a PostLinkOK with default headers values
func NewPostLinkOK() *PostLinkOK {
	return &PostLinkOK{}
}

/*PostLinkOK handles this case with default header values.

Коллекция пациентов
*/
type PostLinkOK struct {
	Payload *PostLinkOKBody
}

func (o *PostLinkOK) Error() string {
	return fmt.Sprintf("[POST /link][%d] postLinkOK  %+v", 200, o.Payload)
}

func (o *PostLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostLinkOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLinkBadRequest creates a PostLinkBadRequest with default headers values
func NewPostLinkBadRequest() *PostLinkBadRequest {
	return &PostLinkBadRequest{}
}

/*PostLinkBadRequest handles this case with default header values.

Validation error
*/
type PostLinkBadRequest struct {
	Payload *PostLinkBadRequestBody
}

func (o *PostLinkBadRequest) Error() string {
	return fmt.Sprintf("[POST /link][%d] postLinkBadRequest  %+v", 400, o.Payload)
}

func (o *PostLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostLinkBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostLinkMethodNotAllowed creates a PostLinkMethodNotAllowed with default headers values
func NewPostLinkMethodNotAllowed() *PostLinkMethodNotAllowed {
	return &PostLinkMethodNotAllowed{}
}

/*PostLinkMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PostLinkMethodNotAllowed struct {
	Payload *PostLinkMethodNotAllowedBody
}

func (o *PostLinkMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /link][%d] postLinkMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostLinkMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostLinkMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DataItems0 data items0
swagger:model DataItems0
*/
type DataItems0 struct {
	models.MainData

	models.ExtendedData

	models.PatientObject

	// class
	Class interface{} `json:"class,omitempty"`

	// source GUID
	SourceGUID []string `json:"sourceGUID"`

	// Ссылка на GUID смерженной записи
	TargetGUID string `json:"targetGUID,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 models.MainData
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	o.MainData = aO0

	// AO1
	var aO1 models.ExtendedData
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ExtendedData = aO1

	// AO2
	var aO2 models.PatientObject
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	o.PatientObject = aO2

	// AO3
	var dataAO3 struct {
		Class interface{} `json:"class,omitempty"`

		SourceGUID []string `json:"sourceGUID,omitempty"`

		TargetGUID string `json:"targetGUID,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO3); err != nil {
		return err
	}

	o.Class = dataAO3.Class

	o.SourceGUID = dataAO3.SourceGUID

	o.TargetGUID = dataAO3.TargetGUID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 4)

	aO0, err := swag.WriteJSON(o.MainData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(o.ExtendedData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(o.PatientObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	var dataAO3 struct {
		Class interface{} `json:"class,omitempty"`

		SourceGUID []string `json:"sourceGUID,omitempty"`

		TargetGUID string `json:"targetGUID,omitempty"`
	}

	dataAO3.Class = o.Class

	dataAO3.SourceGUID = o.SourceGUID

	dataAO3.TargetGUID = o.TargetGUID

	jsonDataAO3, errAO3 := swag.WriteJSON(dataAO3)
	if errAO3 != nil {
		return nil, errAO3
	}
	_parts = append(_parts, jsonDataAO3)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainData
	if err := o.MainData.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.ExtendedData
	if err := o.ExtendedData.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PatientObject
	if err := o.PatientObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLinkBadRequestBody post link bad request body
swagger:model PostLinkBadRequestBody
*/
type PostLinkBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostLinkBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostLinkBadRequestBodyAO0
	var postLinkBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postLinkBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postLinkBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostLinkBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postLinkBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postLinkBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post link bad request body
func (o *PostLinkBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostLinkBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLinkBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostLinkBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLinkMethodNotAllowedBody post link method not allowed body
swagger:model PostLinkMethodNotAllowedBody
*/
type PostLinkMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostLinkMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostLinkMethodNotAllowedBodyAO0
	var postLinkMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postLinkMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postLinkMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostLinkMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postLinkMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postLinkMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post link method not allowed body
func (o *PostLinkMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostLinkMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLinkMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostLinkMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostLinkOKBody post link o k body
swagger:model PostLinkOKBody
*/
type PostLinkOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostLinkOKBody) UnmarshalJSON(raw []byte) error {
	// PostLinkOKBodyAO0
	var postLinkOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postLinkOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postLinkOKBodyAO0

	// PostLinkOKBodyAO1
	var dataPostLinkOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostLinkOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostLinkOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostLinkOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postLinkOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postLinkOKBodyAO0)

	var dataPostLinkOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPostLinkOKBodyAO1.Data = o.Data

	jsonDataPostLinkOKBodyAO1, errPostLinkOKBodyAO1 := swag.WriteJSON(dataPostLinkOKBodyAO1)
	if errPostLinkOKBodyAO1 != nil {
		return nil, errPostLinkOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostLinkOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post link o k body
func (o *PostLinkOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostLinkOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postLinkOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostLinkOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostLinkOKBody) UnmarshalBinary(b []byte) error {
	var res PostLinkOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
