// Code generated by go-swagger; DO NOT EDIT.

package employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PostEmployeesReader is a Reader for the PostEmployees structure.
type PostEmployeesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostEmployeesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostEmployeesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostEmployeesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPostEmployeesMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostEmployeesOK creates a PostEmployeesOK with default headers values
func NewPostEmployeesOK() *PostEmployeesOK {
	return &PostEmployeesOK{}
}

/*PostEmployeesOK handles this case with default header values.

Коллекция сотрудников
*/
type PostEmployeesOK struct {
	Payload *PostEmployeesOKBody
}

func (o *PostEmployeesOK) Error() string {
	return fmt.Sprintf("[POST /employees][%d] postEmployeesOK  %+v", 200, o.Payload)
}

func (o *PostEmployeesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostEmployeesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEmployeesBadRequest creates a PostEmployeesBadRequest with default headers values
func NewPostEmployeesBadRequest() *PostEmployeesBadRequest {
	return &PostEmployeesBadRequest{}
}

/*PostEmployeesBadRequest handles this case with default header values.

Validation error
*/
type PostEmployeesBadRequest struct {
	Payload *PostEmployeesBadRequestBody
}

func (o *PostEmployeesBadRequest) Error() string {
	return fmt.Sprintf("[POST /employees][%d] postEmployeesBadRequest  %+v", 400, o.Payload)
}

func (o *PostEmployeesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostEmployeesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostEmployeesMethodNotAllowed creates a PostEmployeesMethodNotAllowed with default headers values
func NewPostEmployeesMethodNotAllowed() *PostEmployeesMethodNotAllowed {
	return &PostEmployeesMethodNotAllowed{}
}

/*PostEmployeesMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PostEmployeesMethodNotAllowed struct {
	Payload *PostEmployeesMethodNotAllowedBody
}

func (o *PostEmployeesMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /employees][%d] postEmployeesMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostEmployeesMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostEmployeesMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostEmployeesBadRequestBody post employees bad request body
swagger:model PostEmployeesBadRequestBody
*/
type PostEmployeesBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostEmployeesBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostEmployeesBadRequestBodyAO0
	var postEmployeesBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postEmployeesBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postEmployeesBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostEmployeesBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postEmployeesBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postEmployeesBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post employees bad request body
func (o *PostEmployeesBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostEmployeesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEmployeesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostEmployeesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostEmployeesBody post employees body
swagger:model PostEmployeesBody
*/
type PostEmployeesBody struct {
	models.MainData

	models.EmployeeObject

	models.PasswordObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostEmployeesBody) UnmarshalJSON(raw []byte) error {
	// PostEmployeesParamsBodyAO0
	var postEmployeesParamsBodyAO0 models.MainData
	if err := swag.ReadJSON(raw, &postEmployeesParamsBodyAO0); err != nil {
		return err
	}
	o.MainData = postEmployeesParamsBodyAO0

	// PostEmployeesParamsBodyAO1
	var postEmployeesParamsBodyAO1 models.EmployeeObject
	if err := swag.ReadJSON(raw, &postEmployeesParamsBodyAO1); err != nil {
		return err
	}
	o.EmployeeObject = postEmployeesParamsBodyAO1

	// PostEmployeesParamsBodyAO2
	var postEmployeesParamsBodyAO2 models.PasswordObject
	if err := swag.ReadJSON(raw, &postEmployeesParamsBodyAO2); err != nil {
		return err
	}
	o.PasswordObject = postEmployeesParamsBodyAO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostEmployeesBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	postEmployeesParamsBodyAO0, err := swag.WriteJSON(o.MainData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postEmployeesParamsBodyAO0)

	postEmployeesParamsBodyAO1, err := swag.WriteJSON(o.EmployeeObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postEmployeesParamsBodyAO1)

	postEmployeesParamsBodyAO2, err := swag.WriteJSON(o.PasswordObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postEmployeesParamsBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post employees body
func (o *PostEmployeesBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainData
	if err := o.MainData.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.EmployeeObject
	if err := o.EmployeeObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PasswordObject
	if err := o.PasswordObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostEmployeesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEmployeesBody) UnmarshalBinary(b []byte) error {
	var res PostEmployeesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostEmployeesMethodNotAllowedBody post employees method not allowed body
swagger:model PostEmployeesMethodNotAllowedBody
*/
type PostEmployeesMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostEmployeesMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostEmployeesMethodNotAllowedBodyAO0
	var postEmployeesMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postEmployeesMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postEmployeesMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostEmployeesMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postEmployeesMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postEmployeesMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post employees method not allowed body
func (o *PostEmployeesMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostEmployeesMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEmployeesMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostEmployeesMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostEmployeesOKBody post employees o k body
swagger:model PostEmployeesOKBody
*/
type PostEmployeesOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostEmployeesOKBody) UnmarshalJSON(raw []byte) error {
	// PostEmployeesOKBodyAO0
	var postEmployeesOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postEmployeesOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postEmployeesOKBodyAO0

	// PostEmployeesOKBodyAO1
	var dataPostEmployeesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostEmployeesOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostEmployeesOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostEmployeesOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postEmployeesOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postEmployeesOKBodyAO0)

	var dataPostEmployeesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPostEmployeesOKBodyAO1.Data = o.Data

	jsonDataPostEmployeesOKBodyAO1, errPostEmployeesOKBodyAO1 := swag.WriteJSON(dataPostEmployeesOKBodyAO1)
	if errPostEmployeesOKBodyAO1 != nil {
		return nil, errPostEmployeesOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostEmployeesOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post employees o k body
func (o *PostEmployeesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostEmployeesOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postEmployeesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostEmployeesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostEmployeesOKBody) UnmarshalBinary(b []byte) error {
	var res PostEmployeesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
