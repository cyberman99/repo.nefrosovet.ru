// Code generated by go-swagger; DO NOT EDIT.

package patients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PutPatientsPatientGUIDReader is a Reader for the PutPatientsPatientGUID structure.
type PutPatientsPatientGUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutPatientsPatientGUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutPatientsPatientGUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutPatientsPatientGUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutPatientsPatientGUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPutPatientsPatientGUIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutPatientsPatientGUIDOK creates a PutPatientsPatientGUIDOK with default headers values
func NewPutPatientsPatientGUIDOK() *PutPatientsPatientGUIDOK {
	return &PutPatientsPatientGUIDOK{}
}

/*PutPatientsPatientGUIDOK handles this case with default header values.

Коллекция пациентов
*/
type PutPatientsPatientGUIDOK struct {
	Payload *PutPatientsPatientGUIDOKBody
}

func (o *PutPatientsPatientGUIDOK) Error() string {
	return fmt.Sprintf("[PUT /patients/{patientGUID}][%d] putPatientsPatientGuidOK  %+v", 200, o.Payload)
}

func (o *PutPatientsPatientGUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutPatientsPatientGUIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPatientsPatientGUIDBadRequest creates a PutPatientsPatientGUIDBadRequest with default headers values
func NewPutPatientsPatientGUIDBadRequest() *PutPatientsPatientGUIDBadRequest {
	return &PutPatientsPatientGUIDBadRequest{}
}

/*PutPatientsPatientGUIDBadRequest handles this case with default header values.

Validation error
*/
type PutPatientsPatientGUIDBadRequest struct {
	Payload *PutPatientsPatientGUIDBadRequestBody
}

func (o *PutPatientsPatientGUIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /patients/{patientGUID}][%d] putPatientsPatientGuidBadRequest  %+v", 400, o.Payload)
}

func (o *PutPatientsPatientGUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutPatientsPatientGUIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPatientsPatientGUIDNotFound creates a PutPatientsPatientGUIDNotFound with default headers values
func NewPutPatientsPatientGUIDNotFound() *PutPatientsPatientGUIDNotFound {
	return &PutPatientsPatientGUIDNotFound{}
}

/*PutPatientsPatientGUIDNotFound handles this case with default header values.

Not found
*/
type PutPatientsPatientGUIDNotFound struct {
	Payload *PutPatientsPatientGUIDNotFoundBody
}

func (o *PutPatientsPatientGUIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /patients/{patientGUID}][%d] putPatientsPatientGuidNotFound  %+v", 404, o.Payload)
}

func (o *PutPatientsPatientGUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutPatientsPatientGUIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPatientsPatientGUIDMethodNotAllowed creates a PutPatientsPatientGUIDMethodNotAllowed with default headers values
func NewPutPatientsPatientGUIDMethodNotAllowed() *PutPatientsPatientGUIDMethodNotAllowed {
	return &PutPatientsPatientGUIDMethodNotAllowed{}
}

/*PutPatientsPatientGUIDMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PutPatientsPatientGUIDMethodNotAllowed struct {
	Payload *PutPatientsPatientGUIDMethodNotAllowedBody
}

func (o *PutPatientsPatientGUIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /patients/{patientGUID}][%d] putPatientsPatientGuidMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PutPatientsPatientGUIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutPatientsPatientGUIDMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutPatientsPatientGUIDBadRequestBody put patients patient GUID bad request body
swagger:model PutPatientsPatientGUIDBadRequestBody
*/
type PutPatientsPatientGUIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutPatientsPatientGUIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutPatientsPatientGUIDBadRequestBodyAO0
	var putPatientsPatientGUIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putPatientsPatientGUIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putPatientsPatientGUIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutPatientsPatientGUIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putPatientsPatientGUIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putPatientsPatientGUIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put patients patient GUID bad request body
func (o *PutPatientsPatientGUIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutPatientsPatientGUIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPatientsPatientGUIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutPatientsPatientGUIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutPatientsPatientGUIDBody put patients patient GUID body
swagger:model PutPatientsPatientGUIDBody
*/
type PutPatientsPatientGUIDBody struct {
	models.PatientObject

	models.PasswordObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutPatientsPatientGUIDBody) UnmarshalJSON(raw []byte) error {
	// PutPatientsPatientGUIDParamsBodyAO0
	var putPatientsPatientGUIDParamsBodyAO0 models.PatientObject
	if err := swag.ReadJSON(raw, &putPatientsPatientGUIDParamsBodyAO0); err != nil {
		return err
	}
	o.PatientObject = putPatientsPatientGUIDParamsBodyAO0

	// PutPatientsPatientGUIDParamsBodyAO1
	var putPatientsPatientGUIDParamsBodyAO1 models.PasswordObject
	if err := swag.ReadJSON(raw, &putPatientsPatientGUIDParamsBodyAO1); err != nil {
		return err
	}
	o.PasswordObject = putPatientsPatientGUIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutPatientsPatientGUIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putPatientsPatientGUIDParamsBodyAO0, err := swag.WriteJSON(o.PatientObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putPatientsPatientGUIDParamsBodyAO0)

	putPatientsPatientGUIDParamsBodyAO1, err := swag.WriteJSON(o.PasswordObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putPatientsPatientGUIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put patients patient GUID body
func (o *PutPatientsPatientGUIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.PatientObject
	if err := o.PatientObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.PasswordObject
	if err := o.PasswordObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutPatientsPatientGUIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPatientsPatientGUIDBody) UnmarshalBinary(b []byte) error {
	var res PutPatientsPatientGUIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutPatientsPatientGUIDMethodNotAllowedBody put patients patient GUID method not allowed body
swagger:model PutPatientsPatientGUIDMethodNotAllowedBody
*/
type PutPatientsPatientGUIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutPatientsPatientGUIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutPatientsPatientGUIDMethodNotAllowedBodyAO0
	var putPatientsPatientGUIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putPatientsPatientGUIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putPatientsPatientGUIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutPatientsPatientGUIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putPatientsPatientGUIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putPatientsPatientGUIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put patients patient GUID method not allowed body
func (o *PutPatientsPatientGUIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutPatientsPatientGUIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPatientsPatientGUIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutPatientsPatientGUIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutPatientsPatientGUIDNotFoundBody put patients patient GUID not found body
swagger:model PutPatientsPatientGUIDNotFoundBody
*/
type PutPatientsPatientGUIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutPatientsPatientGUIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutPatientsPatientGUIDNotFoundBodyAO0
	var putPatientsPatientGUIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putPatientsPatientGUIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putPatientsPatientGUIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutPatientsPatientGUIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putPatientsPatientGUIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putPatientsPatientGUIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put patients patient GUID not found body
func (o *PutPatientsPatientGUIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutPatientsPatientGUIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPatientsPatientGUIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutPatientsPatientGUIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutPatientsPatientGUIDOKBody put patients patient GUID o k body
swagger:model PutPatientsPatientGUIDOKBody
*/
type PutPatientsPatientGUIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutPatientsPatientGUIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutPatientsPatientGUIDOKBodyAO0
	var putPatientsPatientGUIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putPatientsPatientGUIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putPatientsPatientGUIDOKBodyAO0

	// PutPatientsPatientGUIDOKBodyAO1
	var dataPutPatientsPatientGUIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPutPatientsPatientGUIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutPatientsPatientGUIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutPatientsPatientGUIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putPatientsPatientGUIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putPatientsPatientGUIDOKBodyAO0)

	var dataPutPatientsPatientGUIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPutPatientsPatientGUIDOKBodyAO1.Data = o.Data

	jsonDataPutPatientsPatientGUIDOKBodyAO1, errPutPatientsPatientGUIDOKBodyAO1 := swag.WriteJSON(dataPutPatientsPatientGUIDOKBodyAO1)
	if errPutPatientsPatientGUIDOKBodyAO1 != nil {
		return nil, errPutPatientsPatientGUIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutPatientsPatientGUIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put patients patient GUID o k body
func (o *PutPatientsPatientGUIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutPatientsPatientGUIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putPatientsPatientGuidOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutPatientsPatientGUIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutPatientsPatientGUIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutPatientsPatientGUIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
