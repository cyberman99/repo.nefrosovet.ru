// Code generated by go-swagger; DO NOT EDIT.

package patients

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new patients API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for patients API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetPatients коллекцияs пациентов
*/
func (a *Client) GetPatients(params *GetPatientsParams) (*GetPatientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatients",
		Method:             "GET",
		PathPattern:        "/patients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPatientsOK), nil

}

/*
GetPatientsPatientGUID информацияs о пациенте
*/
func (a *Client) GetPatientsPatientGUID(params *GetPatientsPatientGUIDParams) (*GetPatientsPatientGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPatientsPatientGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPatientsPatientGUID",
		Method:             "GET",
		PathPattern:        "/patients/{patientGUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPatientsPatientGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPatientsPatientGUIDOK), nil

}

/*
PatchPatientsPatientGUID изменениеs пациента
*/
func (a *Client) PatchPatientsPatientGUID(params *PatchPatientsPatientGUIDParams) (*PatchPatientsPatientGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchPatientsPatientGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchPatientsPatientGUID",
		Method:             "PATCH",
		PathPattern:        "/patients/{patientGUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchPatientsPatientGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchPatientsPatientGUIDOK), nil

}

/*
PostPatients созданиеs пациента
*/
func (a *Client) PostPatients(params *PostPatientsParams) (*PostPatientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPatientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostPatients",
		Method:             "POST",
		PathPattern:        "/patients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostPatientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPatientsOK), nil

}

/*
PutPatientsPatientGUID изменениеs пациента
*/
func (a *Client) PutPatientsPatientGUID(params *PutPatientsPatientGUIDParams) (*PutPatientsPatientGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPatientsPatientGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutPatientsPatientGUID",
		Method:             "PUT",
		PathPattern:        "/patients/{patientGUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutPatientsPatientGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPatientsPatientGUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
