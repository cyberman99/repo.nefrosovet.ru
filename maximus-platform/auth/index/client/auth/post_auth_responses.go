// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PostAuthReader is a Reader for the PostAuth structure.
type PostAuthReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAuthReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostAuthOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostAuthBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostAuthUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostAuthOK creates a PostAuthOK with default headers values
func NewPostAuthOK() *PostAuthOK {
	return &PostAuthOK{}
}

/*PostAuthOK handles this case with default header values.

Коллекция авторизации
*/
type PostAuthOK struct {
	Payload *PostAuthOKBody
}

func (o *PostAuthOK) Error() string {
	return fmt.Sprintf("[POST /auth][%d] postAuthOK  %+v", 200, o.Payload)
}

func (o *PostAuthOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostAuthOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthBadRequest creates a PostAuthBadRequest with default headers values
func NewPostAuthBadRequest() *PostAuthBadRequest {
	return &PostAuthBadRequest{}
}

/*PostAuthBadRequest handles this case with default header values.

Коллекция авторизации
*/
type PostAuthBadRequest struct {
	Payload *PostAuthBadRequestBody
}

func (o *PostAuthBadRequest) Error() string {
	return fmt.Sprintf("[POST /auth][%d] postAuthBadRequest  %+v", 400, o.Payload)
}

func (o *PostAuthBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostAuthBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAuthUnauthorized creates a PostAuthUnauthorized with default headers values
func NewPostAuthUnauthorized() *PostAuthUnauthorized {
	return &PostAuthUnauthorized{}
}

/*PostAuthUnauthorized handles this case with default header values.

Unauthorized
*/
type PostAuthUnauthorized struct {
}

func (o *PostAuthUnauthorized) Error() string {
	return fmt.Sprintf("[POST /auth][%d] postAuthUnauthorized ", 401)
}

func (o *PostAuthUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*DataItems0 data items0
swagger:model DataItems0
*/
type DataItems0 struct {

	// GUID пользователя
	GUID string `json:"GUID,omitempty"`
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAuthBadRequestBody post auth bad request body
swagger:model PostAuthBadRequestBody
*/
type PostAuthBadRequestBody struct {
	models.Error400Data

	// errors
	Errors *PostAuthBadRequestBodyAO1Errors `json:"errors,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostAuthBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostAuthBadRequestBodyAO0
	var postAuthBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postAuthBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postAuthBadRequestBodyAO0

	// PostAuthBadRequestBodyAO1
	var dataPostAuthBadRequestBodyAO1 struct {
		Errors *PostAuthBadRequestBodyAO1Errors `json:"errors,omitempty"`

		Message string `json:"message,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostAuthBadRequestBodyAO1); err != nil {
		return err
	}

	o.Errors = dataPostAuthBadRequestBodyAO1.Errors

	o.Message = dataPostAuthBadRequestBodyAO1.Message

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostAuthBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postAuthBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAuthBadRequestBodyAO0)

	var dataPostAuthBadRequestBodyAO1 struct {
		Errors *PostAuthBadRequestBodyAO1Errors `json:"errors,omitempty"`

		Message string `json:"message,omitempty"`
	}

	dataPostAuthBadRequestBodyAO1.Errors = o.Errors

	dataPostAuthBadRequestBodyAO1.Message = o.Message

	jsonDataPostAuthBadRequestBodyAO1, errPostAuthBadRequestBodyAO1 := swag.WriteJSON(dataPostAuthBadRequestBodyAO1)
	if errPostAuthBadRequestBodyAO1 != nil {
		return nil, errPostAuthBadRequestBodyAO1
	}
	_parts = append(_parts, jsonDataPostAuthBadRequestBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post auth bad request body
func (o *PostAuthBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAuthBadRequestBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	if o.Errors != nil {
		if err := o.Errors.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postAuthBadRequest" + "." + "errors")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostAuthBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAuthBadRequestBodyAO1Errors post auth bad request body a o1 errors
swagger:model PostAuthBadRequestBodyAO1Errors
*/
type PostAuthBadRequestBodyAO1Errors struct {

	// validation
	Validation *PostAuthBadRequestBodyAO1ErrorsValidation `json:"validation,omitempty"`
}

// Validate validates this post auth bad request body a o1 errors
func (o *PostAuthBadRequestBodyAO1Errors) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateValidation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAuthBadRequestBodyAO1Errors) validateValidation(formats strfmt.Registry) error {

	if swag.IsZero(o.Validation) { // not required
		return nil
	}

	if o.Validation != nil {
		if err := o.Validation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postAuthBadRequest" + "." + "errors" + "." + "validation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthBadRequestBodyAO1Errors) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthBadRequestBodyAO1Errors) UnmarshalBinary(b []byte) error {
	var res PostAuthBadRequestBodyAO1Errors
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAuthBadRequestBodyAO1ErrorsValidation post auth bad request body a o1 errors validation
swagger:model PostAuthBadRequestBodyAO1ErrorsValidation
*/
type PostAuthBadRequestBodyAO1ErrorsValidation struct {

	// login
	Login string `json:"login,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this post auth bad request body a o1 errors validation
func (o *PostAuthBadRequestBodyAO1ErrorsValidation) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthBadRequestBodyAO1ErrorsValidation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthBadRequestBodyAO1ErrorsValidation) UnmarshalBinary(b []byte) error {
	var res PostAuthBadRequestBodyAO1ErrorsValidation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAuthBody post auth body
swagger:model PostAuthBody
*/
type PostAuthBody struct {
	models.AuthObject

	PostAuthParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostAuthBody) UnmarshalJSON(raw []byte) error {
	// PostAuthParamsBodyAO0
	var postAuthParamsBodyAO0 models.AuthObject
	if err := swag.ReadJSON(raw, &postAuthParamsBodyAO0); err != nil {
		return err
	}
	o.AuthObject = postAuthParamsBodyAO0

	// PostAuthParamsBodyAO1
	var postAuthParamsBodyAO1 PostAuthParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &postAuthParamsBodyAO1); err != nil {
		return err
	}
	o.PostAuthParamsBodyAllOf1 = postAuthParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostAuthBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postAuthParamsBodyAO0, err := swag.WriteJSON(o.AuthObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAuthParamsBodyAO0)

	postAuthParamsBodyAO1, err := swag.WriteJSON(o.PostAuthParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAuthParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post auth body
func (o *PostAuthBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AuthObject
	if err := o.AuthObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostAuthParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthBody) UnmarshalBinary(b []byte) error {
	var res PostAuthBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAuthOKBody post auth o k body
swagger:model PostAuthOKBody
*/
type PostAuthOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostAuthOKBody) UnmarshalJSON(raw []byte) error {
	// PostAuthOKBodyAO0
	var postAuthOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postAuthOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postAuthOKBodyAO0

	// PostAuthOKBodyAO1
	var dataPostAuthOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostAuthOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostAuthOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostAuthOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postAuthOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postAuthOKBodyAO0)

	var dataPostAuthOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPostAuthOKBodyAO1.Data = o.Data

	jsonDataPostAuthOKBodyAO1, errPostAuthOKBodyAO1 := swag.WriteJSON(dataPostAuthOKBodyAO1)
	if errPostAuthOKBodyAO1 != nil {
		return nil, errPostAuthOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostAuthOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post auth o k body
func (o *PostAuthOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAuthOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postAuthOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostAuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAuthOKBody) UnmarshalBinary(b []byte) error {
	var res PostAuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAuthParamsBodyAllOf1 post auth params body all of1
swagger:model PostAuthParamsBodyAllOf1
*/
type PostAuthParamsBodyAllOf1 interface{}
