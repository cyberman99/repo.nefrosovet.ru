// Code generated by go-swagger; DO NOT EDIT.

package clinic_employees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new clinic employees API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clinic employees API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteClinicsClinicGUIDEmployeesEmployeeGUID удалениеs сотрудника из клиники
*/
func (a *Client) DeleteClinicsClinicGUIDEmployeesEmployeeGUID(params *DeleteClinicsClinicGUIDEmployeesEmployeeGUIDParams) (*DeleteClinicsClinicGUIDEmployeesEmployeeGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClinicsClinicGUIDEmployeesEmployeeGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteClinicsClinicGUIDEmployeesEmployeeGUID",
		Method:             "DELETE",
		PathPattern:        "/clinics/{clinicGUID}/employees/{employeeGUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteClinicsClinicGUIDEmployeesEmployeeGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClinicsClinicGUIDEmployeesEmployeeGUIDOK), nil

}

/*
GetClinicsClinicGUIDEmployees коллекцияs сотрудников клиники
*/
func (a *Client) GetClinicsClinicGUIDEmployees(params *GetClinicsClinicGUIDEmployeesParams) (*GetClinicsClinicGUIDEmployeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClinicsClinicGUIDEmployeesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetClinicsClinicGUIDEmployees",
		Method:             "GET",
		PathPattern:        "/clinics/{clinicGUID}/employees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetClinicsClinicGUIDEmployeesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClinicsClinicGUIDEmployeesOK), nil

}

/*
PostClinicsClinicGUIDEmployeesEmployeeGUID добавлениеs сотрудника в клинику
*/
func (a *Client) PostClinicsClinicGUIDEmployeesEmployeeGUID(params *PostClinicsClinicGUIDEmployeesEmployeeGUIDParams) (*PostClinicsClinicGUIDEmployeesEmployeeGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClinicsClinicGUIDEmployeesEmployeeGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostClinicsClinicGUIDEmployeesEmployeeGUID",
		Method:             "POST",
		PathPattern:        "/clinics/{clinicGUID}/employees/{employeeGUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostClinicsClinicGUIDEmployeesEmployeeGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClinicsClinicGUIDEmployeesEmployeeGUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
