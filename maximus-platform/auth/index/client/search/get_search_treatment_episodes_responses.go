// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// GetSearchTreatmentEpisodesReader is a Reader for the GetSearchTreatmentEpisodes structure.
type GetSearchTreatmentEpisodesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchTreatmentEpisodesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSearchTreatmentEpisodesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSearchTreatmentEpisodesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSearchTreatmentEpisodesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchTreatmentEpisodesOK creates a GetSearchTreatmentEpisodesOK with default headers values
func NewGetSearchTreatmentEpisodesOK() *GetSearchTreatmentEpisodesOK {
	return &GetSearchTreatmentEpisodesOK{}
}

/*GetSearchTreatmentEpisodesOK handles this case with default header values.

Коллекция эпизодов лечения
*/
type GetSearchTreatmentEpisodesOK struct {
	Payload *GetSearchTreatmentEpisodesOKBody
}

func (o *GetSearchTreatmentEpisodesOK) Error() string {
	return fmt.Sprintf("[GET /search/treatmentEpisodes][%d] getSearchTreatmentEpisodesOK  %+v", 200, o.Payload)
}

func (o *GetSearchTreatmentEpisodesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchTreatmentEpisodesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchTreatmentEpisodesBadRequest creates a GetSearchTreatmentEpisodesBadRequest with default headers values
func NewGetSearchTreatmentEpisodesBadRequest() *GetSearchTreatmentEpisodesBadRequest {
	return &GetSearchTreatmentEpisodesBadRequest{}
}

/*GetSearchTreatmentEpisodesBadRequest handles this case with default header values.

Validation error
*/
type GetSearchTreatmentEpisodesBadRequest struct {
	Payload *GetSearchTreatmentEpisodesBadRequestBody
}

func (o *GetSearchTreatmentEpisodesBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/treatmentEpisodes][%d] getSearchTreatmentEpisodesBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchTreatmentEpisodesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchTreatmentEpisodesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchTreatmentEpisodesNotFound creates a GetSearchTreatmentEpisodesNotFound with default headers values
func NewGetSearchTreatmentEpisodesNotFound() *GetSearchTreatmentEpisodesNotFound {
	return &GetSearchTreatmentEpisodesNotFound{}
}

/*GetSearchTreatmentEpisodesNotFound handles this case with default header values.

Not found
*/
type GetSearchTreatmentEpisodesNotFound struct {
	Payload *GetSearchTreatmentEpisodesNotFoundBody
}

func (o *GetSearchTreatmentEpisodesNotFound) Error() string {
	return fmt.Sprintf("[GET /search/treatmentEpisodes][%d] getSearchTreatmentEpisodesNotFound  %+v", 404, o.Payload)
}

func (o *GetSearchTreatmentEpisodesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchTreatmentEpisodesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSearchTreatmentEpisodesBadRequestBody get search treatment episodes bad request body
swagger:model GetSearchTreatmentEpisodesBadRequestBody
*/
type GetSearchTreatmentEpisodesBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchTreatmentEpisodesBadRequestBody) UnmarshalJSON(raw []byte) error {
	// GetSearchTreatmentEpisodesBadRequestBodyAO0
	var getSearchTreatmentEpisodesBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &getSearchTreatmentEpisodesBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = getSearchTreatmentEpisodesBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchTreatmentEpisodesBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchTreatmentEpisodesBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchTreatmentEpisodesBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search treatment episodes bad request body
func (o *GetSearchTreatmentEpisodesBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchTreatmentEpisodesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchTreatmentEpisodesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSearchTreatmentEpisodesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchTreatmentEpisodesNotFoundBody get search treatment episodes not found body
swagger:model GetSearchTreatmentEpisodesNotFoundBody
*/
type GetSearchTreatmentEpisodesNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchTreatmentEpisodesNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetSearchTreatmentEpisodesNotFoundBodyAO0
	var getSearchTreatmentEpisodesNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getSearchTreatmentEpisodesNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getSearchTreatmentEpisodesNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchTreatmentEpisodesNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchTreatmentEpisodesNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchTreatmentEpisodesNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search treatment episodes not found body
func (o *GetSearchTreatmentEpisodesNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchTreatmentEpisodesNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchTreatmentEpisodesNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSearchTreatmentEpisodesNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchTreatmentEpisodesOKBody get search treatment episodes o k body
swagger:model GetSearchTreatmentEpisodesOKBody
*/
type GetSearchTreatmentEpisodesOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchTreatmentEpisodesOKBody) UnmarshalJSON(raw []byte) error {
	// GetSearchTreatmentEpisodesOKBodyAO0
	var getSearchTreatmentEpisodesOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getSearchTreatmentEpisodesOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getSearchTreatmentEpisodesOKBodyAO0

	// GetSearchTreatmentEpisodesOKBodyAO1
	var dataGetSearchTreatmentEpisodesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetSearchTreatmentEpisodesOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetSearchTreatmentEpisodesOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchTreatmentEpisodesOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getSearchTreatmentEpisodesOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchTreatmentEpisodesOKBodyAO0)

	var dataGetSearchTreatmentEpisodesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataGetSearchTreatmentEpisodesOKBodyAO1.Data = o.Data

	jsonDataGetSearchTreatmentEpisodesOKBodyAO1, errGetSearchTreatmentEpisodesOKBodyAO1 := swag.WriteJSON(dataGetSearchTreatmentEpisodesOKBodyAO1)
	if errGetSearchTreatmentEpisodesOKBodyAO1 != nil {
		return nil, errGetSearchTreatmentEpisodesOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetSearchTreatmentEpisodesOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search treatment episodes o k body
func (o *GetSearchTreatmentEpisodesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchTreatmentEpisodesOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchTreatmentEpisodesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchTreatmentEpisodesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchTreatmentEpisodesOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchTreatmentEpisodesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
