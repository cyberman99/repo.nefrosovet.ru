// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// GetSearchDepartmentsReader is a Reader for the GetSearchDepartments structure.
type GetSearchDepartmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchDepartmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSearchDepartmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSearchDepartmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSearchDepartmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchDepartmentsOK creates a GetSearchDepartmentsOK with default headers values
func NewGetSearchDepartmentsOK() *GetSearchDepartmentsOK {
	return &GetSearchDepartmentsOK{}
}

/*GetSearchDepartmentsOK handles this case with default header values.

Коллекция подразделений
*/
type GetSearchDepartmentsOK struct {
	Payload *GetSearchDepartmentsOKBody
}

func (o *GetSearchDepartmentsOK) Error() string {
	return fmt.Sprintf("[GET /search/departments][%d] getSearchDepartmentsOK  %+v", 200, o.Payload)
}

func (o *GetSearchDepartmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchDepartmentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchDepartmentsBadRequest creates a GetSearchDepartmentsBadRequest with default headers values
func NewGetSearchDepartmentsBadRequest() *GetSearchDepartmentsBadRequest {
	return &GetSearchDepartmentsBadRequest{}
}

/*GetSearchDepartmentsBadRequest handles this case with default header values.

Validation error
*/
type GetSearchDepartmentsBadRequest struct {
	Payload *GetSearchDepartmentsBadRequestBody
}

func (o *GetSearchDepartmentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/departments][%d] getSearchDepartmentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchDepartmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchDepartmentsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchDepartmentsNotFound creates a GetSearchDepartmentsNotFound with default headers values
func NewGetSearchDepartmentsNotFound() *GetSearchDepartmentsNotFound {
	return &GetSearchDepartmentsNotFound{}
}

/*GetSearchDepartmentsNotFound handles this case with default header values.

Not found
*/
type GetSearchDepartmentsNotFound struct {
	Payload *GetSearchDepartmentsNotFoundBody
}

func (o *GetSearchDepartmentsNotFound) Error() string {
	return fmt.Sprintf("[GET /search/departments][%d] getSearchDepartmentsNotFound  %+v", 404, o.Payload)
}

func (o *GetSearchDepartmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchDepartmentsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSearchDepartmentsBadRequestBody get search departments bad request body
swagger:model GetSearchDepartmentsBadRequestBody
*/
type GetSearchDepartmentsBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchDepartmentsBadRequestBody) UnmarshalJSON(raw []byte) error {
	// GetSearchDepartmentsBadRequestBodyAO0
	var getSearchDepartmentsBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &getSearchDepartmentsBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = getSearchDepartmentsBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchDepartmentsBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchDepartmentsBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchDepartmentsBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search departments bad request body
func (o *GetSearchDepartmentsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchDepartmentsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchDepartmentsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSearchDepartmentsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchDepartmentsNotFoundBody get search departments not found body
swagger:model GetSearchDepartmentsNotFoundBody
*/
type GetSearchDepartmentsNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchDepartmentsNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetSearchDepartmentsNotFoundBodyAO0
	var getSearchDepartmentsNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getSearchDepartmentsNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getSearchDepartmentsNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchDepartmentsNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchDepartmentsNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchDepartmentsNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search departments not found body
func (o *GetSearchDepartmentsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchDepartmentsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchDepartmentsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSearchDepartmentsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchDepartmentsOKBody get search departments o k body
swagger:model GetSearchDepartmentsOKBody
*/
type GetSearchDepartmentsOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchDepartmentsOKBody) UnmarshalJSON(raw []byte) error {
	// GetSearchDepartmentsOKBodyAO0
	var getSearchDepartmentsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getSearchDepartmentsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getSearchDepartmentsOKBodyAO0

	// GetSearchDepartmentsOKBodyAO1
	var dataGetSearchDepartmentsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetSearchDepartmentsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetSearchDepartmentsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchDepartmentsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getSearchDepartmentsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchDepartmentsOKBodyAO0)

	var dataGetSearchDepartmentsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataGetSearchDepartmentsOKBodyAO1.Data = o.Data

	jsonDataGetSearchDepartmentsOKBodyAO1, errGetSearchDepartmentsOKBodyAO1 := swag.WriteJSON(dataGetSearchDepartmentsOKBodyAO1)
	if errGetSearchDepartmentsOKBodyAO1 != nil {
		return nil, errGetSearchDepartmentsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetSearchDepartmentsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search departments o k body
func (o *GetSearchDepartmentsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchDepartmentsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchDepartmentsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchDepartmentsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchDepartmentsOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchDepartmentsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
