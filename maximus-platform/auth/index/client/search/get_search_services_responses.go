// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// GetSearchServicesReader is a Reader for the GetSearchServices structure.
type GetSearchServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSearchServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSearchServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSearchServicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchServicesOK creates a GetSearchServicesOK with default headers values
func NewGetSearchServicesOK() *GetSearchServicesOK {
	return &GetSearchServicesOK{}
}

/*GetSearchServicesOK handles this case with default header values.

Коллекция сервисов
*/
type GetSearchServicesOK struct {
	Payload *GetSearchServicesOKBody
}

func (o *GetSearchServicesOK) Error() string {
	return fmt.Sprintf("[GET /search/services][%d] getSearchServicesOK  %+v", 200, o.Payload)
}

func (o *GetSearchServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchServicesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchServicesBadRequest creates a GetSearchServicesBadRequest with default headers values
func NewGetSearchServicesBadRequest() *GetSearchServicesBadRequest {
	return &GetSearchServicesBadRequest{}
}

/*GetSearchServicesBadRequest handles this case with default header values.

Validation error
*/
type GetSearchServicesBadRequest struct {
	Payload *GetSearchServicesBadRequestBody
}

func (o *GetSearchServicesBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/services][%d] getSearchServicesBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchServicesBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchServicesNotFound creates a GetSearchServicesNotFound with default headers values
func NewGetSearchServicesNotFound() *GetSearchServicesNotFound {
	return &GetSearchServicesNotFound{}
}

/*GetSearchServicesNotFound handles this case with default header values.

Not found
*/
type GetSearchServicesNotFound struct {
	Payload *GetSearchServicesNotFoundBody
}

func (o *GetSearchServicesNotFound) Error() string {
	return fmt.Sprintf("[GET /search/services][%d] getSearchServicesNotFound  %+v", 404, o.Payload)
}

func (o *GetSearchServicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchServicesNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSearchServicesBadRequestBody get search services bad request body
swagger:model GetSearchServicesBadRequestBody
*/
type GetSearchServicesBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchServicesBadRequestBody) UnmarshalJSON(raw []byte) error {
	// GetSearchServicesBadRequestBodyAO0
	var getSearchServicesBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &getSearchServicesBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = getSearchServicesBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchServicesBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchServicesBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchServicesBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search services bad request body
func (o *GetSearchServicesBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchServicesBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchServicesBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSearchServicesBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchServicesNotFoundBody get search services not found body
swagger:model GetSearchServicesNotFoundBody
*/
type GetSearchServicesNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchServicesNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetSearchServicesNotFoundBodyAO0
	var getSearchServicesNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getSearchServicesNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getSearchServicesNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchServicesNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchServicesNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchServicesNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search services not found body
func (o *GetSearchServicesNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchServicesNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchServicesNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSearchServicesNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchServicesOKBody get search services o k body
swagger:model GetSearchServicesOKBody
*/
type GetSearchServicesOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchServicesOKBody) UnmarshalJSON(raw []byte) error {
	// GetSearchServicesOKBodyAO0
	var getSearchServicesOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getSearchServicesOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getSearchServicesOKBodyAO0

	// GetSearchServicesOKBodyAO1
	var dataGetSearchServicesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetSearchServicesOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetSearchServicesOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchServicesOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getSearchServicesOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchServicesOKBodyAO0)

	var dataGetSearchServicesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataGetSearchServicesOKBodyAO1.Data = o.Data

	jsonDataGetSearchServicesOKBodyAO1, errGetSearchServicesOKBodyAO1 := swag.WriteJSON(dataGetSearchServicesOKBodyAO1)
	if errGetSearchServicesOKBodyAO1 != nil {
		return nil, errGetSearchServicesOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetSearchServicesOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search services o k body
func (o *GetSearchServicesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchServicesOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchServicesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchServicesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchServicesOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchServicesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
