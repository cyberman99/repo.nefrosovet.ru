// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// GetSearchClinicsReader is a Reader for the GetSearchClinics structure.
type GetSearchClinicsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchClinicsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSearchClinicsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSearchClinicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSearchClinicsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchClinicsOK creates a GetSearchClinicsOK with default headers values
func NewGetSearchClinicsOK() *GetSearchClinicsOK {
	return &GetSearchClinicsOK{}
}

/*GetSearchClinicsOK handles this case with default header values.

Коллекция клиник
*/
type GetSearchClinicsOK struct {
	Payload *GetSearchClinicsOKBody
}

func (o *GetSearchClinicsOK) Error() string {
	return fmt.Sprintf("[GET /search/clinics][%d] getSearchClinicsOK  %+v", 200, o.Payload)
}

func (o *GetSearchClinicsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchClinicsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchClinicsBadRequest creates a GetSearchClinicsBadRequest with default headers values
func NewGetSearchClinicsBadRequest() *GetSearchClinicsBadRequest {
	return &GetSearchClinicsBadRequest{}
}

/*GetSearchClinicsBadRequest handles this case with default header values.

Validation error
*/
type GetSearchClinicsBadRequest struct {
	Payload *GetSearchClinicsBadRequestBody
}

func (o *GetSearchClinicsBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/clinics][%d] getSearchClinicsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchClinicsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchClinicsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchClinicsNotFound creates a GetSearchClinicsNotFound with default headers values
func NewGetSearchClinicsNotFound() *GetSearchClinicsNotFound {
	return &GetSearchClinicsNotFound{}
}

/*GetSearchClinicsNotFound handles this case with default header values.

Not found
*/
type GetSearchClinicsNotFound struct {
	Payload *GetSearchClinicsNotFoundBody
}

func (o *GetSearchClinicsNotFound) Error() string {
	return fmt.Sprintf("[GET /search/clinics][%d] getSearchClinicsNotFound  %+v", 404, o.Payload)
}

func (o *GetSearchClinicsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchClinicsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSearchClinicsBadRequestBody get search clinics bad request body
swagger:model GetSearchClinicsBadRequestBody
*/
type GetSearchClinicsBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchClinicsBadRequestBody) UnmarshalJSON(raw []byte) error {
	// GetSearchClinicsBadRequestBodyAO0
	var getSearchClinicsBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &getSearchClinicsBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = getSearchClinicsBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchClinicsBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchClinicsBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchClinicsBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search clinics bad request body
func (o *GetSearchClinicsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchClinicsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchClinicsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSearchClinicsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchClinicsNotFoundBody get search clinics not found body
swagger:model GetSearchClinicsNotFoundBody
*/
type GetSearchClinicsNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchClinicsNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetSearchClinicsNotFoundBodyAO0
	var getSearchClinicsNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getSearchClinicsNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getSearchClinicsNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchClinicsNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchClinicsNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchClinicsNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search clinics not found body
func (o *GetSearchClinicsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchClinicsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchClinicsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSearchClinicsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchClinicsOKBody get search clinics o k body
swagger:model GetSearchClinicsOKBody
*/
type GetSearchClinicsOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchClinicsOKBody) UnmarshalJSON(raw []byte) error {
	// GetSearchClinicsOKBodyAO0
	var getSearchClinicsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getSearchClinicsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getSearchClinicsOKBodyAO0

	// GetSearchClinicsOKBodyAO1
	var dataGetSearchClinicsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetSearchClinicsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetSearchClinicsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchClinicsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getSearchClinicsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchClinicsOKBodyAO0)

	var dataGetSearchClinicsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataGetSearchClinicsOKBodyAO1.Data = o.Data

	jsonDataGetSearchClinicsOKBodyAO1, errGetSearchClinicsOKBodyAO1 := swag.WriteJSON(dataGetSearchClinicsOKBodyAO1)
	if errGetSearchClinicsOKBodyAO1 != nil {
		return nil, errGetSearchClinicsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetSearchClinicsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search clinics o k body
func (o *GetSearchClinicsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchClinicsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchClinicsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchClinicsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchClinicsOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchClinicsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
