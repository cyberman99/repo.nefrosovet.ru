// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSearchServicesParams creates a new GetSearchServicesParams object
// with the default values initialized.
func NewGetSearchServicesParams() *GetSearchServicesParams {
	var ()
	return &GetSearchServicesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSearchServicesParamsWithTimeout creates a new GetSearchServicesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSearchServicesParamsWithTimeout(timeout time.Duration) *GetSearchServicesParams {
	var ()
	return &GetSearchServicesParams{

		timeout: timeout,
	}
}

// NewGetSearchServicesParamsWithContext creates a new GetSearchServicesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSearchServicesParamsWithContext(ctx context.Context) *GetSearchServicesParams {
	var ()
	return &GetSearchServicesParams{

		Context: ctx,
	}
}

// NewGetSearchServicesParamsWithHTTPClient creates a new GetSearchServicesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSearchServicesParamsWithHTTPClient(client *http.Client) *GetSearchServicesParams {
	var ()
	return &GetSearchServicesParams{
		HTTPClient: client,
	}
}

/*GetSearchServicesParams contains all the parameters to send to the API endpoint
for the get search services operation typically these are written to a http.Request
*/
type GetSearchServicesParams struct {

	/*Archived
	  Состояние записи

	*/
	Archived *bool
	/*ClinicGUID
	  GUID клиники

	*/
	ClinicGUID *string
	/*Description
	  Описание

	*/
	Description *string
	/*Limit
	  Лимит выдачи

	*/
	Limit *int64
	/*Offset
	  Шаг выдачи

	*/
	Offset *int64
	/*Type
	  Тип

	*/
	Type *int64
	/*URI
	  Адрес сервиса

	*/
	URI *string
	/*Version
	  Версия

	*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get search services params
func (o *GetSearchServicesParams) WithTimeout(timeout time.Duration) *GetSearchServicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get search services params
func (o *GetSearchServicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get search services params
func (o *GetSearchServicesParams) WithContext(ctx context.Context) *GetSearchServicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get search services params
func (o *GetSearchServicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get search services params
func (o *GetSearchServicesParams) WithHTTPClient(client *http.Client) *GetSearchServicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get search services params
func (o *GetSearchServicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithArchived adds the archived to the get search services params
func (o *GetSearchServicesParams) WithArchived(archived *bool) *GetSearchServicesParams {
	o.SetArchived(archived)
	return o
}

// SetArchived adds the archived to the get search services params
func (o *GetSearchServicesParams) SetArchived(archived *bool) {
	o.Archived = archived
}

// WithClinicGUID adds the clinicGUID to the get search services params
func (o *GetSearchServicesParams) WithClinicGUID(clinicGUID *string) *GetSearchServicesParams {
	o.SetClinicGUID(clinicGUID)
	return o
}

// SetClinicGUID adds the clinicGuid to the get search services params
func (o *GetSearchServicesParams) SetClinicGUID(clinicGUID *string) {
	o.ClinicGUID = clinicGUID
}

// WithDescription adds the description to the get search services params
func (o *GetSearchServicesParams) WithDescription(description *string) *GetSearchServicesParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get search services params
func (o *GetSearchServicesParams) SetDescription(description *string) {
	o.Description = description
}

// WithLimit adds the limit to the get search services params
func (o *GetSearchServicesParams) WithLimit(limit *int64) *GetSearchServicesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get search services params
func (o *GetSearchServicesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get search services params
func (o *GetSearchServicesParams) WithOffset(offset *int64) *GetSearchServicesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get search services params
func (o *GetSearchServicesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithType adds the typeVar to the get search services params
func (o *GetSearchServicesParams) WithType(typeVar *int64) *GetSearchServicesParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get search services params
func (o *GetSearchServicesParams) SetType(typeVar *int64) {
	o.Type = typeVar
}

// WithURI adds the uri to the get search services params
func (o *GetSearchServicesParams) WithURI(uri *string) *GetSearchServicesParams {
	o.SetURI(uri)
	return o
}

// SetURI adds the uri to the get search services params
func (o *GetSearchServicesParams) SetURI(uri *string) {
	o.URI = uri
}

// WithVersion adds the version to the get search services params
func (o *GetSearchServicesParams) WithVersion(version *string) *GetSearchServicesParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get search services params
func (o *GetSearchServicesParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetSearchServicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Archived != nil {

		// query param archived
		var qrArchived bool
		if o.Archived != nil {
			qrArchived = *o.Archived
		}
		qArchived := swag.FormatBool(qrArchived)
		if qArchived != "" {
			if err := r.SetQueryParam("archived", qArchived); err != nil {
				return err
			}
		}

	}

	if o.ClinicGUID != nil {

		// query param clinicGUID
		var qrClinicGUID string
		if o.ClinicGUID != nil {
			qrClinicGUID = *o.ClinicGUID
		}
		qClinicGUID := qrClinicGUID
		if qClinicGUID != "" {
			if err := r.SetQueryParam("clinicGUID", qClinicGUID); err != nil {
				return err
			}
		}

	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType int64
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := swag.FormatInt64(qrType)
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.URI != nil {

		// query param uri
		var qrURI string
		if o.URI != nil {
			qrURI = *o.URI
		}
		qURI := qrURI
		if qURI != "" {
			if err := r.SetQueryParam("uri", qURI); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
