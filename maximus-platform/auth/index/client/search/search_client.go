// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetSearch поискs по GUID
*/
func (a *Client) GetSearch(params *GetSearchParams) (*GetSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearch",
		Method:             "GET",
		PathPattern:        "/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchOK), nil

}

/*
GetSearchClinics поискs клиник по параметрам
*/
func (a *Client) GetSearchClinics(params *GetSearchClinicsParams) (*GetSearchClinicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchClinicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchClinics",
		Method:             "GET",
		PathPattern:        "/search/clinics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSearchClinicsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchClinicsOK), nil

}

/*
GetSearchDepartments поискs подразделений по параметрам
*/
func (a *Client) GetSearchDepartments(params *GetSearchDepartmentsParams) (*GetSearchDepartmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchDepartmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchDepartments",
		Method:             "GET",
		PathPattern:        "/search/departments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSearchDepartmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchDepartmentsOK), nil

}

/*
GetSearchEmployees поискs сотрудников по параметрам
*/
func (a *Client) GetSearchEmployees(params *GetSearchEmployeesParams) (*GetSearchEmployeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchEmployeesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchEmployees",
		Method:             "GET",
		PathPattern:        "/search/employees",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSearchEmployeesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchEmployeesOK), nil

}

/*
GetSearchPatients поискs пациентов по параметрам
*/
func (a *Client) GetSearchPatients(params *GetSearchPatientsParams) (*GetSearchPatientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchPatientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchPatients",
		Method:             "GET",
		PathPattern:        "/search/patients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSearchPatientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchPatientsOK), nil

}

/*
GetSearchServices поискs сервисов по параметрам
*/
func (a *Client) GetSearchServices(params *GetSearchServicesParams) (*GetSearchServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchServicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchServices",
		Method:             "GET",
		PathPattern:        "/search/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSearchServicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchServicesOK), nil

}

/*
GetSearchTreatmentEpisodes поискs эпизодов лечения по параметрам
*/
func (a *Client) GetSearchTreatmentEpisodes(params *GetSearchTreatmentEpisodesParams) (*GetSearchTreatmentEpisodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSearchTreatmentEpisodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSearchTreatmentEpisodes",
		Method:             "GET",
		PathPattern:        "/search/treatmentEpisodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSearchTreatmentEpisodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSearchTreatmentEpisodesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
