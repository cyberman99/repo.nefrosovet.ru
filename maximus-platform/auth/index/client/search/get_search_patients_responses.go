// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// GetSearchPatientsReader is a Reader for the GetSearchPatients structure.
type GetSearchPatientsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchPatientsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSearchPatientsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSearchPatientsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSearchPatientsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSearchPatientsOK creates a GetSearchPatientsOK with default headers values
func NewGetSearchPatientsOK() *GetSearchPatientsOK {
	return &GetSearchPatientsOK{}
}

/*GetSearchPatientsOK handles this case with default header values.

Коллекция пациентов
*/
type GetSearchPatientsOK struct {
	Payload *GetSearchPatientsOKBody
}

func (o *GetSearchPatientsOK) Error() string {
	return fmt.Sprintf("[GET /search/patients][%d] getSearchPatientsOK  %+v", 200, o.Payload)
}

func (o *GetSearchPatientsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchPatientsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchPatientsBadRequest creates a GetSearchPatientsBadRequest with default headers values
func NewGetSearchPatientsBadRequest() *GetSearchPatientsBadRequest {
	return &GetSearchPatientsBadRequest{}
}

/*GetSearchPatientsBadRequest handles this case with default header values.

Validation error
*/
type GetSearchPatientsBadRequest struct {
	Payload *GetSearchPatientsBadRequestBody
}

func (o *GetSearchPatientsBadRequest) Error() string {
	return fmt.Sprintf("[GET /search/patients][%d] getSearchPatientsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSearchPatientsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchPatientsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchPatientsNotFound creates a GetSearchPatientsNotFound with default headers values
func NewGetSearchPatientsNotFound() *GetSearchPatientsNotFound {
	return &GetSearchPatientsNotFound{}
}

/*GetSearchPatientsNotFound handles this case with default header values.

Not found
*/
type GetSearchPatientsNotFound struct {
	Payload *GetSearchPatientsNotFoundBody
}

func (o *GetSearchPatientsNotFound) Error() string {
	return fmt.Sprintf("[GET /search/patients][%d] getSearchPatientsNotFound  %+v", 404, o.Payload)
}

func (o *GetSearchPatientsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchPatientsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSearchPatientsBadRequestBody get search patients bad request body
swagger:model GetSearchPatientsBadRequestBody
*/
type GetSearchPatientsBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchPatientsBadRequestBody) UnmarshalJSON(raw []byte) error {
	// GetSearchPatientsBadRequestBodyAO0
	var getSearchPatientsBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &getSearchPatientsBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = getSearchPatientsBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchPatientsBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchPatientsBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchPatientsBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search patients bad request body
func (o *GetSearchPatientsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchPatientsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchPatientsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetSearchPatientsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchPatientsNotFoundBody get search patients not found body
swagger:model GetSearchPatientsNotFoundBody
*/
type GetSearchPatientsNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchPatientsNotFoundBody) UnmarshalJSON(raw []byte) error {
	// GetSearchPatientsNotFoundBodyAO0
	var getSearchPatientsNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &getSearchPatientsNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = getSearchPatientsNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchPatientsNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getSearchPatientsNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchPatientsNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search patients not found body
func (o *GetSearchPatientsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchPatientsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchPatientsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetSearchPatientsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetSearchPatientsOKBody get search patients o k body
swagger:model GetSearchPatientsOKBody
*/
type GetSearchPatientsOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetSearchPatientsOKBody) UnmarshalJSON(raw []byte) error {
	// GetSearchPatientsOKBodyAO0
	var getSearchPatientsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getSearchPatientsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getSearchPatientsOKBodyAO0

	// GetSearchPatientsOKBodyAO1
	var dataGetSearchPatientsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetSearchPatientsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetSearchPatientsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetSearchPatientsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getSearchPatientsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getSearchPatientsOKBodyAO0)

	var dataGetSearchPatientsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataGetSearchPatientsOKBodyAO1.Data = o.Data

	jsonDataGetSearchPatientsOKBodyAO1, errGetSearchPatientsOKBodyAO1 := swag.WriteJSON(dataGetSearchPatientsOKBodyAO1)
	if errGetSearchPatientsOKBodyAO1 != nil {
		return nil, errGetSearchPatientsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetSearchPatientsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get search patients o k body
func (o *GetSearchPatientsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchPatientsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchPatientsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchPatientsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchPatientsOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchPatientsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
