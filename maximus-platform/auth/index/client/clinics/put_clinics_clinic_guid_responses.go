// Code generated by go-swagger; DO NOT EDIT.

package clinics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PutClinicsClinicGUIDReader is a Reader for the PutClinicsClinicGUID structure.
type PutClinicsClinicGUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutClinicsClinicGUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutClinicsClinicGUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutClinicsClinicGUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutClinicsClinicGUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPutClinicsClinicGUIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutClinicsClinicGUIDOK creates a PutClinicsClinicGUIDOK with default headers values
func NewPutClinicsClinicGUIDOK() *PutClinicsClinicGUIDOK {
	return &PutClinicsClinicGUIDOK{}
}

/*PutClinicsClinicGUIDOK handles this case with default header values.

Коллекция клиник
*/
type PutClinicsClinicGUIDOK struct {
	Payload *PutClinicsClinicGUIDOKBody
}

func (o *PutClinicsClinicGUIDOK) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}][%d] putClinicsClinicGuidOK  %+v", 200, o.Payload)
}

func (o *PutClinicsClinicGUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClinicsClinicGUIDBadRequest creates a PutClinicsClinicGUIDBadRequest with default headers values
func NewPutClinicsClinicGUIDBadRequest() *PutClinicsClinicGUIDBadRequest {
	return &PutClinicsClinicGUIDBadRequest{}
}

/*PutClinicsClinicGUIDBadRequest handles this case with default header values.

Validation error
*/
type PutClinicsClinicGUIDBadRequest struct {
	Payload *PutClinicsClinicGUIDBadRequestBody
}

func (o *PutClinicsClinicGUIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}][%d] putClinicsClinicGuidBadRequest  %+v", 400, o.Payload)
}

func (o *PutClinicsClinicGUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClinicsClinicGUIDNotFound creates a PutClinicsClinicGUIDNotFound with default headers values
func NewPutClinicsClinicGUIDNotFound() *PutClinicsClinicGUIDNotFound {
	return &PutClinicsClinicGUIDNotFound{}
}

/*PutClinicsClinicGUIDNotFound handles this case with default header values.

Not found
*/
type PutClinicsClinicGUIDNotFound struct {
	Payload *PutClinicsClinicGUIDNotFoundBody
}

func (o *PutClinicsClinicGUIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}][%d] putClinicsClinicGuidNotFound  %+v", 404, o.Payload)
}

func (o *PutClinicsClinicGUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClinicsClinicGUIDMethodNotAllowed creates a PutClinicsClinicGUIDMethodNotAllowed with default headers values
func NewPutClinicsClinicGUIDMethodNotAllowed() *PutClinicsClinicGUIDMethodNotAllowed {
	return &PutClinicsClinicGUIDMethodNotAllowed{}
}

/*PutClinicsClinicGUIDMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PutClinicsClinicGUIDMethodNotAllowed struct {
	Payload *PutClinicsClinicGUIDMethodNotAllowedBody
}

func (o *PutClinicsClinicGUIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}][%d] putClinicsClinicGuidMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PutClinicsClinicGUIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutClinicsClinicGUIDBadRequestBody put clinics clinic GUID bad request body
swagger:model PutClinicsClinicGUIDBadRequestBody
*/
type PutClinicsClinicGUIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDBadRequestBodyAO0
	var putClinicsClinicGUIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putClinicsClinicGUIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClinicsClinicGUIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID bad request body
func (o *PutClinicsClinicGUIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDBody put clinics clinic GUID body
swagger:model PutClinicsClinicGUIDBody
*/
type PutClinicsClinicGUIDBody struct {
	models.ClinicObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDParamsBodyAO0
	var putClinicsClinicGUIDParamsBodyAO0 models.ClinicObject
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDParamsBodyAO0); err != nil {
		return err
	}
	o.ClinicObject = putClinicsClinicGUIDParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClinicsClinicGUIDParamsBodyAO0, err := swag.WriteJSON(o.ClinicObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID body
func (o *PutClinicsClinicGUIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ClinicObject
	if err := o.ClinicObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDMethodNotAllowedBody put clinics clinic GUID method not allowed body
swagger:model PutClinicsClinicGUIDMethodNotAllowedBody
*/
type PutClinicsClinicGUIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDMethodNotAllowedBodyAO0
	var putClinicsClinicGUIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putClinicsClinicGUIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClinicsClinicGUIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID method not allowed body
func (o *PutClinicsClinicGUIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDNotFoundBody put clinics clinic GUID not found body
swagger:model PutClinicsClinicGUIDNotFoundBody
*/
type PutClinicsClinicGUIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDNotFoundBodyAO0
	var putClinicsClinicGUIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putClinicsClinicGUIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClinicsClinicGUIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID not found body
func (o *PutClinicsClinicGUIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDOKBody put clinics clinic GUID o k body
swagger:model PutClinicsClinicGUIDOKBody
*/
type PutClinicsClinicGUIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDOKBodyAO0
	var putClinicsClinicGUIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putClinicsClinicGUIDOKBodyAO0

	// PutClinicsClinicGUIDOKBodyAO1
	var dataPutClinicsClinicGUIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPutClinicsClinicGUIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutClinicsClinicGUIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putClinicsClinicGUIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDOKBodyAO0)

	var dataPutClinicsClinicGUIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPutClinicsClinicGUIDOKBodyAO1.Data = o.Data

	jsonDataPutClinicsClinicGUIDOKBodyAO1, errPutClinicsClinicGUIDOKBodyAO1 := swag.WriteJSON(dataPutClinicsClinicGUIDOKBodyAO1)
	if errPutClinicsClinicGUIDOKBodyAO1 != nil {
		return nil, errPutClinicsClinicGUIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutClinicsClinicGUIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID o k body
func (o *PutClinicsClinicGUIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutClinicsClinicGUIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putClinicsClinicGuidOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
