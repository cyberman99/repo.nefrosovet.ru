// Code generated by go-swagger; DO NOT EDIT.

package clinics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PostClinicsReader is a Reader for the PostClinics structure.
type PostClinicsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostClinicsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostClinicsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostClinicsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPostClinicsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostClinicsOK creates a PostClinicsOK with default headers values
func NewPostClinicsOK() *PostClinicsOK {
	return &PostClinicsOK{}
}

/*PostClinicsOK handles this case with default header values.

Коллекция клиник
*/
type PostClinicsOK struct {
	Payload *PostClinicsOKBody
}

func (o *PostClinicsOK) Error() string {
	return fmt.Sprintf("[POST /clinics][%d] postClinicsOK  %+v", 200, o.Payload)
}

func (o *PostClinicsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostClinicsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostClinicsBadRequest creates a PostClinicsBadRequest with default headers values
func NewPostClinicsBadRequest() *PostClinicsBadRequest {
	return &PostClinicsBadRequest{}
}

/*PostClinicsBadRequest handles this case with default header values.

Validation error
*/
type PostClinicsBadRequest struct {
	Payload *PostClinicsBadRequestBody
}

func (o *PostClinicsBadRequest) Error() string {
	return fmt.Sprintf("[POST /clinics][%d] postClinicsBadRequest  %+v", 400, o.Payload)
}

func (o *PostClinicsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostClinicsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostClinicsMethodNotAllowed creates a PostClinicsMethodNotAllowed with default headers values
func NewPostClinicsMethodNotAllowed() *PostClinicsMethodNotAllowed {
	return &PostClinicsMethodNotAllowed{}
}

/*PostClinicsMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PostClinicsMethodNotAllowed struct {
	Payload *PostClinicsMethodNotAllowedBody
}

func (o *PostClinicsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /clinics][%d] postClinicsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostClinicsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostClinicsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostClinicsBadRequestBody post clinics bad request body
swagger:model PostClinicsBadRequestBody
*/
type PostClinicsBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsBadRequestBodyAO0
	var postClinicsBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postClinicsBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postClinicsBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClinicsBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics bad request body
func (o *PostClinicsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsBody post clinics body
swagger:model PostClinicsBody
*/
type PostClinicsBody struct {
	models.MainData

	models.ClinicObject

	PostClinicsParamsBodyAllOf2
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsParamsBodyAO0
	var postClinicsParamsBodyAO0 models.MainData
	if err := swag.ReadJSON(raw, &postClinicsParamsBodyAO0); err != nil {
		return err
	}
	o.MainData = postClinicsParamsBodyAO0

	// PostClinicsParamsBodyAO1
	var postClinicsParamsBodyAO1 models.ClinicObject
	if err := swag.ReadJSON(raw, &postClinicsParamsBodyAO1); err != nil {
		return err
	}
	o.ClinicObject = postClinicsParamsBodyAO1

	// PostClinicsParamsBodyAO2
	var postClinicsParamsBodyAO2 PostClinicsParamsBodyAllOf2
	if err := swag.ReadJSON(raw, &postClinicsParamsBodyAO2); err != nil {
		return err
	}
	o.PostClinicsParamsBodyAllOf2 = postClinicsParamsBodyAO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	postClinicsParamsBodyAO0, err := swag.WriteJSON(o.MainData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsParamsBodyAO0)

	postClinicsParamsBodyAO1, err := swag.WriteJSON(o.ClinicObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsParamsBodyAO1)

	postClinicsParamsBodyAO2, err := swag.WriteJSON(o.PostClinicsParamsBodyAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsParamsBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics body
func (o *PostClinicsBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainData
	if err := o.MainData.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.ClinicObject
	if err := o.ClinicObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostClinicsParamsBodyAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsMethodNotAllowedBody post clinics method not allowed body
swagger:model PostClinicsMethodNotAllowedBody
*/
type PostClinicsMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsMethodNotAllowedBodyAO0
	var postClinicsMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postClinicsMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postClinicsMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClinicsMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics method not allowed body
func (o *PostClinicsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsOKBody post clinics o k body
swagger:model PostClinicsOKBody
*/
type PostClinicsOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsOKBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsOKBodyAO0
	var postClinicsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postClinicsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postClinicsOKBodyAO0

	// PostClinicsOKBodyAO1
	var dataPostClinicsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostClinicsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostClinicsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postClinicsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsOKBodyAO0)

	var dataPostClinicsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPostClinicsOKBodyAO1.Data = o.Data

	jsonDataPostClinicsOKBodyAO1, errPostClinicsOKBodyAO1 := swag.WriteJSON(dataPostClinicsOKBodyAO1)
	if errPostClinicsOKBodyAO1 != nil {
		return nil, errPostClinicsOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostClinicsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics o k body
func (o *PostClinicsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostClinicsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postClinicsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsOKBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsParamsBodyAllOf2 post clinics params body all of2
swagger:model PostClinicsParamsBodyAllOf2
*/
type PostClinicsParamsBodyAllOf2 interface{}
