// Code generated by go-swagger; DO NOT EDIT.

package treatment_episodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new treatment episodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for treatment episodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetTreatmentEpisodes коллекцияs эпизодов лечения
*/
func (a *Client) GetTreatmentEpisodes(params *GetTreatmentEpisodesParams) (*GetTreatmentEpisodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreatmentEpisodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTreatmentEpisodes",
		Method:             "GET",
		PathPattern:        "/treatmentEpisodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreatmentEpisodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTreatmentEpisodesOK), nil

}

/*
GetTreatmentEpisodesTreatmentEpisodeGUID информацияs об эпизоде лечения
*/
func (a *Client) GetTreatmentEpisodesTreatmentEpisodeGUID(params *GetTreatmentEpisodesTreatmentEpisodeGUIDParams) (*GetTreatmentEpisodesTreatmentEpisodeGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTreatmentEpisodesTreatmentEpisodeGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTreatmentEpisodesTreatmentEpisodeGUID",
		Method:             "GET",
		PathPattern:        "/treatmentEpisodes/{treatmentEpisodeGUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTreatmentEpisodesTreatmentEpisodeGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTreatmentEpisodesTreatmentEpisodeGUIDOK), nil

}

/*
PostTreatmentEpisodes созданиеs эпизода лечения
*/
func (a *Client) PostTreatmentEpisodes(params *PostTreatmentEpisodesParams) (*PostTreatmentEpisodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTreatmentEpisodesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTreatmentEpisodes",
		Method:             "POST",
		PathPattern:        "/treatmentEpisodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTreatmentEpisodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTreatmentEpisodesOK), nil

}

/*
PutTreatmentEpisodesTreatmentEpisodeGUID изменениеs эпизода лечения
*/
func (a *Client) PutTreatmentEpisodesTreatmentEpisodeGUID(params *PutTreatmentEpisodesTreatmentEpisodeGUIDParams) (*PutTreatmentEpisodesTreatmentEpisodeGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTreatmentEpisodesTreatmentEpisodeGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTreatmentEpisodesTreatmentEpisodeGUID",
		Method:             "PUT",
		PathPattern:        "/treatmentEpisodes/{treatmentEpisodeGUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTreatmentEpisodesTreatmentEpisodeGUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTreatmentEpisodesTreatmentEpisodeGUIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
