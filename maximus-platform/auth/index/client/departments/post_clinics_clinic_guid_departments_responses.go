// Code generated by go-swagger; DO NOT EDIT.

package departments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PostClinicsClinicGUIDDepartmentsReader is a Reader for the PostClinicsClinicGUIDDepartments structure.
type PostClinicsClinicGUIDDepartmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostClinicsClinicGUIDDepartmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostClinicsClinicGUIDDepartmentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostClinicsClinicGUIDDepartmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostClinicsClinicGUIDDepartmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPostClinicsClinicGUIDDepartmentsMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostClinicsClinicGUIDDepartmentsOK creates a PostClinicsClinicGUIDDepartmentsOK with default headers values
func NewPostClinicsClinicGUIDDepartmentsOK() *PostClinicsClinicGUIDDepartmentsOK {
	return &PostClinicsClinicGUIDDepartmentsOK{}
}

/*PostClinicsClinicGUIDDepartmentsOK handles this case with default header values.

Коллекция подразделений
*/
type PostClinicsClinicGUIDDepartmentsOK struct {
	Payload *PostClinicsClinicGUIDDepartmentsOKBody
}

func (o *PostClinicsClinicGUIDDepartmentsOK) Error() string {
	return fmt.Sprintf("[POST /clinics/{clinicGUID}/departments][%d] postClinicsClinicGuidDepartmentsOK  %+v", 200, o.Payload)
}

func (o *PostClinicsClinicGUIDDepartmentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostClinicsClinicGUIDDepartmentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostClinicsClinicGUIDDepartmentsBadRequest creates a PostClinicsClinicGUIDDepartmentsBadRequest with default headers values
func NewPostClinicsClinicGUIDDepartmentsBadRequest() *PostClinicsClinicGUIDDepartmentsBadRequest {
	return &PostClinicsClinicGUIDDepartmentsBadRequest{}
}

/*PostClinicsClinicGUIDDepartmentsBadRequest handles this case with default header values.

Validation error
*/
type PostClinicsClinicGUIDDepartmentsBadRequest struct {
	Payload *PostClinicsClinicGUIDDepartmentsBadRequestBody
}

func (o *PostClinicsClinicGUIDDepartmentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /clinics/{clinicGUID}/departments][%d] postClinicsClinicGuidDepartmentsBadRequest  %+v", 400, o.Payload)
}

func (o *PostClinicsClinicGUIDDepartmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostClinicsClinicGUIDDepartmentsBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostClinicsClinicGUIDDepartmentsNotFound creates a PostClinicsClinicGUIDDepartmentsNotFound with default headers values
func NewPostClinicsClinicGUIDDepartmentsNotFound() *PostClinicsClinicGUIDDepartmentsNotFound {
	return &PostClinicsClinicGUIDDepartmentsNotFound{}
}

/*PostClinicsClinicGUIDDepartmentsNotFound handles this case with default header values.

Not found
*/
type PostClinicsClinicGUIDDepartmentsNotFound struct {
	Payload *PostClinicsClinicGUIDDepartmentsNotFoundBody
}

func (o *PostClinicsClinicGUIDDepartmentsNotFound) Error() string {
	return fmt.Sprintf("[POST /clinics/{clinicGUID}/departments][%d] postClinicsClinicGuidDepartmentsNotFound  %+v", 404, o.Payload)
}

func (o *PostClinicsClinicGUIDDepartmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostClinicsClinicGUIDDepartmentsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostClinicsClinicGUIDDepartmentsMethodNotAllowed creates a PostClinicsClinicGUIDDepartmentsMethodNotAllowed with default headers values
func NewPostClinicsClinicGUIDDepartmentsMethodNotAllowed() *PostClinicsClinicGUIDDepartmentsMethodNotAllowed {
	return &PostClinicsClinicGUIDDepartmentsMethodNotAllowed{}
}

/*PostClinicsClinicGUIDDepartmentsMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PostClinicsClinicGUIDDepartmentsMethodNotAllowed struct {
	Payload *PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody
}

func (o *PostClinicsClinicGUIDDepartmentsMethodNotAllowed) Error() string {
	return fmt.Sprintf("[POST /clinics/{clinicGUID}/departments][%d] postClinicsClinicGuidDepartmentsMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PostClinicsClinicGUIDDepartmentsMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostClinicsClinicGUIDDepartmentsBadRequestBody post clinics clinic GUID departments bad request body
swagger:model PostClinicsClinicGUIDDepartmentsBadRequestBody
*/
type PostClinicsClinicGUIDDepartmentsBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsClinicGUIDDepartmentsBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsClinicGUIDDepartmentsBadRequestBodyAO0
	var postClinicsClinicGUIDDepartmentsBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postClinicsClinicGUIDDepartmentsBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postClinicsClinicGUIDDepartmentsBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsClinicGUIDDepartmentsBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClinicsClinicGUIDDepartmentsBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsClinicGUIDDepartmentsBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics clinic GUID departments bad request body
func (o *PostClinicsClinicGUIDDepartmentsBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsClinicGUIDDepartmentsBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsClinicGUIDDepartmentsBody post clinics clinic GUID departments body
swagger:model PostClinicsClinicGUIDDepartmentsBody
*/
type PostClinicsClinicGUIDDepartmentsBody struct {
	models.MainData

	models.DepartmentObject

	PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsClinicGUIDDepartmentsBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsClinicGUIDDepartmentsParamsBodyAO0
	var postClinicsClinicGUIDDepartmentsParamsBodyAO0 models.MainData
	if err := swag.ReadJSON(raw, &postClinicsClinicGUIDDepartmentsParamsBodyAO0); err != nil {
		return err
	}
	o.MainData = postClinicsClinicGUIDDepartmentsParamsBodyAO0

	// PostClinicsClinicGUIDDepartmentsParamsBodyAO1
	var postClinicsClinicGUIDDepartmentsParamsBodyAO1 models.DepartmentObject
	if err := swag.ReadJSON(raw, &postClinicsClinicGUIDDepartmentsParamsBodyAO1); err != nil {
		return err
	}
	o.DepartmentObject = postClinicsClinicGUIDDepartmentsParamsBodyAO1

	// PostClinicsClinicGUIDDepartmentsParamsBodyAO2
	var postClinicsClinicGUIDDepartmentsParamsBodyAO2 PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2
	if err := swag.ReadJSON(raw, &postClinicsClinicGUIDDepartmentsParamsBodyAO2); err != nil {
		return err
	}
	o.PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2 = postClinicsClinicGUIDDepartmentsParamsBodyAO2

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsClinicGUIDDepartmentsBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	postClinicsClinicGUIDDepartmentsParamsBodyAO0, err := swag.WriteJSON(o.MainData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsClinicGUIDDepartmentsParamsBodyAO0)

	postClinicsClinicGUIDDepartmentsParamsBodyAO1, err := swag.WriteJSON(o.DepartmentObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsClinicGUIDDepartmentsParamsBodyAO1)

	postClinicsClinicGUIDDepartmentsParamsBodyAO2, err := swag.WriteJSON(o.PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsClinicGUIDDepartmentsParamsBodyAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics clinic GUID departments body
func (o *PostClinicsClinicGUIDDepartmentsBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MainData
	if err := o.MainData.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with models.DepartmentObject
	if err := o.DepartmentObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsClinicGUIDDepartmentsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody post clinics clinic GUID departments method not allowed body
swagger:model PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody
*/
type PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsClinicGUIDDepartmentsMethodNotAllowedBodyAO0
	var postClinicsClinicGUIDDepartmentsMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postClinicsClinicGUIDDepartmentsMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postClinicsClinicGUIDDepartmentsMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClinicsClinicGUIDDepartmentsMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsClinicGUIDDepartmentsMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics clinic GUID departments method not allowed body
func (o *PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsClinicGUIDDepartmentsMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsClinicGUIDDepartmentsNotFoundBody post clinics clinic GUID departments not found body
swagger:model PostClinicsClinicGUIDDepartmentsNotFoundBody
*/
type PostClinicsClinicGUIDDepartmentsNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsClinicGUIDDepartmentsNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsClinicGUIDDepartmentsNotFoundBodyAO0
	var postClinicsClinicGUIDDepartmentsNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &postClinicsClinicGUIDDepartmentsNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = postClinicsClinicGUIDDepartmentsNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsClinicGUIDDepartmentsNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postClinicsClinicGUIDDepartmentsNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsClinicGUIDDepartmentsNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics clinic GUID departments not found body
func (o *PostClinicsClinicGUIDDepartmentsNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsClinicGUIDDepartmentsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsClinicGUIDDepartmentsOKBody post clinics clinic GUID departments o k body
swagger:model PostClinicsClinicGUIDDepartmentsOKBody
*/
type PostClinicsClinicGUIDDepartmentsOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostClinicsClinicGUIDDepartmentsOKBody) UnmarshalJSON(raw []byte) error {
	// PostClinicsClinicGUIDDepartmentsOKBodyAO0
	var postClinicsClinicGUIDDepartmentsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postClinicsClinicGUIDDepartmentsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postClinicsClinicGUIDDepartmentsOKBodyAO0

	// PostClinicsClinicGUIDDepartmentsOKBodyAO1
	var dataPostClinicsClinicGUIDDepartmentsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPostClinicsClinicGUIDDepartmentsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostClinicsClinicGUIDDepartmentsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostClinicsClinicGUIDDepartmentsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postClinicsClinicGUIDDepartmentsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postClinicsClinicGUIDDepartmentsOKBodyAO0)

	var dataPostClinicsClinicGUIDDepartmentsOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPostClinicsClinicGUIDDepartmentsOKBodyAO1.Data = o.Data

	jsonDataPostClinicsClinicGUIDDepartmentsOKBodyAO1, errPostClinicsClinicGUIDDepartmentsOKBodyAO1 := swag.WriteJSON(dataPostClinicsClinicGUIDDepartmentsOKBodyAO1)
	if errPostClinicsClinicGUIDDepartmentsOKBodyAO1 != nil {
		return nil, errPostClinicsClinicGUIDDepartmentsOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostClinicsClinicGUIDDepartmentsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post clinics clinic GUID departments o k body
func (o *PostClinicsClinicGUIDDepartmentsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostClinicsClinicGUIDDepartmentsOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postClinicsClinicGuidDepartmentsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostClinicsClinicGUIDDepartmentsOKBody) UnmarshalBinary(b []byte) error {
	var res PostClinicsClinicGUIDDepartmentsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2 post clinics clinic GUID departments params body all of2
swagger:model PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2
*/
type PostClinicsClinicGUIDDepartmentsParamsBodyAllOf2 interface{}
