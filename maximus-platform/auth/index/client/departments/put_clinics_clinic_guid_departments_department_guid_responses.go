// Code generated by go-swagger; DO NOT EDIT.

package departments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/auth/index/models"
)

// PutClinicsClinicGUIDDepartmentsDepartmentGUIDReader is a Reader for the PutClinicsClinicGUIDDepartmentsDepartmentGUID structure.
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDOK creates a PutClinicsClinicGUIDDepartmentsDepartmentGUIDOK with default headers values
func NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDOK() *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOK {
	return &PutClinicsClinicGUIDDepartmentsDepartmentGUIDOK{}
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDOK handles this case with default header values.

Коллекция подразделений
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDOK struct {
	Payload *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOK) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}/departments/{departmentGUID}][%d] putClinicsClinicGuidDepartmentsDepartmentGuidOK  %+v", 200, o.Payload)
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest creates a PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest with default headers values
func NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest() *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest {
	return &PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest{}
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest handles this case with default header values.

Validation error
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest struct {
	Payload *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}/departments/{departmentGUID}][%d] putClinicsClinicGuidDepartmentsDepartmentGuidBadRequest  %+v", 400, o.Payload)
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound creates a PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound with default headers values
func NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound() *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound {
	return &PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound{}
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound handles this case with default header values.

Not found
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound struct {
	Payload *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}/departments/{departmentGUID}][%d] putClinicsClinicGuidDepartmentsDepartmentGuidNotFound  %+v", 404, o.Payload)
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed creates a PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed with default headers values
func NewPutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed() *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed {
	return &PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed{}
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed struct {
	Payload *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /clinics/{clinicGUID}/departments/{departmentGUID}][%d] putClinicsClinicGuidDepartmentsDepartmentGuidMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody put clinics clinic GUID departments department GUID bad request body
swagger:model PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBodyAO0
	var putClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID departments department GUID bad request body
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDDepartmentsDepartmentGUIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody put clinics clinic GUID departments department GUID body
swagger:model PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody struct {
	models.DepartmentObject

	PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO0
	var putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO0 models.DepartmentObject
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO0); err != nil {
		return err
	}
	o.DepartmentObject = putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO0

	// PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO1
	var putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO1 PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO1); err != nil {
		return err
	}
	o.PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1 = putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO0, err := swag.WriteJSON(o.DepartmentObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO0)

	putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO1, err := swag.WriteJSON(o.PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID departments department GUID body
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.DepartmentObject
	if err := o.DepartmentObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDDepartmentsDepartmentGUIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody put clinics clinic GUID departments department GUID method not allowed body
swagger:model PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBodyAO0
	var putClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID departments department GUID method not allowed body
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDDepartmentsDepartmentGUIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody put clinics clinic GUID departments department GUID not found body
swagger:model PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBodyAO0
	var putClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID departments department GUID not found body
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDDepartmentsDepartmentGUIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody put clinics clinic GUID departments department GUID o k body
swagger:model PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO0
	var putClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO0

	// PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1
	var dataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO0)

	var dataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data,omitempty"`
	}

	dataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1.Data = o.Data

	jsonDataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1, errPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1 := swag.WriteJSON(dataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1)
	if errPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1 != nil {
		return nil, errPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put clinics clinic GUID departments department GUID o k body
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putClinicsClinicGuidDepartmentsDepartmentGuidOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutClinicsClinicGUIDDepartmentsDepartmentGUIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1 put clinics clinic GUID departments department GUID params body all of1
swagger:model PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1
*/
type PutClinicsClinicGUIDDepartmentsDepartmentGUIDParamsBodyAllOf1 interface{}
