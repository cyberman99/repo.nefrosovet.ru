{
	"info": {
		"_postman_id": "814543f7-671e-4c5e-a4ab-647ac84d1d7e",
		"name": "Auth API",
		"description": "#### RESTFUL Auth API\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "00_prepare",
			"item": [
				{
					"name": "Создание пациента SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4f7bd583-fbc6-4a4a-89df-10870aa94c68",
								"exec": [
									"pm.environment.set(\"patientFirstName\", \"Имя Пациента\");",
									"pm.environment.set(\"patientLastName\", \"Фамилия Пациента\");",
									"pm.environment.set(\"patientPatronymic\", \"Отчество Пациента\");",
									"pm.environment.set(\"patientSmartCardNumber\", \"989bf46d4e904b07\");",
									"pm.environment.set(\"patientUsername\", \"auth.user.patient\");",
									"pm.environment.set(\"patientPassword\", \"auth.patient.password\");",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "90c6bf8d-be21-4387-922a-8c1f0214bc81",
								"exec": [
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{patientFirstName}}\",\n  \"lastName\": \"{{patientLastName}}\",\n  \"patronymic\": \"{{patientPatronymic}}\",\n  \"smartCardNumber\": \"{{patientSmartCardNumber}}\",\n  \"username\": \"{{patientUsername}}\",\n  \"password\": \"{{patientPassword}}\"\n}  "
						},
						"url": {
							"raw": "{{indexHost}}/patients",
							"host": [
								"{{indexHost}}"
							],
							"path": [
								"patients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание сотрудника SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dcb1eb2d-99f1-419f-b288-e66b929c3fbc",
								"exec": [
									"pm.environment.set(\"employeeFirstName\", \"Имя Сотрудника\");",
									"pm.environment.set(\"employeeLastName\", \"Фамилия Сотрудника\");",
									"pm.environment.set(\"employeePatronymic\", \"Отчество Сотрудника\");",
									"pm.environment.set(\"employeeSmartCardNumber\", \"123469cefca13e2\");",
									"pm.environment.set(\"employeeUsername\", \"auth.user.employee\");",
									"pm.environment.set(\"employeePassword\", \"auth.employee.password\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c22273ab-6bb5-4abb-aa2c-da20745fca09",
								"exec": [
									"",
									"// Check common response data",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"{{employeeFirstName}}\",\n  \"lastName\": \"{{employeeLastName}}\",\n  \"patronymic\": \"{{employeePatronymic}}\",\n  \"smartCardNumber\": \"{{employeeSmartCardNumber}}\",\n  \"username\": \"{{employeeUsername}}\",\n  \"password\": \"{{employeePassword}}\"\n}"
						},
						"url": {
							"raw": "{{indexHost}}/employees",
							"host": [
								"{{indexHost}}"
							],
							"path": [
								"employees"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01_roles",
			"item": [
				{
					"name": "Создание роли: ERROR 405 invalid method",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method PUT not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание роли: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ID\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleID\", \"TEST_ROLE\");",
									"pm.environment.set(\"roleDescription\", \"Test Role Description\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": 1,\n  \"description\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание роли: ERROR 400 attribute require",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ID\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleID\", \"TEST_ROLE\");",
									"pm.environment.set(\"roleDescription\", \"Test Role Description\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"foo\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание роли: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"roleSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"roleID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"roleDescription\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleID\", \"TEST_ROLE\");",
									"pm.environment.set(\"roleDescription\", \"Test Role Description\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": \"{{roleID}}\",\n  \"description\": \"{{roleDescription}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание роли: ERROR 400 unique",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ID\", \"unique\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": \"{{roleID}}\",\n  \"description\": \"{{roleDescription}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о роли: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57fae4c-6c74-4518-9e79-902a3742d0e7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/roles/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о роли: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57fae4c-6c74-4518-9e79-902a3742d0e7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"roleSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"roleID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"roleDescription\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Коллекция ролей: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"roleSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение роли: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleDescription\", \"New Test Role Description\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение роли: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleDescription\", \"New Test Role Description\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"{{roleDescription}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение роли: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"roleSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"roleID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"roleDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleDescription\", \"New Test Role Description\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"{{roleDescription}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о роли: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57fae4c-6c74-4518-9e79-902a3742d0e7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"roleSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"roleID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"roleDescription\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя в роль: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f12b7cd-57f1-4753-b41b-200004920096",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data).to.be.an('array').that.include(pm.variables.get(\"adminID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}/users/{{adminID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}",
								"users",
								"{{adminID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя в роль: ERROR 400 already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f12b7cd-57f1-4753-b41b-200004920096",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Role already applied\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}/users/{{adminID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}",
								"users",
								"{{adminID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя в роль: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f12b7cd-57f1-4753-b41b-200004920096",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{randomID}}/users/{{adminID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{randomID}}",
								"users",
								"{{adminID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление пользователя в роль: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f12b7cd-57f1-4753-b41b-200004920096",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}/users/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}",
								"users",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Коллекция пользователей роли: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d8e8269-ce5b-40ff-a546-1a5b3e2667ad",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data).to.be.an('array').that.include(pm.variables.get(\"adminID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}/users",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление пользователя из роли: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92c18840-3840-46af-b073-0745034b6915",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}/users/{{adminID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}",
								"users",
								"{{adminID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление пользователя из роли: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92c18840-3840-46af-b073-0745034b6915",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}/users/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}",
								"users",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление админа из роли ADMIN: ERROR 400 imposssible",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82292413-70eb-4a30-9b12-5f32e89b7875",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Can't delete ADMIN role from admin\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/ADMIN/users/admin",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"ADMIN",
								"users",
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление роли: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57fae4c-6c74-4518-9e79-902a3742d0e7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление роли: ERROR 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57fae4c-6c74-4518-9e79-902a3742d0e7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for roles"
		},
		{
			"name": "02_users",
			"item": [
				{
					"name": "Информация о пользователе: ERROR 401 Invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Access denied\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{randomID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": 1,\n  \"password\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"test\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя ERROR 401 Invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"login\": \"1\",\n  \"password\": \"1\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация админа SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"authLogin\", \"admin\");",
									"pm.environment.set(\"authPassword\", \"rootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f24c18c-2e20-4c4b-a7b0-48931a8b2930",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "Аутентификация пользователя по логин-паролю SUCCESS",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
								},
								"url": {
									"raw": "{{authHost}}/user",
									"host": [
										"{{authHost}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Oct 2018 12:33:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "99"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop.b81162-baab17e8\",\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"Authentication failure\"\n}"
						}
					]
				},
				{
					"name": "Информация о пользователе: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.variables.get(\"adminID\"));",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"ADMIN\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пациента SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"identityType\", \"PATIENT\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f24c18c-2e20-4c4b-a7b0-48931a8b2930",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{patientUsername}}\",\n\t\"password\": \"{{patientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "Аутентификация пользователя по логин-паролю SUCCESS",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
								},
								"url": {
									"raw": "{{authHost}}/user",
									"host": [
										"{{authHost}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Oct 2018 12:33:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "99"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop.b81162-baab17e8\",\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"Authentication failure\"\n}"
						}
					]
				},
				{
					"name": "Информация о пациенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(pm.environment.get(\"identityType\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация сотрудника SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"identityType\", \"EMPLOYEE\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f24c18c-2e20-4c4b-a7b0-48931a8b2930",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{employeeUsername}}\",\n\t\"password\": \"{{employeePassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": [
						{
							"name": "Аутентификация пользователя по логин-паролю SUCCESS",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
								},
								"url": {
									"raw": "{{authHost}}/user",
									"host": [
										"{{authHost}}"
									],
									"path": [
										"user"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "Date",
									"value": "Wed, 31 Oct 2018 12:33:25 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "99"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop.b81162-baab17e8\",\n    \"data\": null,\n    \"errors\": null,\n    \"message\": \"Authentication failure\"\n}"
						}
					]
				},
				{
					"name": "Информация о сотруднике: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(pm.environment.get(\"identityType\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление токена: ERROR Invalid token 400 Auth failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df10f27a-d23f-4137-a400-8cc4b9cff7f9",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"refreshToken\": \"{{randomID}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/refresh",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление токена: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/refresh",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение пароля админа: ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a43224d1-594e-4665-8965-1d0cefa224c5",
								"exec": [
									"pm.environment.set(\"authPassword\", \"NEWrootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95301fc3-3b26-4528-9203-5a4869c058f7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/admin",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение пароля админа: ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a43224d1-594e-4665-8965-1d0cefa224c5",
								"exec": [
									"pm.environment.set(\"authPassword\", \"NEWrootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "95301fc3-3b26-4528-9203-5a4869c058f7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"test\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/admin",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение пароля админа: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a43224d1-594e-4665-8965-1d0cefa224c5",
								"exec": [
									"pm.environment.set(\"authPassword\", \"NEWrootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4191d3e-7ab8-4ddf-9f19-3f3a13f6680a",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/{{adminID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"{{adminID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация админа SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"authPassword\", \"NEWrootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация пользователя: ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"authPassword\", \"NEWrootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"cardNumber\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cardNumber\": 1,\n\t\"user\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация пользователя: ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"authPassword\", \"NEWrootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"cardNumber\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"foo\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация пользователя: ERROR 400 attribute format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"authPassword\", \"NEWrootADMINpass\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"user\", \"enum\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cardNumber\": \"bar\",\n\t\"user\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация сотрудника: ERROR 401 invalid card number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"identityType\", \"EMPLOYEE\");",
									"pm.environment.set(\"userCardNumber\", \"123\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cardNumber\": \"{{userCardNumber}}\",\n\t\"user\": \"{{identityType}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация пациента: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"identityType\", \"PATIENT\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cardNumber\": \"{{patientSmartCardNumber}}\",\n    \"user\": \"{{identityType}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация пациента: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"identityType\", \"PATIENT\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cardNumber\": \"{{patientSmartCardNumber}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о пациенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(pm.environment.get(\"identityType\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация сотрудника: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"identityType\", \"EMPLOYEE\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cardNumber\": \"{{employeeSmartCardNumber}}\",\n\t\"user\": \"{{identityType}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Идентификация сотрудника: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									"pm.environment.set(\"identityType\", \"EMPLOYEE\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"cardNumber\": \"{{employeeSmartCardNumber}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/identify",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"identify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о сотруднике: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(pm.environment.get(\"identityType\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for auth"
		},
		{
			"name": "03_clients",
			"item": [
				{
					"name": "Аутентификация клиента ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"clientID\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clientID\": 1,\n\t\"password\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/client",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация клиента ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"clientID\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"foo\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/client",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация клиента ERROR Invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clientID\": \"{{randomID}}\",\n\t\"password\": \"xxx\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/client",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание клиента ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": 1,\n  \"password\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание клиента ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"foo\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"clientDescription\"));",
									"});",
									"",
									"pm.environment.set(\"clientID\", jsonData.data[0].ID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									"pm.environment.set(\"clientDescription\", \"testDescription\");",
									"pm.environment.set(\"clientPassword\", \"testPassword\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"{{clientDescription}}\",\n  \"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о клиенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"clientDescription\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация клиента SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clientID\": \"{{clientID}}\",\n\t\"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/client",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о клиенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.variables.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"CLIENT\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о клиенте: ERROR 404 Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/clients/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение клиента ERROR 404 Not Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"1\",\n  \"password\": \"1\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение клиента ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": 1,\n  \"password\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"clientDescription\"));",
									"});",
									"",
									"pm.environment.set(\"clientID\", jsonData.data[0].ID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									"pm.environment.set(\"clientDescription\", \"NewtestDescription\");",
									"pm.environment.set(\"clientPassword\", \"NewtestPassword\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"{{clientDescription}}\",\n  \"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о клиенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"clientDescription\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация клиента SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clientID\": \"{{clientID}}\",\n\t\"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/client",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о клиенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.variables.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"CLIENT\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение клиента ERROR 404 Not Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"1\",\n  \"password\": \"1\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение клиента ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": 1,\n  \"password\": 1\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"clientDescription\"));",
									"});",
									"",
									"pm.environment.set(\"clientID\", jsonData.data[0].ID);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									"pm.environment.set(\"clientDescription\", \"PatchtestDescription\");",
									"pm.environment.set(\"clientDescription\", \"PatchtestPassword\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"{{clientDescription}}\",\n  \"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о клиенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"clientID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"clientDescription\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация клиента SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clientID\": \"{{clientID}}\",\n\t\"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/client",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о клиенте: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.variables.get(\"clientID\"));",
									"        pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"CLIENT\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Коллекция клиентов: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"clientSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b730a489-0b0d-4291-b2c4-d2176e76afa4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/clients",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление клиента ERROR 404 Not Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "218d4ad4-6584-4075-86f9-8105fbbee75f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "56297a62-97b7-4e6f-8952-086e9b0c2998",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"1\",\n  \"password\": \"1\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/clients/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление клиента: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/clients/{{clientID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"clients",
								"{{clientID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация клиента: ERROR Invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3a153f97-b697-43c2-8a02-89128f8160a2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "16356115-bbc0-463e-a54c-369aa9298904",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clientID\": \"{{clientID}}\",\n\t\"password\": \"{{clientPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/client",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"client"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04_backends",
			"item": [
				{
					"name": "Создание LDAP бэкенда: ERROR 405 invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d81e7d82-cbf6-4fef-8fc0-ebc2e2d398bd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "299cdac1-bcac-49af-92c1-3a6dddadeb97",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method PUT not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sync\": 1,\n\t\"description\": 1,\n\t\"host\": 1,\n\t\"port\": \"1\",\n\t\"cipher\": 1,\n\t\"bindDN\": 1,\n\t\"baseDN\": 1,\n\t\"filter\": 1,\n\t\"password\": 1,\n\t\"attributes\": {\n\t\t\"GUID\": {\n\t\t\t\"map\": 1,\n\t\t\t\"sync\": 1\n\t\t},\n\t\t\"firstName\": {\n\t\t\t\"map\": \"givenName\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"lastName\": {\n\t\t\t\"map\": \"sn\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"patronymic\": {\n\t\t\t\"map\": \"middleName\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"username\": {\n\t\t\t\"map\": \"sAMAccountName\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"email\": {\n\t\t\t\"map\": \"mail\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"mobile\": {\n\t\t\t\"map\": \"mobile\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{authHost}}/backends/ldap",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"ldap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание LDAP бэкенда: ERROR 400 attribute type",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d81e7d82-cbf6-4fef-8fc0-ebc2e2d398bd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "299cdac1-bcac-49af-92c1-3a6dddadeb97",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"sync\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sync\": 1,\n\t\"description\": 1,\n\t\"host\": 1,\n\t\"port\": \"1\",\n\t\"cipher\": 1,\n\t\"bindDN\": 1,\n\t\"baseDN\": 1,\n\t\"filter\": 1,\n\t\"password\": 1,\n\t\"attributes\": {\n\t\t\"GUID\": {\n\t\t\t\"map\": 1,\n\t\t\t\"sync\": 1\n\t\t},\n\t\t\"firstName\": {\n\t\t\t\"map\": \"givenName\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"lastName\": {\n\t\t\t\"map\": \"sn\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"patronymic\": {\n\t\t\t\"map\": \"middleName\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"username\": {\n\t\t\t\"map\": \"sAMAccountName\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"email\": {\n\t\t\t\"map\": \"mail\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t},\n\t\t\"mobile\": {\n\t\t\t\"map\": \"mobile\",\n\t\t\t\"sync\": \"FIRST_LOGIN\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "{{authHost}}/backends/ldap",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"ldap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание LDAP бэкенда: ERROR 400 attribute require",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d81e7d82-cbf6-4fef-8fc0-ebc2e2d398bd",
								"exec": [
									"pm.environment.set(\"backendSync\", \"PATIENT\");",
									"pm.environment.set(\"backendDescription\", \"MS AD\");",
									"pm.environment.set(\"backendHost\", \"10.0.16.242\");",
									"pm.environment.set(\"backendPort\", 389);",
									"pm.environment.set(\"backendSSL\", \"NONE\");",
									"pm.environment.set(\"backendBindDN\", \"CN=Maximus Authorizer,OU=SystemUsers,OU=Objects,DC=nes,DC=lan\");",
									"pm.environment.set(\"backendPassword\", \"efrdnhe564GFsh\");",
									"pm.environment.set(\"backendBaseDN\", \"dc=nes,dc=lan\");",
									"pm.environment.set(\"backendFilter\", \"(|(userPrincipalName=%u@nes.lan)(mobile=%u))\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "673e0c3d-9df5-475e-bb69-8619e928366e",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"sync\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"host\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"port\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"bindDN\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"baseDN\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"filter\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"foo\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/backends/ldap",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"ldap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание LDAP бэкенда: ERROR 400 attribute format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d81e7d82-cbf6-4fef-8fc0-ebc2e2d398bd",
								"exec": [
									"pm.environment.set(\"backendSync\", \"PATIENT1\");",
									"pm.environment.set(\"backendDescription\", \"MS AD\");",
									"pm.environment.set(\"backendHost\", \"10.0.16.242\");",
									"pm.environment.set(\"backendPort\", 389);",
									"pm.environment.set(\"backendSSL\", \"NONE\");",
									"pm.environment.set(\"backendBindDN\", \"CN=Maximus Authorizer,OU=SystemUsers,OU=Objects,DC=nes,DC=lan\");",
									"pm.environment.set(\"backendPassword\", \"efrdnhe564GFsh\");",
									"pm.environment.set(\"backendBaseDN\", \"ou=Objects,dc=nes,dc=lan\");",
									"pm.environment.set(\"backendFilter\", \"(|(userPrincipalName=%u@nes.lan)(mobile=%u)(mail=%u))\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a04cf645-7c1d-46ad-95c8-d2838415770b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"sync\", \"enum\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sync\": \"{{backendSync}}\",\n  \"description\": \"{{backendDescription}}\",\n  \"host\": \"{{backendHost}}\",\n  \"port\": {{backendPort}},\n  \"cipher\": \"{{backendSSL}}\",\n  \"bindDN\": \"{{backendBindDN}}\",\n  \"baseDN\": \"{{backendBaseDN}}\",\n  \"filter\": \"{{backendFilter}}\",\n  \"password\": \"{{backendPassword}}\",\n  \"attributes\": {\n    \"GUID\": {\n      \"map\": \"objectGUID\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"firstName\": {\n      \"map\": \"givenName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"lastName\": {\n      \"map\": \"sn\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"patronymic\": {\n      \"map\": \"middleName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"username\": {\n      \"map\": \"sAMAccountName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"email\": {\n      \"map\": \"mail\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"mobile\": {\n      \"map\": \"mobile\",\n      \"sync\": \"FIRST_LOGIN\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{authHost}}/backends/ldap",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"ldap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание LDAP бэкенда: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d81e7d82-cbf6-4fef-8fc0-ebc2e2d398bd",
								"exec": [
									"pm.environment.set(\"backendSync\", \"PATIENT\");",
									"pm.environment.set(\"backendDescription\", \"Maximus AD\");",
									"pm.environment.set(\"backendHost\", \"10.0.21.244\");",
									"pm.environment.set(\"backendPort\", 3899);",
									"pm.environment.set(\"backendSSL\", \"TLS\");",
									"pm.environment.set(\"backendBindDN\", \"CN=Authorizer Maximus,CN=Users,DC=maximus,DC=lan\");",
									"pm.environment.set(\"backendPassword\", \"efrdnhe564GFsh\");",
									"pm.environment.set(\"backendBaseDN\", \"dc=maximus,dc=lan\");",
									"pm.environment.set(\"backendFilter\", \"(|(userPrincipalName=%u@maximus.lan)(mobile=%u)(mail=%u))\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e94858d-db3e-4682-9c46-e946483ff94c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backendSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity advanced schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backend_LDAP_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity attributes schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0].attributes, glFn.getEnvSchema(\"attributesSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"sync\", pm.variables.get(\"backendSync\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.variables.get(\"backendDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"host\", pm.variables.get(\"backendHost\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", pm.variables.get(\"backendPort\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"cipher\", pm.variables.get(\"backendSSL\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"bindDN\", pm.variables.get(\"backendBindDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"baseDN\", pm.variables.get(\"backendBaseDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"filter\", pm.variables.get(\"backendFilter\"));",
									"});",
									"",
									"pm.environment.set(\"backendID\", jsonData.data[0].ID);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sync\": \"{{backendSync}}\",\n  \"description\": \"{{backendDescription}}\",\n  \"host\": \"{{backendHost}}\",\n  \"port\": {{backendPort}},\n  \"cipher\": \"{{backendSSL}}\",\n  \"bindDN\": \"{{backendBindDN}}\",\n  \"baseDN\": \"{{backendBaseDN}}\",\n  \"filter\": \"{{backendFilter}}\",\n  \"password\": \"{{backendPassword}}\",\n  \"attributes\": {\n    \"GUID\": {\n      \"map\": \"objectGUID\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"username\": {\n      \"map\": \"sAMAccountName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"firstName\": {\n      \"map\": \"givenName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"lastName\": {\n      \"map\": \"sn\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"patronymic\": {\n      \"map\": \"middleName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"email\": {\n      \"map\": \"mail\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"mobile\": {\n      \"map\": \"mobile\",\n      \"sync\": \"FIRST_LOGIN\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{authHost}}/backends/ldap",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"ldap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о бэкенде: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48d418d-c953-4eda-b33b-79954312dcae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о бэкенде: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48d418d-c953-4eda-b33b-79954312dcae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backendSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity advanced schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backend_LDAP_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity attributes schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0].attributes, glFn.getEnvSchema(\"attributesSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"sync\", pm.variables.get(\"backendSync\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.variables.get(\"backendDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"host\", pm.variables.get(\"backendHost\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", pm.variables.get(\"backendPort\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"cipher\", pm.variables.get(\"backendSSL\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"bindDN\", pm.variables.get(\"backendBindDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"baseDN\", pm.variables.get(\"backendBaseDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"filter\", pm.variables.get(\"backendFilter\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Коллекция бэкендов: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48d418d-c953-4eda-b33b-79954312dcae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backendSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity advanced schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backend_LDAP_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity attributes schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0].attributes, glFn.getEnvSchema(\"attributesSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends"
							]
						}
					},
					"response": []
				},
				{
					"name": "Тестирование бэкенда: ERROR 400 failed to connect",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48d418d-c953-4eda-b33b-79954312dcae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backend_TEST_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"FAIL\");",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"  pm.expect(jsonData.data[0]).to.have.property(\"status\", \"FAILED\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/test",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя: ERROR 401 invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f0525a-a78b-4b03-b459-5e4e1598b342",
								"exec": [
									"pm.environment.set(\"authLogin\", \"auth_maximus\");",
									"pm.environment.set(\"authPassword\", \"lueNntseh9\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "014afa9e-7771-49e2-bdae-2c7f238df686",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение бэкенда: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48d418d-c953-4eda-b33b-79954312dcae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backendSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity advanced schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backend_LDAP_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity attributes schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0].attributes, glFn.getEnvSchema(\"attributesSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"sync\", pm.variables.get(\"backendSync\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.variables.get(\"backendDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"host\", pm.variables.get(\"backendHost\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", pm.variables.get(\"backendPort\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"bindDN\", pm.variables.get(\"backendBindDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"baseDN\", pm.variables.get(\"backendBaseDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"filter\", pm.variables.get(\"backendFilter\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "df36a169-f1d3-4608-b2a4-01bb1179bdca",
								"exec": [
									"pm.environment.set(\"backendSync\", \"PATIENT\");",
									"pm.environment.set(\"backendDescription\", \"New Maximus AD\");",
									"pm.environment.set(\"backendHost\", \"10.0.21.244\");",
									"pm.environment.set(\"backendPort\", 636);",
									"pm.environment.set(\"backendSSL\", \"TLS\");",
									"pm.environment.set(\"backendBindDN\", \"CN=Authorizer Maximus,CN=Users,DC=maximus,DC=lan\");",
									"pm.environment.set(\"backendPassword\", \"efrdnhe564GFsh\");",
									"pm.environment.set(\"backendBaseDN\", \"dc=maximus,dc=lan\");",
									"pm.environment.set(\"backendFilter\", \"(|(userPrincipalName=%u@maximus.lan)(mobile=%u)(mail=%u))\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sync\": \"{{backendSync}}\",\n  \"description\": \"{{backendDescription}}\",\n  \"host\": \"{{backendHost}}\",\n  \"port\": {{backendPort}},\n  \"cipher\": \"{{backendSSL}}\",\n  \"bindDN\": \"{{backendBindDN}}\",\n  \"baseDN\": \"{{backendBaseDN}}\",\n  \"filter\": \"{{backendFilter}}\",\n  \"password\": \"{{backendPassword}}\",\n  \"attributes\": {\n    \"GUID\": {\n      \"map\": \"objectGUID\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"username\": {\n      \"map\": \"sAMAccountName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"firstName\": {\n      \"map\": \"givenName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"lastName\": {\n      \"map\": \"sn\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"patronymic\": {\n      \"map\": \"middleName\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"email\": {\n      \"map\": \"mail\",\n      \"sync\": \"FIRST_LOGIN\"\n    },\n    \"mobile\": {\n      \"map\": \"mobile\",\n      \"sync\": \"FIRST_LOGIN\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{authHost}}/backends/ldap/{{backendID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"ldap",
								"{{backendID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о бэкенде: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48d418d-c953-4eda-b33b-79954312dcae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backendSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity advanced schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backend_LDAP_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity attributes schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0].attributes, glFn.getEnvSchema(\"attributesSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"sync\", pm.variables.get(\"backendSync\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.variables.get(\"backendDescription\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"host\", pm.variables.get(\"backendHost\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", pm.variables.get(\"backendPort\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"cipher\", pm.variables.get(\"backendSSL\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"bindDN\", pm.variables.get(\"backendBindDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"baseDN\", pm.variables.get(\"backendBaseDN\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"filter\", pm.variables.get(\"backendFilter\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Тестирование бэкенда: SUCCESS 200 success connect",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b48d418d-c953-4eda-b33b-79954312dcae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"backend_TEST_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"  pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/test",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя: ERROR 401 invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f0525a-a78b-4b03-b459-5e4e1598b342",
								"exec": [
									"pm.environment.set(\"authLogin\", \"auth_maximus\");",
									"pm.environment.set(\"authPassword\", \"lueNntseh91\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "571a0806-3478-4fdd-9c6a-0fb1a2a67785",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f0525a-a78b-4b03-b459-5e4e1598b342",
								"exec": [
									"pm.environment.set(\"authLogin\", \"auth_maximus\");",
									"pm.environment.set(\"authPassword\", \"lueNntseh9\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "014afa9e-7771-49e2-bdae-2c7f238df686",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о пользователе: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"PATIENT\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание роли NURSE : SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"roleSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"roleID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"roleDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleID\", \"NURSE\");",
									"pm.environment.set(\"roleDescription\", \"NURSE Role\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": \"{{roleID}}\",\n  \"description\": \"{{roleDescription}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Создание роли DOCTOR: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9bd4cb4f-8cc0-4882-8752-da2df73d1d20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"roleSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"roleID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"roleDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e073fef1-39f6-4a1d-b57d-59e6499deaf0",
								"exec": [
									"pm.environment.set(\"roleID\", \"DOCTOR\");",
									"pm.environment.set(\"roleDescription\", \"DOCTOR Role\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"ID\": \"{{roleID}}\",\n  \"description\": \"{{roleDescription}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/roles",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение ассоциации групп бэкенда: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"group\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"group\": 1,\n    \"roleID\": 1\n  }\n]"
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение ассоциации групп бэкенда: ERROR 400 attribute require",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"group\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"roleID\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"foo\": \"bar\"\n  }\n]"
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение ассоциации групп бэкенда: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"group\": \"grG_DC-001_sec_Git\",\n    \"roleID\": \"LAB\"\n  }\n]"
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение ассоциации групп бэкенда: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"groupSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"//pm.test(\"Entity data is correct\", function () {",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"group\", pm.variables.get(\"backendGroup\"));",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"roleID\", pm.variables.get(\"roleID\"));",
									"//});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39889c52-1f60-4670-af97-ba68243563b8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"group\": \"CN=GrLNURSE,OU=AUTH,OU=Services,OU=Groups,DC=maximus,DC=lan\",\n    \"roleID\": \"NURSE\"\n  },\n    {\n    \"group\": \"CN=GrLDOCTOR,OU=AUTH,OU=Services,OU=Groups,DC=maximus,DC=lan\",\n    \"roleID\": \"DOCTOR\"\n  }\n]"
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Коллекция групп бэкенда: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"groupSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"//pm.test(\"Entity data is correct\", function () {",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"group\", pm.variables.get(\"backendGroup\"));",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"roleID\", pm.variables.get(\"roleID\"));",
									"//});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f0525a-a78b-4b03-b459-5e4e1598b342",
								"exec": [
									"pm.environment.set(\"authLogin\", \"auth_maximus\");",
									"pm.environment.set(\"authPassword\", \"lueNntseh9\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "014afa9e-7771-49e2-bdae-2c7f238df686",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о пользователе: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"PATIENT\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"NURSE\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"DOCTOR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение ассоциации групп бэкенда: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"groupSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"//pm.test(\"Entity data is correct\", function () {",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"group\", pm.variables.get(\"backendGroup\"));",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"roleID\", pm.variables.get(\"roleID\"));",
									"//});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "39889c52-1f60-4670-af97-ba68243563b8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n    \"group\": \"CN=GrLADMIN,OU=AUTH,OU=Services,OU=Groups,DC=maximus,DC=lan\",\n    \"roleID\": \"ADMIN\"\n  },\n    {\n    \"group\": \"CN=GrLNURSE,OU=AUTH,OU=Services,OU=Groups,DC=maximus,DC=lan\",\n    \"roleID\": \"NURSE\"\n  },\n    {\n    \"group\": \"CN=GrLDOCTOR,OU=AUTH,OU=Services,OU=Groups,DC=maximus,DC=lan\",\n    \"roleID\": \"DOCTOR\"\n  }\n]"
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление токена: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/refresh",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о пользователе: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"PATIENT\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"NURSE\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"DOCTOR\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f0525a-a78b-4b03-b459-5e4e1598b342",
								"exec": [
									"pm.environment.set(\"authLogin\", \"auth_maximus\");",
									"pm.environment.set(\"authPassword\", \"lueNntseh9\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "014afa9e-7771-49e2-bdae-2c7f238df686",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о пользователе: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"PATIENT\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"NURSE\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"DOCTOR\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"ADMIN\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление роли DOCTOR: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f57fae4c-6c74-4518-9e79-902a3742d0e7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {},
						"url": {
							"raw": "{{authHost}}/roles/{{roleID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"roles",
								"{{roleID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление токена: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba44cfc-ec9d-4929-8891-f7040bdf1434",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/refresh",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о пользователе: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"PATIENT\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"NURSE\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"ADMIN\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.does.not.include(\"DOCTOR\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.does.not.include(\"\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя: SUCCESS 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f0525a-a78b-4b03-b459-5e4e1598b342",
								"exec": [
									"pm.environment.set(\"authLogin\", \"auth_maximus\");",
									"pm.environment.set(\"authPassword\", \"lueNntseh9\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "014afa9e-7771-49e2-bdae-2c7f238df686",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"authSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"accessToken\", jsonData.data[0].accessToken);",
									"pm.environment.set(\"refreshToken\", jsonData.data[0].refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о пользователе: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"userSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"PATIENT\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"NURSE\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.include(\"ADMIN\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.does.not.include(\"DOCTOR\");",
									"    pm.expect(jsonData.data[0].roles).to.be.an('array').that.does.not.include(\"\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/whoami",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"whoami"
							]
						}
					},
					"response": []
				},
				{
					"name": "Коллекция групп бэкенда: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"groupSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"//pm.test(\"Entity data is correct\", function () {",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"group\", pm.variables.get(\"backendGroup\"));",
									"//    pm.expect(jsonData.data[0]).to.have.property(\"roleID\", pm.variables.get(\"roleID\"));",
									"//});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Очистка групп бэкенда: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}/groups",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение последовательности бэкендов: ERROR 400 attribute type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e5624ce-686b-4688-9463-2aa153e87205",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"backendID\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\"backendID\": 1,\n\t\"order\": \"1\"\n},\n{\n\t\"backendID\": \"index\",\n\t\"order\": 2\n}\n]"
						},
						"url": {
							"raw": "{{authHost}}/flow",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение последовательности бэкендов: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e5624ce-686b-4688-9463-2aa153e87205",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\"backendID\": \"{{randomID}}\",\n\t\"order\": 1\n},\n{\n\t\"backendID\": \"index\",\n\t\"order\": 2\n}\n]"
						},
						"url": {
							"raw": "{{authHost}}/flow",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение последовательности бэкендов: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6e5624ce-686b-4688-9463-2aa153e87205",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"flowSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n\t{\n\t\"backendID\": \"{{backendID}}\",\n\t\"order\": 1\n},\n{\n\t\"backendID\": \"index\",\n\t\"order\": 2\n}\n]"
						},
						"url": {
							"raw": "{{authHost}}/flow",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"flow"
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление бэкенда: SUCCESS 200",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/backends/{{backendID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"backends",
								"{{backendID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Аутентификация пользователя: ERROR 401 invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b6f0525a-a78b-4b03-b459-5e4e1598b342",
								"exec": [
									"pm.environment.set(\"authLogin\", \"auth_maximus\");",
									"pm.environment.set(\"authPassword\", \"lueNntseh91\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "571a0806-3478-4fdd-9c6a-0fb1a2a67785",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 401);",
									"    pm.expect(pm.response).to.have.property('status', 'Unauthorized');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Authentication failure\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"login\": \"{{authLogin}}\",\n\t\"password\": \"{{authPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authHost}}/user",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05_events",
			"item": [
				{
					"name": "Коллекция событий: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"eventSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.environment.set(\"eventID\", jsonData.data[1].ID);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/events",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о событии: ERROR 404 not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/events/{{randomID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"events",
								"{{randomID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Информация о событии: SUCCESS 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec82e769-56c4-4fb4-a4a2-b0125613963b",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"eventSchema\"))).to.be.true;",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{authHost}}/events/{{eventID}}",
							"host": [
								"{{authHost}}"
							],
							"path": [
								"events",
								"{{eventID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "884fe9ae-10a6-4aa5-b6b7-fef82f8713fa",
				"type": "text/javascript",
				"exec": [
					"var uuid = require('uuid');",
					"pm.environment.set('randomID', uuid.v4());",
					"",
					"glFn = {",
					"    getEnvSchema: function(name) {",
					"        return JSON.parse(pm.variables.get(name));",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "50a79a44-a72d-4507-995d-2bfa02e2348a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6c8f173a-eb1c-4a65-80d4-b56ea71b8929",
			"key": "adminID",
			"value": "admin",
			"type": "string"
		},
		{
			"id": "8f708461-99e2-4fc9-86ac-a96adf914067",
			"key": "baseSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"version\":{\"type\":\"string\"},\"errors\":{\"type\":[\"object\",\"array\",\"null\"]},\"data\":{\"type\":[\"array\",\"null\"]}},\"required\":[\"version\",\"errors\",\"data\"]}",
			"type": "string"
		},
		{
			"id": "e1ff86a0-c17f-40f9-be12-9498502c2361",
			"key": "errorSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"validation\":{\"type\":\"object\"}}}",
			"type": "string"
		},
		{
			"id": "558384ed-637f-43dc-a9b5-efcfa46543fc",
			"key": "roleSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"},\"default\":{\"type\":\"boolean\"}},\"required\":[\"ID\",\"description\",\"default\"]}",
			"type": "string"
		},
		{
			"id": "31ab0c78-2127-4fc5-a885-1799076b675d",
			"key": "authSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"accessToken\":{\"type\":\"string\"},\"refreshToken\":{\"type\":\"string\"}},\"required\":[\"accessToken\",\"refreshToken\"]}",
			"type": "string"
		},
		{
			"id": "ecaaa0f4-4cea-4563-9041-beef247461a2",
			"key": "userSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"roles\":{\"type\":\"array\"}},\"required\":[\"ID\",\"roles\"]}",
			"type": "string"
		},
		{
			"id": "16076cef-7b2b-48f0-a0d5-e2c30028fa1b",
			"key": "clientSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"rescription\":{\"type\":\"string\"}},\"required\":[\"ID\",\"description\"]}",
			"type": "string"
		},
		{
			"id": "ee4c7c03-82c7-4c4e-84f0-1d9ecc8b2883",
			"key": "backendSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"PATIENT\",\"EMPLOYEE\"]},\"description\":{\"type\":\"string\"},\"attributes\":{\"type\":\"object\"}},\"required\":[\"ID\",\"description\",\"attributes\"]}",
			"type": "string"
		},
		{
			"id": "dfc82d6d-71b7-4dc5-a925-dfd35a8cd3b1",
			"key": "backend_LDAP_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"host\":{\"type\":\"string\"},\"port\":{\"type\":\"integer\"},\"cipher\":{\"type\":\"string\",\"enum\":[\"NONE\",\"TLS\",\"STARTTLS\"]},\"description\":{\"type\":\"string\"},\"bindDN\":{\"type\":\"string\"},\"baseDN\":{\"type\":\"string\"},\"filter\":{\"type\":\"string\"}},\"required\":[\"host\",\"port\",\"bindDN\",\"baseDN\",\"filter\"]}",
			"type": "string"
		},
		{
			"id": "c632ba33-8b95-4783-b75c-050b211d0b81",
			"key": "attributesSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"GUID\":{\"type\":\"object\",\"properties\":{\"map\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"ALWAYS\",\"FIRST_LOGIN\",\"NEVER\"]}},\"required\":[\"map\",\"sync\"]},\"firstName\":{\"type\":\"object\",\"properties\":{\"map\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"ALWAYS\",\"FIRST_LOGIN\",\"NEVER\"]}},\"required\":[\"map\",\"sync\"]},\"lastName\":{\"type\":\"object\",\"properties\":{\"map\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"ALWAYS\",\"FIRST_LOGIN\",\"NEVER\"]}},\"required\":[\"map\",\"sync\"]},\"patronymic\":{\"type\":\"object\",\"properties\":{\"map\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"ALWAYS\",\"FIRST_LOGIN\",\"NEVER\"]}},\"required\":[\"map\",\"sync\"]},\"email\":{\"type\":\"object\",\"properties\":{\"map\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"ALWAYS\",\"FIRST_LOGIN\",\"NEVER\"]}},\"required\":[\"map\",\"sync\"]}},\"mobile\":{\"type\":\"object\",\"properties\":{\"map\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"ALWAYS\",\"FIRST_LOGIN\",\"NEVER\"]}},\"required\":[\"map\",\"sync\"]},\"username\":{\"type\":\"object\",\"properties\":{\"map\":{\"type\":\"string\"},\"sync\":{\"type\":\"string\",\"enum\":[\"ALWAYS\",\"FIRST_LOGIN\",\"NEVER\"]}},\"required\":[\"map\",\"sync\"]},\"required\":[\"GUID\",\"username\"]}",
			"type": "string"
		},
		{
			"id": "043d7e73-a20c-4cd2-900b-b7931875c60f",
			"key": "flowSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"backendID\":{\"type\":\"string\"},\"order\":{\"type\":\"integer\"}},\"required\":[\"backendID\",\"order\"]}",
			"type": "string"
		},
		{
			"id": "a4a56d73-cb9e-4fd4-8c13-8009d09a3266",
			"key": "groupSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"group\":{\"type\":\"string\"},\"roleID\":{\"type\":\"string\"}},\"required\":[\"group\",\"roleID\"]}",
			"type": "string"
		},
		{
			"id": "8f252b0f-ac06-466f-bc81-1a509c4d6fba",
			"key": "eventSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"IP\":{\"type\":\"string\"},\"created\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"status\":{\"type\":\"string\"},\"entityID\":{\"type\":\"string\"}},\"required\":[\"ID\",\"IP\",\"created\",\"type\",\"status\",\"entityID\"]}",
			"type": "string"
		},
		{
			"id": "e13b5529-3659-4724-abf0-379023790826",
			"key": "backend_TEST_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"status\":{\"type\":\"string\",\"enum\":[\"FAILED\",\"SUCCESS\"]},\"error\":{\"type\":[\"string\",\"null\"]}},\"required\":[\"status\"]}",
			"type": "string"
		}
	]
}