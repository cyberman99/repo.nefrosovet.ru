// Code generated by go-swagger; DO NOT EDIT.

package viber

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/mailer/bot_proxy/models"
)

// PutWebhooksViberWebhookIDReader is a Reader for the PutWebhooksViberWebhookID structure.
type PutWebhooksViberWebhookIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutWebhooksViberWebhookIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutWebhooksViberWebhookIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutWebhooksViberWebhookIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutWebhooksViberWebhookIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewPutWebhooksViberWebhookIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutWebhooksViberWebhookIDOK creates a PutWebhooksViberWebhookIDOK with default headers values
func NewPutWebhooksViberWebhookIDOK() *PutWebhooksViberWebhookIDOK {
	return &PutWebhooksViberWebhookIDOK{}
}

/*PutWebhooksViberWebhookIDOK handles this case with default header values.

Коллекция каналов
*/
type PutWebhooksViberWebhookIDOK struct {
	Payload *models.PutWebhooksViberWebhookIDOKBody
}

func (o *PutWebhooksViberWebhookIDOK) Error() string {
	return fmt.Sprintf("[PUT /webhooks/viber/{webhookID}][%d] putWebhooksViberWebhookIdOK  %+v", 200, o.Payload)
}

func (o *PutWebhooksViberWebhookIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutWebhooksViberWebhookIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebhooksViberWebhookIDBadRequest creates a PutWebhooksViberWebhookIDBadRequest with default headers values
func NewPutWebhooksViberWebhookIDBadRequest() *PutWebhooksViberWebhookIDBadRequest {
	return &PutWebhooksViberWebhookIDBadRequest{}
}

/*PutWebhooksViberWebhookIDBadRequest handles this case with default header values.

Validation error
*/
type PutWebhooksViberWebhookIDBadRequest struct {
	Payload *models.PutWebhooksViberWebhookIDBadRequestBody
}

func (o *PutWebhooksViberWebhookIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /webhooks/viber/{webhookID}][%d] putWebhooksViberWebhookIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutWebhooksViberWebhookIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutWebhooksViberWebhookIDBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebhooksViberWebhookIDNotFound creates a PutWebhooksViberWebhookIDNotFound with default headers values
func NewPutWebhooksViberWebhookIDNotFound() *PutWebhooksViberWebhookIDNotFound {
	return &PutWebhooksViberWebhookIDNotFound{}
}

/*PutWebhooksViberWebhookIDNotFound handles this case with default header values.

Not found
*/
type PutWebhooksViberWebhookIDNotFound struct {
	Payload *models.PutWebhooksViberWebhookIDNotFoundBody
}

func (o *PutWebhooksViberWebhookIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /webhooks/viber/{webhookID}][%d] putWebhooksViberWebhookIdNotFound  %+v", 404, o.Payload)
}

func (o *PutWebhooksViberWebhookIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutWebhooksViberWebhookIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutWebhooksViberWebhookIDMethodNotAllowed creates a PutWebhooksViberWebhookIDMethodNotAllowed with default headers values
func NewPutWebhooksViberWebhookIDMethodNotAllowed() *PutWebhooksViberWebhookIDMethodNotAllowed {
	return &PutWebhooksViberWebhookIDMethodNotAllowed{}
}

/*PutWebhooksViberWebhookIDMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type PutWebhooksViberWebhookIDMethodNotAllowed struct {
	Payload *models.PutWebhooksViberWebhookIDMethodNotAllowedBody
}

func (o *PutWebhooksViberWebhookIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[PUT /webhooks/viber/{webhookID}][%d] putWebhooksViberWebhookIdMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *PutWebhooksViberWebhookIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutWebhooksViberWebhookIDMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
