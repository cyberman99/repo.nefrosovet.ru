// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/mailer/bot_proxy/models"
)

// GetWebhooksWebhookIDReader is a Reader for the GetWebhooksWebhookID structure.
type GetWebhooksWebhookIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebhooksWebhookIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetWebhooksWebhookIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetWebhooksWebhookIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewGetWebhooksWebhookIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetWebhooksWebhookIDOK creates a GetWebhooksWebhookIDOK with default headers values
func NewGetWebhooksWebhookIDOK() *GetWebhooksWebhookIDOK {
	return &GetWebhooksWebhookIDOK{}
}

/*GetWebhooksWebhookIDOK handles this case with default header values.

Коллекция каналов
*/
type GetWebhooksWebhookIDOK struct {
	Payload *models.GetWebhooksWebhookIDOKBody
}

func (o *GetWebhooksWebhookIDOK) Error() string {
	return fmt.Sprintf("[GET /webhooks/{webhookID}][%d] getWebhooksWebhookIdOK  %+v", 200, o.Payload)
}

func (o *GetWebhooksWebhookIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhooksWebhookIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhooksWebhookIDNotFound creates a GetWebhooksWebhookIDNotFound with default headers values
func NewGetWebhooksWebhookIDNotFound() *GetWebhooksWebhookIDNotFound {
	return &GetWebhooksWebhookIDNotFound{}
}

/*GetWebhooksWebhookIDNotFound handles this case with default header values.

Not found
*/
type GetWebhooksWebhookIDNotFound struct {
	Payload *models.GetWebhooksWebhookIDNotFoundBody
}

func (o *GetWebhooksWebhookIDNotFound) Error() string {
	return fmt.Sprintf("[GET /webhooks/{webhookID}][%d] getWebhooksWebhookIdNotFound  %+v", 404, o.Payload)
}

func (o *GetWebhooksWebhookIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhooksWebhookIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhooksWebhookIDMethodNotAllowed creates a GetWebhooksWebhookIDMethodNotAllowed with default headers values
func NewGetWebhooksWebhookIDMethodNotAllowed() *GetWebhooksWebhookIDMethodNotAllowed {
	return &GetWebhooksWebhookIDMethodNotAllowed{}
}

/*GetWebhooksWebhookIDMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type GetWebhooksWebhookIDMethodNotAllowed struct {
	Payload *models.GetWebhooksWebhookIDMethodNotAllowedBody
}

func (o *GetWebhooksWebhookIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[GET /webhooks/{webhookID}][%d] getWebhooksWebhookIdMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *GetWebhooksWebhookIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetWebhooksWebhookIDMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
