// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "repo.nefrosovet.ru/maximus-platform/mailer/bot_proxy/models"
)

// DeleteWebhooksWebhookIDReader is a Reader for the DeleteWebhooksWebhookID structure.
type DeleteWebhooksWebhookIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteWebhooksWebhookIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewDeleteWebhooksWebhookIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewDeleteWebhooksWebhookIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 405:
		result := NewDeleteWebhooksWebhookIDMethodNotAllowed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteWebhooksWebhookIDOK creates a DeleteWebhooksWebhookIDOK with default headers values
func NewDeleteWebhooksWebhookIDOK() *DeleteWebhooksWebhookIDOK {
	return &DeleteWebhooksWebhookIDOK{}
}

/*DeleteWebhooksWebhookIDOK handles this case with default header values.

Коллекция каналов
*/
type DeleteWebhooksWebhookIDOK struct {
	Payload *models.DeleteWebhooksWebhookIDOKBody
}

func (o *DeleteWebhooksWebhookIDOK) Error() string {
	return fmt.Sprintf("[DELETE /webhooks/{webhookID}][%d] deleteWebhooksWebhookIdOK  %+v", 200, o.Payload)
}

func (o *DeleteWebhooksWebhookIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteWebhooksWebhookIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWebhooksWebhookIDNotFound creates a DeleteWebhooksWebhookIDNotFound with default headers values
func NewDeleteWebhooksWebhookIDNotFound() *DeleteWebhooksWebhookIDNotFound {
	return &DeleteWebhooksWebhookIDNotFound{}
}

/*DeleteWebhooksWebhookIDNotFound handles this case with default header values.

Not found
*/
type DeleteWebhooksWebhookIDNotFound struct {
	Payload *models.DeleteWebhooksWebhookIDNotFoundBody
}

func (o *DeleteWebhooksWebhookIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /webhooks/{webhookID}][%d] deleteWebhooksWebhookIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteWebhooksWebhookIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteWebhooksWebhookIDNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteWebhooksWebhookIDMethodNotAllowed creates a DeleteWebhooksWebhookIDMethodNotAllowed with default headers values
func NewDeleteWebhooksWebhookIDMethodNotAllowed() *DeleteWebhooksWebhookIDMethodNotAllowed {
	return &DeleteWebhooksWebhookIDMethodNotAllowed{}
}

/*DeleteWebhooksWebhookIDMethodNotAllowed handles this case with default header values.

Invalid Method
*/
type DeleteWebhooksWebhookIDMethodNotAllowed struct {
	Payload *models.DeleteWebhooksWebhookIDMethodNotAllowedBody
}

func (o *DeleteWebhooksWebhookIDMethodNotAllowed) Error() string {
	return fmt.Sprintf("[DELETE /webhooks/{webhookID}][%d] deleteWebhooksWebhookIdMethodNotAllowed  %+v", 405, o.Payload)
}

func (o *DeleteWebhooksWebhookIDMethodNotAllowed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DeleteWebhooksWebhookIDMethodNotAllowedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
