// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new webhook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteWebhooksWebhookID удалениеs хука
*/
func (a *Client) DeleteWebhooksWebhookID(params *DeleteWebhooksWebhookIDParams) (*DeleteWebhooksWebhookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhooksWebhookIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteWebhooksWebhookID",
		Method:             "DELETE",
		PathPattern:        "/webhooks/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWebhooksWebhookIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteWebhooksWebhookIDOK), nil

}

/*
GetWebhooks коллекцияs хуков
*/
func (a *Client) GetWebhooks(params *GetWebhooksParams) (*GetWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhooksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWebhooks",
		Method:             "GET",
		PathPattern:        "/webhooks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWebhooksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebhooksOK), nil

}

/*
GetWebhooksWebhookID информацияs о хуке
*/
func (a *Client) GetWebhooksWebhookID(params *GetWebhooksWebhookIDParams) (*GetWebhooksWebhookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhooksWebhookIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetWebhooksWebhookID",
		Method:             "GET",
		PathPattern:        "/webhooks/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWebhooksWebhookIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWebhooksWebhookIDOK), nil

}

/*
PostWebhooksWebhookID публикацияs в хук
*/
func (a *Client) PostWebhooksWebhookID(params *PostWebhooksWebhookIDParams) (*PostWebhooksWebhookIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWebhooksWebhookIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostWebhooksWebhookID",
		Method:             "POST",
		PathPattern:        "/webhooks/{webhookID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostWebhooksWebhookIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostWebhooksWebhookIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
