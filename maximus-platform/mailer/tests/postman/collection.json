{
	"info": {
		"_postman_id": "b6afd770-817b-44c1-85bd-5bb886633511",
		"name": "Mailer AutoTests",
		"description": "#### RESTFULL Mailer API\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "00_tokens",
			"item": [
				{
					"name": "TK001_Создание токена: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53bb0730-1286-4452-85b5-76957c67ae34",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK002_Создание токена: ERROR attribute require validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "271cd0c1-39b6-440c-be1c-b7fb84ee7c63",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2efffded-2d54-46e7-881c-2d99aee5e8da",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"foo\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK003_Создание токена: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "67a7da4f-7c01-4272-854c-bde277f7db21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bdc56c6e-f4a2-42f0-910c-6ebb6ae28938",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK004_Создание токена: ERROR forbidden",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65f9007f-27b9-48d7-9de3-65e657511e77",
								"exec": [
									"pm.environment.set(\"tokenDescription\", \"Тестовый токен\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77d5bb7b-0363-428d-aa21-9c1aba75920d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 403);",
									"    pm.expect(pm.response).to.have.property('status', 'Forbidden');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"access denied\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{tokenDescription}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens?masterToken={{randomID}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{randomID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK005_Создание токена: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65f9007f-27b9-48d7-9de3-65e657511e77",
								"exec": [
									"pm.environment.set(\"tokenDescription\", \"Тестовый токен\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77d5bb7b-0363-428d-aa21-9c1aba75920d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"tokenSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"tokenDescription\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"accessToken\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{tokenDescription}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK006_Информация о  токене: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53bb0730-1286-4452-85b5-76957c67ae34",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK007_Информация о токене: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74cd5f1f-c2c1-466b-8597-913feeda0129",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e8453cd0-08df-4b55-9023-05bf2c010987",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/tokens/{{randomID}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK008_Информация о токене: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c380e36d-4910-4f45-9f82-8f6b88d74439",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2d14679-a3f3-4dc1-8843-c1d729521566",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel_email schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"tokenSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"accessToken\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"tokenDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK009_Изменение токена: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "997f7fdb-cb80-4a81-a495-fa11b994857c",
								"exec": [
									"pm.environment.set(\"tokenDescription\", \"Новый тестовый токен\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec97d495-41ef-4d91-ad3f-0dc11cd84e88",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{tokenDescription}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens/{{randomID}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK010_Изменение токена: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5a1c337-e846-4e7a-805c-0e71f84ca2e6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b095e6f0-3021-4c74-baf2-f904f9e7cbb7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK011_Изменение токена: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "67a7da4f-7c01-4272-854c-bde277f7db21",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bdc56c6e-f4a2-42f0-910c-6ebb6ae28938",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"description\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK012_Изменение токена: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fabf39f6-00a7-4f7d-9b33-d79eadc8453a",
								"exec": [
									"pm.environment.set(\"tokenDescription\", \"Новый тестовый токен\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31b13add-bbfb-4d17-acc5-102fec5410cf",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel_email schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"tokenSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"accessToken\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"tokenDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{tokenDescription}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK013_Информация о токене: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c380e36d-4910-4f45-9f82-8f6b88d74439",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2d14679-a3f3-4dc1-8843-c1d729521566",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel_email schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"tokenSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"accessToken\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"description\", pm.environment.get(\"tokenDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TK014_Коллекция токенов: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c380e36d-4910-4f45-9f82-8f6b88d74439",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a98d6b6e-3a16-4cf1-b65c-1cb9d86598bd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel_email schema is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"accessToken\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"tokenSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"accessToken\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(jsonData.data[item]).to.have.property(\"description\", pm.environment.get(\"tokenDescription\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/tokens?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "01_Mail",
			"item": [
				{
					"name": "ML001_Создание Mail канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2dc1c31d-a83a-4c51-8534-d04eab4f2209",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML002_Создание Mail канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "05413890-789d-4a76-ae07-6bed13434fd4",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf0163ad-93ec-415a-a158-4f3f94f7164a",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"port\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ssl\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"foo\": \"bar\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML003_Создание Mail канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27e1babd-6fe5-41e9-8c12-ebe357bbadba",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8baf5e5b-5437-496e-b4ec-bcc23a7d9f71",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": 1,\n    \"port\": \"1\",\n    \"ssl\": \"1\",\n    \"from\": 1,\n    \"login\": 1,\n    \"password\": 1,\n    \"contentType\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML004_Создание Mail канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7103ce0a-e939-4912-8931-7b8018b3b9de",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");",
									"pm.environment.set(\"channel_email_Server\", \"smtp.gmail.com\");",
									"pm.environment.set(\"channel_email_Port\", \"587\");",
									"pm.environment.set(\"channel_email_Encryption\", false);",
									"pm.environment.set(\"channel_email_From\", \"Иванов Иван\");",
									"pm.environment.set(\"channel_email_Login\", \"dial.test.g@gmail.com\");",
									"pm.environment.set(\"channel_email_Password\", \"!QAZxsw2\");",
									"pm.environment.set(\"channel_email_ContentType\", \"text/html; charset=UTF-8\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8635324c-cc4f-4621-a2b0-30a88bbba77a",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_email_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_email_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_email_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ssl\", pm.environment.get(\"channel_email_Encryption\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_email_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_email_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_email_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"contentType\", pm.environment.get(\"channel_email_ContentType\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"mail_channelID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"{{channel_email_Server}}\",\n    \"port\": {{channel_email_Port}},\n    \"ssl\": {{channel_email_Encryption}},\n    \"from\": \"{{channel_email_From}}\",\n    \"login\": \"{{channel_email_Login}}\",\n    \"password\": \"{{channel_email_Password}}\",\n    \"contentType\": \"{{channel_email_ContentType}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "ML005_Информация о  Mail канале: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53bb0730-1286-4452-85b5-76957c67ae34",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML006_Информация о Mail канале: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "74cd5f1f-c2c1-466b-8597-913feeda0129",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "45b6d8fe-9dbb-47bb-bf97-badbe57aaca1",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML007_Информация о Mail канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d92c9d9a-ff6f-4f88-bfbe-139889efee04",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_email_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_email_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_email_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ssl\", pm.environment.get(\"channel_email_Encryption\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_email_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_email_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_email_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"contentType\", pm.environment.get(\"channel_email_ContentType\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{mail_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{mail_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML008_Измененение  Mail канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8271003a-2430-434f-a45f-9194182af13b",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mail_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mail_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML009_Изменение Mail канала: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e84ce3a-2830-4469-9fbf-c77ff016fd0f",
								"exec": [
									"var uuid = require(\"uuid\");",
									"pm.environment.set(\"randomID\", uuid.v4());",
									"pm.environment.set(\"channelType\", \"email\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7114708b-ff1a-457e-b839-5fdbe85df4f3",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"1\",\n    \"port\": 1,\n    \"ssl\": true,\n    \"from\": \"1\",\n    \"login\": \"1\",\n    \"password\": \"1\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML010_Изменение Mail канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "05413890-789d-4a76-ae07-6bed13434fd4",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c0ca0ae0-3968-4826-a504-f755a863df60",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"port\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"ssl\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mail_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mail_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML011_Изменение Mail канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27e1babd-6fe5-41e9-8c12-ebe357bbadba",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8baf5e5b-5437-496e-b4ec-bcc23a7d9f71",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": 1,\n    \"port\": \"1\",\n    \"ssl\": \"1\",\n    \"from\": 1,\n    \"login\": 1,\n    \"password\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mail_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mail_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML012_Изменение Mail канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4b741356-6eaf-4584-9638-877b9bf0c432",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");",
									"pm.environment.set(\"channel_email_Server\", \"smtp.yandex.ru\");",
									"pm.environment.set(\"channel_email_Port\", \"465\");",
									"pm.environment.set(\"channel_email_Encryption\", true);",
									"pm.environment.set(\"channel_email_From\", \"Петров Петр\");",
									"pm.environment.set(\"channel_email_Login\", \"dial.test@yandex.ru\");",
									"pm.environment.set(\"channel_email_Password\", \"qwepoi123\");",
									"pm.environment.set(\"channel_email_ContentType\", \"text/plain; charset=UTF-8\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "046f030f-7ef6-44a3-948d-38657b685f33",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_email_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_email_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_email_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ssl\", pm.environment.get(\"channel_email_Encryption\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_email_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_email_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_email_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"contentType\", pm.environment.get(\"channel_email_ContentType\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"{{channel_email_Server}}\",\n    \"port\": {{channel_email_Port}},\n    \"ssl\": {{channel_email_Encryption}},\n    \"from\": \"{{channel_email_From}}\",\n    \"login\": \"{{channel_email_Login}}\",\n    \"password\": \"{{channel_email_Password}}\",\n    \"contentType\": \"{{channel_email_ContentType}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mail_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mail_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "ML013_Информация о Mail канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a2cc192-b88f-4405-bac1-727681ab71d9",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_email_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_email_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_email_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ssl\", pm.environment.get(\"channel_email_Encryption\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_email_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_email_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_email_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"contentType\", pm.environment.get(\"channel_email_ContentType\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{mail_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{mail_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML014_Коллекция каналов",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3d2387d-eefc-4f72-80a2-4129b4ff3a17",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel_email schema is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"mail_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"        pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"        pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_email_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"mail_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"        pm.expect(jsonData.data[item]).to.have.property(\"server\", pm.environment.get(\"channel_email_Server\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_email_Port\")));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"ssl\", pm.environment.get(\"channel_email_Encryption\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"from\", pm.environment.get(\"channel_email_From\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"login\", pm.environment.get(\"channel_email_Login\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"password\", pm.environment.get(\"channel_email_Password\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"contentType\", pm.environment.get(\"channel_email_ContentType\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Коллекция каналов: SUCCESS",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://test.maximus.lan/mailer/develop/channels",
									"protocol": "https",
									"host": [
										"test",
										"maximus",
										"lan"
									],
									"path": [
										"mailer",
										"develop",
										"channels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n            \"type\": \"email\",\n            \"server\": \"mail.google.com\",\n            \"port\": 465,\n            \"tls\": true,\n            \"from\": \"Иванов Иван\",\n            \"login\": \"ivanov@gmail.com\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "ML015_Отправка сообщения чере Mail канал: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2dc1c31d-a83a-4c51-8534-d04eab4f2209",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML015_Отправка сообщения через Mail канал: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d0583b76-ab8a-4f10-9748-0e2ec46bfe9c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e0b5274-fd1b-4df1-9953-b3d0c88f404c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"channelID\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"data\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"destination\", \"required\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML016_Отправка сообщения через Mail канал: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d0583b76-ab8a-4f10-9748-0e2ec46bfe9c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a697ee39-5f63-47f7-9ac5-4cc56bf36290",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"channelID\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": 1,\n  \"destination\": 1,\n  \"data\": 1,\n  \"meta\": {\n    \"emailSubject\": 1,\n    \"emailFrom\": 1\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML017_Отправка сообщения через Mail канал: ERROR channel not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1942bf42-966d-467e-8a7a-5f5624fa57b3",
								"exec": [
									"var uuid = require(\"uuid\");",
									"pm.environment.set(\"randomID\", uuid.v4());",
									"pm.environment.set(\"sendDestination\", \"noreply@nefrosovet.ru\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");",
									"pm.environment.set(\"metaSubject\", \"customSubject\");",
									"pm.environment.set(\"metaFrom\", \"customFrom\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "391634bc-d6e7-4242-b172-3cd09a66fb76",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"channelID\", \"not_found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{randomID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\",\n  \"meta\": {\n    \"emailSubject\": \"{{metaSubject}}\",\n    \"emailFrom\": \"{{metaFrom}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML018_Отправка сообщения через Mail канал: ERROR attribute format validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5163a497-e3b1-494a-9a6d-af5f6f40c427",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"noreply\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");",
									"pm.environment.set(\"metaSubject\", \"customSubject\");",
									"pm.environment.set(\"metaFrom\", \"customFrom\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "584d6c4a-4c86-4729-8904-342081884872",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"destination\", \"format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{mail_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\",\n  \"meta\": {\n    \"emailSubject\": \"{{metaSubject}}\",\n    \"emailFrom\": \"{{metaFrom}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML019_Отправка сообщения через Mail канал: ERROR invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5163a497-e3b1-494a-9a6d-af5f6f40c427",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"noreply\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");",
									"pm.environment.set(\"metaSubject\", \"customSubject\");",
									"pm.environment.set(\"metaFrom\", \"customFrom\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "584d6c4a-4c86-4729-8904-342081884872",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 403);",
									"    pm.expect(pm.response).to.have.property('status', 'Forbidden');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"checking access token error: not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{mail_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\",\n  \"meta\": {\n    \"emailSubject\": \"{{metaSubject}}\",\n    \"emailFrom\": \"{{metaFrom}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{randomID}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{randomID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML020_Отправка сообщения через Mail канал: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f27680d-edbf-46b9-8407-b471728bb9d1",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"noreply@nefrosovet.ru\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");",
									"pm.environment.set(\"metaSubject\", \"customSubject\");",
									"pm.environment.set(\"metaFrom\", \"customFrom\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b4ae765b-498e-4b70-b40a-3bb234f080fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"mail_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"    pm.expect(jsonData.data[0].meta).to.have.property(\"emailFrom\", pm.environment.get(\"metaFrom\"));",
									"    pm.expect(jsonData.data[0].meta).to.have.property(\"emailSubject\", pm.environment.get(\"metaSubject\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"email_messageID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{mail_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\",\n  \"meta\": {\n    \"emailSubject\": \"{{metaSubject}}\",\n    \"emailFrom\": \"{{metaFrom}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML021_Информация о сообщении Mail канала: ERROR not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0505c9d-0366-4092-91f0-1120e559b731",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf804ea3-a3b9-43d1-84a4-b7e58b6dc019",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML022_Информация о сообщении Mail канала: ERROR not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0505c9d-0366-4092-91f0-1120e559b731",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf804ea3-a3b9-43d1-84a4-b7e58b6dc019",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages/{{email_messageID}}?accessToken={{randomID}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages",
								"{{email_messageID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{randomID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML023_Информация о сообщении Mail канала: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7be4f58f-8583-4d6a-9f59-8bf49bbb8bc8",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"email_messageID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"mail_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"    pm.expect(jsonData.data[0].meta).to.have.property(\"emailFrom\", pm.environment.get(\"metaFrom\"));",
									"    pm.expect(jsonData.data[0].meta).to.have.property(\"emailSubject\", pm.environment.get(\"metaSubject\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages/{{email_messageID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages",
								"{{email_messageID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ML024_Коллекция сообщений: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f857dd8-09e0-4804-91ca-604c90476c5c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"email_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"        pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"email_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"        pm.expect(jsonData.data[item]).to.have.property(\"status\", \"SENT\");",
									"        pm.expect(jsonData.data[item]).to.have.property(\"channelID\", pm.environment.get(\"mail_channelID\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"        pm.expect(jsonData.data[item].meta).to.have.property(\"emailFrom\", pm.environment.get(\"metaFrom\"));",
									"        pm.expect(jsonData.data[item].meta).to.have.property(\"emailSubject\", pm.environment.get(\"metaSubject\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "02_Local_SMS",
			"item": [
				{
					"name": "SM001_Создание Local_SMS канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b621c6bd-3ba8-4795-83fe-47bf879cef9a",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM002_Создание Local_SMS канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "47db36fb-1715-4d47-bbfb-0e28ab2e1333",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d80cb7b5-8755-4bfb-a758-468758e2e657",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"db\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"limit\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"modemID\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"port\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM003_Создание Local_SMS канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cd9a52c-4a00-48ff-81fe-8ff73be15f2b",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8baf5e5b-5437-496e-b4ec-bcc23a7d9f71",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": 1,\n    \"port\": \"1\",\n    \"db\": 1,\n    \"login\": 1,\n    \"password\": 1,\n    \"modemID\": \"1\",\n    \"limit\": \"100\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM004_Создание Local_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf062bf9-1fff-4ffa-be95-9b54d095797f",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");",
									"pm.environment.set(\"channel_local_sms_Server\", \"10.0.17.60\");",
									"pm.environment.set(\"channel_local_sms_Port\", \"3306\");",
									"pm.environment.set(\"channel_local_sms_DB\", \"sms\");",
									"pm.environment.set(\"channel_local_sms_Login\", \"test_user\");",
									"pm.environment.set(\"channel_local_sms_Password\", \"8Mc4NpjIea123\");",
									"pm.environment.set(\"channel_local_sms_ModemID\", \"1\");",
									"pm.environment.set(\"channel_local_sms_Limit\", 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5300ce3f-07f7-4f36-adf6-4dbaa4eb1ec0",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_local_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_local_sms_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_local_sms_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"db\", pm.environment.get(\"channel_local_sms_DB\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_local_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_local_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"modemID\", parseInt(pm.environment.get(\"channel_local_sms_ModemID\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_local_sms_Limit\"));",
									"});",
									"",
									" pm.environment.set(\"local_SMS_channelID\", jsonData.data[0].ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"{{channel_local_sms_Server}}\",\n    \"port\": {{channel_local_sms_Port}},\n    \"db\": \"{{channel_local_sms_DB}}\",\n    \"login\": \"{{channel_local_sms_Login}}\",\n    \"password\": \"{{channel_local_sms_Password}}\",\n    \"modemID\": {{channel_local_sms_ModemID}},\n    \"limit\": {{channel_local_sms_Limit}}\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_local_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/local_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"local_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"738df5c0-63c8-4c21-b6c3-91801221a6d4\",\n            \"type\": \"local_sms\",\n            \"server\": \"127.0.0.1\",\n            \"port\": 3306,\n            \"login\": \"root\",\n            \"password\": \"xxxxxx\",\n             \"modemID\": 1\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "SM005_Информация о Local_SMS канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ef5e913b-791a-40c8-991b-edf93edcf40f",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_local_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"local_SMS_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_local_sms_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_local_sms_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"db\", pm.environment.get(\"channel_local_sms_DB\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_local_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_local_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"modemID\", parseInt(pm.environment.get(\"channel_local_sms_ModemID\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_local_sms_Limit\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{local_SMS_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{local_SMS_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM006_Отправка сообщения через Local_SMS канал: ERROR",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5ce6b4c-f69f-4993-bb6e-a3df87702ea4",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+79161145827\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ff0fe24-a795-49e6-a1c9-d34569cff273",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 500);",
									"    pm.expect(pm.response).to.have.property('status', 'Internal Server Error');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Internal server error\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"ERROR\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"local_SMS_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{local_SMS_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM007_Измененение Local_SMS канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d2e8ad9b-2ddf-4c76-90c9-de25f9ba8db5",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{local_SMS_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{local_SMS_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM008_Изменение Local_SMS канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "47db36fb-1715-4d47-bbfb-0e28ab2e1333",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "611cd829-fdc4-476d-9aa3-f58b33e13a1a",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"db\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"limit\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"modemID\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"port\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{local_SMS_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{local_SMS_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM009_Изменение Local_SMS канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4cd9a52c-4a00-48ff-81fe-8ff73be15f2b",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8baf5e5b-5437-496e-b4ec-bcc23a7d9f71",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"server\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": 1,\n    \"port\": \"1\",\n    \"db\": 1,\n    \"login\": 1,\n    \"password\": 1,\n    \"modemID\": \"1\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{local_SMS_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{local_SMS_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM010_Изменение Local_SMS канала: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "725c05bb-e805-41b5-b3fd-89723ac900bb",
								"exec": [
									"var uuid = require(\"uuid\");",
									"pm.environment.set(\"randomID\", uuid.v4());",
									"pm.environment.set(\"channelType\", \"local_sms\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0804defa-e4d8-4a73-a149-e45fe8c6d36e",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"1\",\n    \"port\": 1,\n    \"db\": \"1\",\n    \"login\": \"1\",\n    \"password\": \"1\",\n    \"modemID\": 1,\n    \"limit\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM011_Изменение Local_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "420afcff-6b93-4872-97dd-27ccb371412d",
								"exec": [
									"pm.environment.set(\"channelType\", \"local_sms\");",
									"pm.environment.set(\"channel_local_sms_Server\", \"10.0.17.60\");",
									"pm.environment.set(\"channel_local_sms_Port\", \"3306\");",
									"pm.environment.set(\"channel_local_sms_DB\", \"sms\");",
									"pm.environment.set(\"channel_local_sms_Login\", \"test_user\");",
									"pm.environment.set(\"channel_local_sms_Password\", \"8Mc4NpjIea\");",
									"pm.environment.set(\"channel_local_sms_ModemID\", \"2\");",
									"pm.environment.set(\"channel_local_sms_Limit\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "907db94a-f3c1-44fa-9152-2f3881046f86",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_local_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"local_SMS_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_local_sms_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_local_sms_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"db\", pm.environment.get(\"channel_local_sms_DB\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_local_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_local_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"modemID\", parseInt(pm.environment.get(\"channel_local_sms_ModemID\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_local_sms_Limit\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"{{channel_local_sms_Server}}\",\n    \"port\": {{channel_local_sms_Port}},\n    \"db\": \"{{channel_local_sms_DB}}\",\n    \"login\": \"{{channel_local_sms_Login}}\",\n    \"password\": \"{{channel_local_sms_Password}}\",\n    \"modemID\": {{channel_local_sms_ModemID}},\n    \"limit\": {{channel_local_sms_Limit}}\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{local_SMS_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{local_SMS_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "SM012_Информация о Local_SMS канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b538d5a-925d-4e7b-9abf-88d8e0d3dccc",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_local_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"local_SMS_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"server\", pm.environment.get(\"channel_local_sms_Server\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_local_sms_Port\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"db\", pm.environment.get(\"channel_local_sms_DB\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_local_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_local_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"modemID\", parseInt(pm.environment.get(\"channel_local_sms_ModemID\")));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_local_sms_Limit\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{local_SMS_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{local_SMS_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM013_Коллекция каналов",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b3a2152-8d6a-4a84-8b31-c4dc7ab51527",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"local_SMS_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_local_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"local_SMS_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"        pm.expect(jsonData.data[item]).to.have.property(\"server\", pm.environment.get(\"channel_local_sms_Server\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"port\", parseInt(pm.environment.get(\"channel_local_sms_Port\")));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"db\", pm.environment.get(\"channel_local_sms_DB\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"login\", pm.environment.get(\"channel_local_sms_Login\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"password\", pm.environment.get(\"channel_local_sms_Password\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"modemID\", parseInt(pm.environment.get(\"channel_local_sms_ModemID\")));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"limit\", pm.environment.get(\"channel_local_sms_Limit\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Коллекция каналов: SUCCESS",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://test.maximus.lan/mailer/develop/channels",
									"protocol": "https",
									"host": [
										"test",
										"maximus",
										"lan"
									],
									"path": [
										"mailer",
										"develop",
										"channels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n            \"type\": \"email\",\n            \"server\": \"mail.google.com\",\n            \"port\": 465,\n            \"tls\": true,\n            \"from\": \"Иванов Иван\",\n            \"login\": \"ivanov@gmail.com\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "SM014_Отправка сообщения через Local_SMS канал: ERROR attribute format validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2d096c08-61df-4526-87c0-3ebec501bbd0",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"79161145827\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71b3f835-d425-471c-87bf-adfc5370e82e",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"destination\", \"format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{local_SMS_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM015_Отправка сообщения через Local_SMS канал: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5ce6b4c-f69f-4993-bb6e-a3df87702ea4",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+79161145827\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ff0fe24-a795-49e6-a1c9-d34569cff273",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"local_SMS_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									"",
									" pm.environment.set(\"local_SMS_messageID\", jsonData.data[0].ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{local_SMS_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM016_Информация о сообщении Local_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9344e67-7b6f-4383-ba83-d4b5d480c256",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"local_SMS_messageID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"local_SMS_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages/{{local_SMS_messageID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages",
								"{{local_SMS_messageID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM017_Коллекция сообщений: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f857dd8-09e0-4804-91ca-604c90476c5c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\": pm.environment.get(\"local_SMS_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"         item=_.findIndex(jsonData.data, {\"ID\": pm.environment.get(\"local_SMS_messageID\")})",
									"        pm.expect(item).to.not.equal(-1);",
									"        pm.expect(jsonData.data[item]).to.have.property(\"status\", \"SENT\");",
									"        pm.expect(jsonData.data[item]).to.have.property(\"channelID\", pm.environment.get(\"local_SMS_channelID\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SM018_Отправка сообщения через Local_SMS канал: ERROR limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5ce6b4c-f69f-4993-bb6e-a3df87702ea4",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+79161145827\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ff0fe24-a795-49e6-a1c9-d34569cff273",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"can't send message\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"ERROR\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"errors\", \"exceeded sending limit\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"local_SMS_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{local_SMS_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "03_MTS_SMS",
			"item": [
				{
					"name": "MT001_Создание MTS_SMS канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "457cd8f3-31a3-4cd2-bc24-b71ac2c7d0f0",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT002_Создание MTS_SMS канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1edc8aa-25c4-42f2-8b74-69a9ea9436d3",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "01057344-e2ae-4963-a7cc-8bd53d059602",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"from\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"limit\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT003_Создание MTS_SMS канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1d038ac-a86b-4ae4-8f43-3c7b6b7db0bb",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d55b765-e2e7-4541-94f1-76bb6832ea45",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"from\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from\": 1,\n    \"login\": 1,\n    \"password\": 1,\n    \"limit\": \"1\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT004_Создание MTS_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3db911ae-7cb5-423a-ab25-19946d06f44c",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");",
									"pm.environment.set(\"channel_mts_sms_From\", \"Иванов Иван\");",
									"pm.environment.set(\"channel_mts_sms_Login\", \"79215624896\");",
									"pm.environment.set(\"channel_mts_sms_Password\", \"zXxtZb7Nqv111\");",
									"pm.environment.set(\"channel_mts_sms_Limit\", 2);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb7f8260-64f3-46a3-bb52-37490d7f5576",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_mts_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_mts_sms_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_mts_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_mts_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_mts_sms_Limit\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"mts_sms_channelID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from\": \"{{channel_mts_sms_From}}\",\n    \"login\": \"{{channel_mts_sms_Login}}\",\n    \"password\": \"{{channel_mts_sms_Password}}\",\n    \"limit\": {{channel_mts_sms_Limit}}\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "MT005_Информация о MTS_SMS канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07afe73e-cd4c-4f4a-98ab-9e23ba3939c8",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_mts_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"mts_sms_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_mts_sms_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_mts_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_mts_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_mts_sms_Limit\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{mts_sms_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{mts_sms_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT006_Отправка сообщения через MTS_SMS канал: ERROR",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30ece22b-272f-403d-8a01-d3434d23d293",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+79161145827\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e1ac901-4202-42a2-87f9-7752ce27d6dc",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 500);",
									"    pm.expect(pm.response).to.have.property('status', 'Internal Server Error');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Internal server error\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"ERROR\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"mts_sms_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{mts_sms_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT007_Измененение MTS_SMS канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "af4c1b7a-d093-47fc-a1f4-8970b98691b1",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mts_sms_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mts_sms_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT008_Изменение MTS_SMS канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e1edc8aa-25c4-42f2-8b74-69a9ea9436d3",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c737c00a-8b84-4df4-a07e-e07ce6ba8a47",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"from\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"limit\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"login\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"password\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mts_sms_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mts_sms_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT009_Изменение MTS_SMS канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1d038ac-a86b-4ae4-8f43-3c7b6b7db0bb",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1d55b765-e2e7-4541-94f1-76bb6832ea45",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"from\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from\": 1,\n    \"login\": 1,\n    \"password\": 1,\n    \"limit\": \"1\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mts_sms_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mts_sms_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT010_Изменение MTS_SMS канала: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28e31f4d-dfe6-4cd9-a445-bfb171a89207",
								"exec": [
									"var uuid = require(\"uuid\");",
									"pm.environment.set(\"randomID\", uuid.v4());",
									"pm.environment.set(\"channelType\", \"mts_sms\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23cac3fd-0bfa-4bb0-a297-0b2cae3379ef",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"1\",\n    \"port\": 1,\n    \"ssl\": true,\n    \"from\": \"1\",\n    \"login\": \"1\",\n    \"password\": \"1\",\n    \"limit\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT011_Изменение MTS_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "22458c2d-5640-4f90-9091-f1dbd11a282a",
								"exec": [
									"pm.environment.set(\"channelType\", \"mts_sms\");",
									"pm.environment.set(\"channel_mts_sms_From\", \"Петров Петр\");",
									"pm.environment.set(\"channel_mts_sms_Login\", \"79215624896\");",
									"pm.environment.set(\"channel_mts_sms_Password\", \"zXxtZb7Nqv\");",
									"pm.environment.set(\"channel_mts_sms_Limit\", 1);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7c0bb721-0cd3-454e-8d8f-6ce784e30b79",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_mts_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_mts_sms_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_mts_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_mts_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_mts_sms_Limit\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from\": \"{{channel_mts_sms_From}}\",\n    \"login\": \"{{channel_mts_sms_Login}}\",\n    \"password\": \"{{channel_mts_sms_Password}}\",\n    \"limit\": {{channel_mts_sms_Limit}}\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{mts_sms_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{mts_sms_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "MT012_Информация о MTS_SMS канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a70c160e-1955-4020-bfd6-9c9adf11daf7",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_mts_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"from\", pm.environment.get(\"channel_mts_sms_From\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"login\", pm.environment.get(\"channel_mts_sms_Login\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"password\", pm.environment.get(\"channel_mts_sms_Password\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"limit\", pm.environment.get(\"channel_mts_sms_Limit\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{mts_sms_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{mts_sms_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT013_Коллекция каналов",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b3a2152-8d6a-4a84-8b31-c4dc7ab51527",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"mts_sms_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_mts_sms_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"mts_sms_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(jsonData.data[item]).to.have.property(\"from\", pm.environment.get(\"channel_mts_sms_From\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"login\", pm.environment.get(\"channel_mts_sms_Login\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"password\", pm.environment.get(\"channel_mts_sms_Password\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"limit\", pm.environment.get(\"channel_mts_sms_Limit\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Коллекция каналов: SUCCESS",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://test.maximus.lan/mailer/develop/channels",
									"protocol": "https",
									"host": [
										"test",
										"maximus",
										"lan"
									],
									"path": [
										"mailer",
										"develop",
										"channels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n            \"type\": \"email\",\n            \"server\": \"mail.google.com\",\n            \"port\": 465,\n            \"tls\": true,\n            \"from\": \"Иванов Иван\",\n            \"login\": \"ivanov@gmail.com\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "MT014_Отправка сообщения через MTS_SMS канал: ERROR attribute format validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2d096c08-61df-4526-87c0-3ebec501bbd0",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"79161145827\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "71b3f835-d425-471c-87bf-adfc5370e82e",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"destination\", \"format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{mts_sms_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT015_Отправка сообщения через MTS_SMS канал: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "30ece22b-272f-403d-8a01-d3434d23d293",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+79161145827\");",
									"pm.environment.set(\"sendData\", \"bla bla bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3e1ac901-4202-42a2-87f9-7752ce27d6dc",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"mts_sms_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"mts_SMS_messageID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{mts_sms_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT016_Информация о сообщении MTS_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "319cc29d-c346-478b-a8bb-7afc84cb0db1",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"mts_SMS_messageID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"mts_sms_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages/{{mts_SMS_messageID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages",
								"{{mts_SMS_messageID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT017_Отправка сообщения через MTS_SMS канал: ERROR limit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d5ce6b4c-f69f-4993-bb6e-a3df87702ea4",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ff0fe24-a795-49e6-a1c9-d34569cff273",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"can't send message\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"ERROR\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"errors\", \"exceeded sending limit\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"mts_sms_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{mts_sms_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MT018_Коллекция сообщений: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f857dd8-09e0-4804-91ca-604c90476c5c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"mts_SMS_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"mts_SMS_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(jsonData.data[item]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[item]).to.have.property(\"channelID\", pm.environment.get(\"mts_sms_channelID\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04_Telegram",
			"item": [
				{
					"name": "TG001_Создание Telegram канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "42fb8be9-4ab4-4fe1-bc81-f2bce939737c",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG002_Создание Telegram канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "388c3ec7-6eb0-4edd-bd9a-29ed842b3eac",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83dd27fc-8aca-4f7c-abb0-c59547249937",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"alternateText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"answerText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"buttonText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"greetingText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG003_Создание Telegram канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b625391-3d5d-47ea-9af7-b00cca5714f1",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049f354e-8608-470a-8b2f-c1fd456db1ae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": 1,\n    \"greetingText\": 1,\n    \"buttonText\": 1,\n    \"answerText\": 1,\n    \"alternateText\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG004_Создание Telegram канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e432e80f-95b3-4cfd-8d69-53e9d4ca91bb",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");",
									"pm.environment.set(\"channel_telegram_token\", \"573113852:AAFifRog6VAkFVQxafwthkiYOvz0SvIeRp7\");",
									"pm.environment.set(\"channel_telegram_greetingText\", \"Для получения увеномлений от нас, сообщите пожалуйста Ваш номер телефона\");",
									"pm.environment.set(\"channel_telegram_buttonText\", \"Передать контактные данные\");",
									"pm.environment.set(\"channel_telegram_answerText\", \"Ваши данные сохранены\");",
									"pm.environment.set(\"channel_telegram_alternateText\", \"Вы уже зарегистрированы на нашем сервисе. Ожидайте сообщений.\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "77385937-228d-46f4-858c-d873c7e9a157",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_telegram_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_telegram_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_telegram_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_telegram_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_telegram_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_telegram_alternateText\"))",
									"    ",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"telegram_channelID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_telegram_token}}\",\n    \"greetingText\": \"{{channel_telegram_greetingText}}\",\n    \"buttonText\": \"{{channel_telegram_buttonText}}\",\n    \"answerText\": \"{{channel_telegram_answerText}}\",\n    \"alternateText\": \"{{channel_telegram_alternateText}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "TG005_Создание Telegram канала: ERROR duplicate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6776c586-fb8f-4148-b90b-4211837e1a3f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4bbe28d6-b044-4783-afd7-cbf01a1eecbb",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"unique\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_telegram_token}}\",\n    \"greetingText\": \"{{channel_telegram_greetingText}}\",\n    \"buttonText\": \"{{channel_telegram_buttonText}}\",\n    \"answerText\": \"{{channel_telegram_answerText}}\",\n    \"alternateText\": \"{{channel_telegram_alternateText}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "TG006_Информация о Telegram канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62fbb632-23cb-4914-aa1e-18d5cbaa29bc",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_telegram_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"telegram_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_telegram_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_telegram_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_telegram_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_telegram_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_telegram_alternateText\"))",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG007_Отправка сообщения через Telegram канал: ERROR",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8f10be4-6aea-454a-8bff-95a1f914be45",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+79161145827\");",
									"pm.environment.set(\"sendData\", \"bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "978f87e9-5bf6-40b8-b155-19029715a240",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 500);",
									"    pm.expect(pm.response).to.have.property('status', 'Internal Server Error');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Internal server error\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"ERROR\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"telegram_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"        pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{telegram_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG008_Измененение Telegram канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b0cc5dcb-cd5a-4984-ac4a-ca03e0c8eb60",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG009_Изменение Telegram канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "388c3ec7-6eb0-4edd-bd9a-29ed842b3eac",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83dd27fc-8aca-4f7c-abb0-c59547249937",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"alternateText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"answerText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"buttonText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"greetingText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG010_Изменение Telegram канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b625391-3d5d-47ea-9af7-b00cca5714f1",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049f354e-8608-470a-8b2f-c1fd456db1ae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": 1,\n    \"greetingText\": 1,\n    \"buttonText\": 1,\n    \"answerText\": 1,\n    \"alternateText\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG011_Изменение Telegram канала: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28e31f4d-dfe6-4cd9-a445-bfb171a89207",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23cac3fd-0bfa-4bb0-a297-0b2cae3379ef",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"1\",\n    \"greetingText\": \"1\",\n    \"buttonText\": \"1\",\n    \"answerText\": \"1\",\n    \"alternateText\": \"1\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG012_Изменение Telegram канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0863a668-2fc2-4408-a239-c576715e95bb",
								"exec": [
									"pm.environment.set(\"channelType\", \"telegram\");",
									"pm.environment.set(\"channel_telegram_token\", \"576573850:AAF1G6fSo5eZfRTrEKUs3ab4BSbeuse1em8\");",
									"pm.environment.set(\"channel_telegram_greetingText\", \"Для получения увеномлений от нас, сообщите пожалуйста Ваш номер телефона\");",
									"pm.environment.set(\"channel_telegram_buttonText\", \"Передать контактные данные!\");",
									"pm.environment.set(\"channel_telegram_answerText\", \"Ваши данные сохранены\");",
									"pm.environment.set(\"channel_telegram_alternateText\", \"Вы уже зарегистрированы на нашем сервисе. Ожидайте сообщений!\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0769fa97-1158-4879-92fc-ac7421da0871",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_telegram_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"telegram_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_telegram_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_telegram_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_telegram_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_telegram_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_telegram_alternateText\"))",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_telegram_token}}\",\n    \"greetingText\": \"{{channel_telegram_greetingText}}\",\n    \"buttonText\": \"{{channel_telegram_buttonText}}\",\n    \"answerText\": \"{{channel_telegram_answerText}}\",\n    \"alternateText\": \"{{channel_telegram_alternateText}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "TG013_Информация о Telegram канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e84c5ee-61b3-4c13-8895-65965fd73758",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_telegram_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"telegram_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_telegram_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_telegram_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_telegram_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_telegram_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_telegram_alternateText\"))",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG014_Коллекция каналов",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b3a2152-8d6a-4a84-8b31-c4dc7ab51527",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"telegram_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_telegram_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"telegram_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(jsonData.data[item]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"token\", pm.environment.get(\"channel_telegram_token\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"greetingText\", pm.environment.get(\"channel_telegram_greetingText\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"buttonText\", pm.environment.get(\"channel_telegram_buttonText\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"answerText\", pm.environment.get(\"channel_telegram_answerText\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"alternateText\", pm.environment.get(\"channel_telegram_alternateText\"))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Коллекция каналов: SUCCESS",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://test.maximus.lan/mailer/develop/channels",
									"protocol": "https",
									"host": [
										"test",
										"maximus",
										"lan"
									],
									"path": [
										"mailer",
										"develop",
										"channels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n            \"type\": \"email\",\n            \"server\": \"mail.google.com\",\n            \"port\": 465,\n            \"tls\": true,\n            \"from\": \"Иванов Иван\",\n            \"login\": \"ivanov@gmail.com\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "TG015_Отправка сообщения через Telegram канал: ERROR contact not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bf07399-d111-461e-a076-c48abda0fd63",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+7916114582\");",
									"pm.environment.set(\"sendData\", \"bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f5f5611-132a-4b2e-b825-5c2039de4d25",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"user\", \"not_found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{telegram_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG016_Отправка сообщения через Telegram канал: ERROR attribute format validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bf07399-d111-461e-a076-c48abda0fd63",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"7916114582\");",
									"pm.environment.set(\"sendData\", \"bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f5f5611-132a-4b2e-b825-5c2039de4d25",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"destination\", \"format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{telegram_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG017_Отправка сообщения через Telegram канал: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f8f10be4-6aea-454a-8bff-95a1f914be45",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+79161145827\");",
									"pm.environment.set(\"sendData\", \"bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "978f87e9-5bf6-40b8-b155-19029715a240",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"telegram_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"        pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"telegram_messageID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{telegram_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG018_Информация о сообщении Telegram канала: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4053175b-7abf-48af-ba83-19ee182ace20",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"telegram_messageID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"telegram_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages/{{telegram_messageID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages",
								"{{telegram_messageID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TG019_Коллекция сообщений: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f857dd8-09e0-4804-91ca-604c90476c5c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"telegram_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"telegram_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(jsonData.data[item]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[item]).to.have.property(\"channelID\", pm.environment.get(\"telegram_channelID\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05_Viber",
			"item": [
				{
					"name": "VB001_Создание Viber канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "26099a88-a414-4e30-be11-37f64654b24a",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB002_Создание Viber канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "afee0106-034c-4915-9373-d79f6f21c5f0",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab648703-20e7-4ab6-9cf0-f92c2575b8ba",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"alternateText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"answerText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"buttonText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"greetingText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"botAvatar\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"botName\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB003_Создание Viber канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d14958e-9a53-4a7d-ab8a-13bcfab52e0f",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049f354e-8608-470a-8b2f-c1fd456db1ae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": 1,\n    \"greetingText\": 1,\n    \"buttonText\": 1,\n    \"answerText\": 1,\n    \"alternateText\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB004_Создание Viber канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2b18cb78-831c-42ca-9269-ea8af86c9862",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");",
									"pm.environment.set(\"channel_viber_token\", \"4808946e65e7d43e-8faf354568dd9337-fc196e65696b6f0c\");",
									"pm.environment.set(\"channel_viber_botAvatar\", \"https://www.epay.com/en/templates/Epay.en/assets/images/avatar.jpg\");",
									"pm.environment.set(\"channel_viber_botName\", \"NephroBot\");",
									"pm.environment.set(\"channel_viber_greetingText\", \"Для получения увеномлений от нас, сообщите пожалуйста Ваш номер телефона\");",
									"pm.environment.set(\"channel_viber_buttonText\", \"Передать контактные данные\");",
									"pm.environment.set(\"channel_viber_answerText\", \"Ваши данные сохранены\");",
									"pm.environment.set(\"channel_viber_alternateText\", \"Вы уже зарегистрированы на нашем сервисе. Ожидайте сообщений.\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "561f7947-0993-4c1e-8245-c4f1f1444395",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_viber_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_viber_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botName\", pm.environment.get(\"channel_viber_botName\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botAvatar\", pm.environment.get(\"channel_viber_botAvatar\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_viber_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_viber_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_viber_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_viber_alternateText\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"viber_channelID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_viber_token}}\",\n    \"botName\": \"{{channel_viber_botName}}\",\n    \"botAvatar\": \"{{channel_viber_botAvatar}}\",\n    \"greetingText\": \"{{channel_viber_greetingText}}\",\n    \"buttonText\": \"{{channel_viber_buttonText}}\",\n    \"answerText\": \"{{channel_viber_answerText}}\",\n    \"alternateText\": \"{{channel_viber_alternateText}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "VB005_Создание Viber канала: ERROR duplicate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9be1f0b9-6b06-4bbe-94cb-cc961aad97ea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4e4f0a37-e603-41be-9bcf-f1d606b0139e",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"unique\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_viber_token}}\",\n    \"botName\": \"{{channel_viber_botName}}\",\n    \"botAvatar\": \"{{channel_viber_botAvatar}}\",\n    \"greetingText\": \"{{channel_viber_greetingText}}\",\n    \"buttonText\": \"{{channel_viber_buttonText}}\",\n    \"answerText\": \"{{channel_viber_answerText}}\",\n    \"alternateText\": \"{{channel_viber_alternateText}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "VB006_Информация о Viber канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c1d5985-06ab-4dc5-b212-c11a78eaf68a",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_viber_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"viber_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_viber_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botName\", pm.environment.get(\"channel_viber_botName\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botAvatar\", pm.environment.get(\"channel_viber_botAvatar\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_viber_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_viber_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_viber_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_viber_alternateText\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{viber_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{viber_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB007_Измененение Viber канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "98e0c60b-b10d-443b-9f07-e31cb18cbd0d",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{viber_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{viber_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB008_Изменение Viber канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbae6ca3-644d-4c67-b1c2-03a00cdce07e",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "82d63042-1738-4a94-afbe-6b052127e52f",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"alternateText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"answerText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"buttonText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"greetingText\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"botAvatar\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"botName\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB009_Изменение Viber канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b71877cf-4718-49eb-ba50-b802bb7ea5b5",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049f354e-8608-470a-8b2f-c1fd456db1ae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": 1,\n    \"greetingText\": 1,\n    \"buttonText\": 1,\n    \"answerText\": 1,\n    \"alternateText\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB010_Изменение Viber канала: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28e31f4d-dfe6-4cd9-a445-bfb171a89207",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23cac3fd-0bfa-4bb0-a297-0b2cae3379ef",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"1\",\n    \"greetingText\": \"1\",\n    \"buttonText\": \"1\",\n    \"answerText\": \"1\",\n    \"alternateText\": \"1\",\n    \"botAvatar\": \"1\",\n    \"botName\": \"1\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB011_Изменение Viber канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "acb916a4-96af-4261-a983-48374a016768",
								"exec": [
									"pm.environment.set(\"channelType\", \"viber\");",
									"pm.environment.set(\"channel_viber_token\", \"4812faf92027d48b-189c192906c34006-353784dfa9ca4edb\");",
									"pm.environment.set(\"channel_viber_botAvatar\", \"https://www.epay.com/en/templates/Epay.en/assets/images/avatar.jpg\");",
									"pm.environment.set(\"channel_viber_botName\", \"NewNephroBot\");",
									"pm.environment.set(\"channel_viber_greetingText\", \"Для получения увеномлений от нас, сообщите пожалуйста Ваш номер телефона\");",
									"pm.environment.set(\"channel_viber_buttonText\", \"Передать контактные данные\");",
									"pm.environment.set(\"channel_viber_answerText\", \"Ваши данные сохранены\");",
									"pm.environment.set(\"channel_viber_alternateText\", \"Вы уже зарегистрированы на нашем сервисе. Ожидайте сообщений.\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54a7f602-81fa-4dca-88fd-0f111d279cb8",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_viber_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"viber_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_viber_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botName\", pm.environment.get(\"channel_viber_botName\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botAvatar\", pm.environment.get(\"channel_viber_botAvatar\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_viber_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_viber_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_viber_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_viber_alternateText\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_viber_token}}\",\n    \"botName\": \"{{channel_viber_botName}}\",\n    \"botAvatar\": \"{{channel_viber_botAvatar}}\",\n    \"greetingText\": \"{{channel_viber_greetingText}}\",\n    \"buttonText\": \"{{channel_viber_buttonText}}\",\n    \"answerText\": \"{{channel_viber_answerText}}\",\n    \"alternateText\": \"{{channel_viber_alternateText}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{viber_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{viber_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "VB012_Информация о Viber канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f53b2444-c61b-4cbd-bc87-42847e28bd43",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_viber_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"viber_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_viber_token\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botName\", pm.environment.get(\"channel_viber_botName\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"botAvatar\", pm.environment.get(\"channel_viber_botAvatar\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"greetingText\", pm.environment.get(\"channel_viber_greetingText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"buttonText\", pm.environment.get(\"channel_viber_buttonText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"answerText\", pm.environment.get(\"channel_viber_answerText\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"alternateText\", pm.environment.get(\"channel_viber_alternateText\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{viber_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{viber_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB013_Коллекция каналов",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b3a2152-8d6a-4a84-8b31-c4dc7ab51527",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"viber_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_viber_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"viber_channelID\")})",
									"        pm.expect(item).to.not.equal(-1);",
									"        pm.expect(jsonData.data[item]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"token\", pm.environment.get(\"channel_viber_token\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"botName\", pm.environment.get(\"channel_viber_botName\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"botAvatar\", pm.environment.get(\"channel_viber_botAvatar\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"greetingText\", pm.environment.get(\"channel_viber_greetingText\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"buttonText\", pm.environment.get(\"channel_viber_buttonText\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"answerText\", pm.environment.get(\"channel_viber_answerText\"));",
									"        pm.expect(jsonData.data[item]).to.have.property(\"alternateText\", pm.environment.get(\"channel_viber_alternateText\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Коллекция каналов: SUCCESS",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://test.maximus.lan/mailer/develop/channels",
									"protocol": "https",
									"host": [
										"test",
										"maximus",
										"lan"
									],
									"path": [
										"mailer",
										"develop",
										"channels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n            \"type\": \"email\",\n            \"server\": \"mail.google.com\",\n            \"port\": 465,\n            \"tls\": true,\n            \"from\": \"Иванов Иван\",\n            \"login\": \"ivanov@gmail.com\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "VB014_Отправка сообщения через Viber канал: ERROR contact not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bf07399-d111-461e-a076-c48abda0fd63",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"+7916114582\");",
									"pm.environment.set(\"sendData\", \"bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7712c903-0be7-407d-a95b-459abddd31fa",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"user\", \"not_found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{viber_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "VB015_Отправка сообщения через Viber канал: ERROR attribute format validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bf07399-d111-461e-a076-c48abda0fd63",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"7916114582\");",
									"pm.environment.set(\"sendData\", \"bla\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8f5f5611-132a-4b2e-b825-5c2039de4d25",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"destination\", \"format\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{viber_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05_Slack",
			"item": [
				{
					"name": "SL001_Создание Slack канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "53f5c972-8414-4259-ba84-11b90a0bfe59",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL002_Создание Slack канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4edde82c-abbe-4ef3-8625-d6600d5869b3",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a21490f3-dccf-40a4-a9a9-09b8fc535141",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"name\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL003_Создание Slack канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7056fdaf-7b93-4401-a474-7045d33b642a",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049f354e-8608-470a-8b2f-c1fd456db1ae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": 1,\n    \"name\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL004_Создание Slack канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "725c4865-d150-4f25-9f6a-b1330afcf035",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");",
									"pm.environment.set(\"channel_slack_token\", \"xoxp-89165582503-91428058226-349753181681-bf6d33aaacd2882ee4771e0702238eb7\");",
									"pm.environment.set(\"channel_slack_name\", \"Sample Bot\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "01181965-37a8-4ec6-8c1a-8893c44a1405",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_slack_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_slack_token\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"slack_channelID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_slack_token}}\",\n    \"name\": \"{{channel_slack_name}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "SL005_Информация о Slack канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f820dbd-a347-482d-a252-a31ec987b58c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_slack_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"slack_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_slack_token\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{slack_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{slack_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL006_Измененение Slack канала: ERROR Invalid method",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f2fd5881-5f7d-4ac5-a372-54a11c541e1a",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ff59c3c-2775-4e13-9523-046ae990a4fd",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 405);",
									"    pm.expect(pm.response).to.have.property('status', 'Method Not Allowed');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Method COPY not allowed\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "COPY",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{skack_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{skack_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL007_Изменение Slack канала: ERROR attribute require validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4edde82c-abbe-4ef3-8625-d6600d5869b3",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a21490f3-dccf-40a4-a9a9-09b8fc535141",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function() {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"    pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {    ",
									"    pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function() {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"name\", \"required\");",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"required\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{slack_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{slack_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL008_Изменение Slack канала: ERROR schema validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7056fdaf-7b93-4401-a474-7045d33b642a",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "049f354e-8608-470a-8b2f-c1fd456db1ae",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"token\", \"string\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": 1,\n    \"name\": 1\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{slack_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{slack_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL009_Изменение Slack канала: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28e31f4d-dfe6-4cd9-a445-bfb171a89207",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23cac3fd-0bfa-4bb0-a297-0b2cae3379ef",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"1\",\n    \"name\": \"1\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL010_Изменение Slack канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "89fb4dd5-d7f6-4e4d-8bbf-f260ee06001a",
								"exec": [
									"pm.environment.set(\"channelType\", \"slack\");",
									"pm.environment.set(\"channel_slack_token\", \"xoxp-89165582503-91428058226-349753181681-bf6d33aaacd2882ee4771e0702238eb7\");",
									"pm.environment.set(\"channel_slack_name\", \"New Sample Bot\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "237d252e-d7a9-4181-9212-a83a8ad52e3e",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_slack_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"slack_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_slack_token\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"token\": \"{{channel_slack_token}}\",\n    \"name\": \"{{channel_slack_name}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{channelType}}/{{slack_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{channelType}}",
								"{{slack_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_mts_sms_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "x-api-key",
										"value": "{{mockApiKey}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_2_Server}}\",\n    \"port\": {{channel_2_Port}},\n    \"login\": \"{{channel_2_Login}}\",\n    \"password\": \"{{channel_2_Password}}\",\n    \"modemID\": \"{{channel_2_ModemID}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/mts_sms?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"mts_sms"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "",
									"name": "Access-Control-Allow-Credentials",
									"description": "Indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials."
								},
								{
									"key": "Access-Control-Allow-Headers",
									"value": "",
									"name": "Access-Control-Allow-Headers",
									"description": "Used in response to a preflight request to indicate which HTTP headers can be used when making the actual request."
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "",
									"name": "Access-Control-Allow-Methods",
									"description": "Specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request."
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": "Specifies a URI that may access the resource. For requests without credentials, the server may specify '*' as a wildcard, thereby allowing any origin to access the resource."
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "",
									"name": "Access-Control-Expose-Headers",
									"description": "Lets a server whitelist headers that browsers are allowed to access."
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": "The type of encoding used on the data."
								},
								{
									"key": "Content-Length",
									"value": "270",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 18 Apr 2018 10:42:17 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "ETag",
									"value": "W/\"19f-aGHMzhsE1zLdlZA2jPKOsA\"",
									"name": "ETag",
									"description": "An identifier for a specific version of a resource, often a message digest"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "60",
									"name": "X-RateLimit-Limit",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "58",
									"name": "X-RateLimit-Remaining",
									"description": "Custom header"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1524048180",
									"name": "X-RateLimit-Reset",
									"description": "Custom header"
								}
							],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"e2fc1dec-4946-48d2-a14f-a302980e67d7\",\n            \"type\": \"mts_sms\",\n            \"from\": \"Иванов Иван\",\n            \"login\": \"79852179550\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "SL011_Информация о Slack канале: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92c4934b-0f5d-459f-af3f-e2c4e49411c9",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Channel schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"});",
									"",
									"",
									"pm.test('Channel 1 type schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0],  glFn.getEnvSchema(\"channel_slack_Schema\"))).to.be.true;",
									"",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"slack_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"token\", pm.environment.get(\"channel_slack_token\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels/{{slack_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{slack_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL012_Коллекция каналов",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b3a2152-8d6a-4a84-8b31-c4dc7ab51527",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"slack_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_Schema\"))).to.be.true;",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"channel_slack_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"slack_channelID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(jsonData.data[item]).to.have.property(\"type\", pm.environment.get(\"channelType\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"token\", pm.environment.get(\"channel_slack_token\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/channels?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "Коллекция каналов: SUCCESS",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://test.maximus.lan/mailer/develop/channels",
									"protocol": "https",
									"host": [
										"test",
										"maximus",
										"lan"
									],
									"path": [
										"mailer",
										"develop",
										"channels"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": "{\n    \"version\": \"develop\",\n    \"status\": {\n        \"code\": 200,\n        \"message\": \"Success\"\n    },\n    \"errors\": null,\n    \"data\": [\n        {\n            \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n            \"type\": \"email\",\n            \"server\": \"mail.google.com\",\n            \"port\": 465,\n            \"tls\": true,\n            \"from\": \"Иванов Иван\",\n            \"login\": \"ivanov@gmail.com\",\n            \"password\": \"xxxxxx\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "SL013_Отправка сообщения через Slack канал: ERROR channel not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f314c386-3f5b-4247-bc04-84163d4a04d4",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"maximus-platform2\");",
									"pm.environment.set(\"sendData\", \"Mailer auto_test_challenge\");",
									"pm.environment.set(\"metaDestType\", \"channel\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35a96a2c-9966-4b82-99d2-b63b63e202c4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"channel\", \"not_found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{slack_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\",\n  \"meta\": {\n    \"slackDestType\": \"{{metaDestType}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL014_Отправка сообщения через Slack канал: ERROR user not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b005c16b-53a1-44af-9f77-6d51eaa5c3f5",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"maximus-platform2\");",
									"pm.environment.set(\"sendData\", \"Mailer auto_test_challenge\");",
									"pm.environment.set(\"metaDestType\", \"user\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "311277a8-923c-4576-9e0f-bdbfc76a93a6",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 400);",
									"    pm.expect(pm.response).to.have.property('status', 'Bad Request');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Error schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.errors, glFn.getEnvSchema(\"errorSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Validation error\");",
									"});",
									"",
									"pm.test(\"Validation data is correct\", function () {",
									"    pm.expect(jsonData.errors.validation).to.have.property(\"user\", \"not_found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{slack_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\",\n  \"meta\": {\n    \"slackDestType\": \"{{metaDestType}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL015_Отправка сообщения через Slack канал: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7cd562b-ef59-4224-b656-8b69b15e6078",
								"exec": [
									"pm.environment.set(\"sendDestination\", \"maximus-platform\");",
									"pm.environment.set(\"sendData\", \"Mailer auto_test_challenge\");",
									"pm.environment.set(\"metaDestType\", \"channel\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fadfecdb-f4ff-41d7-9e86-595b0fe7e146",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"slack_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"    pm.expect(jsonData.data[0].meta).to.have.property(\"slackDestType\", pm.environment.get(\"metaDestType\"));",
									"});",
									"",
									"if (pm.expect(pm.response).to.have.property('code', 200)) {",
									" pm.environment.set(\"slack_messageID\", jsonData.data[0].ID);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"channelID\": \"{{slack_channelID}}\",\n  \"destination\": \"{{sendDestination}}\",\n  \"data\": \"{{sendData}}\",\n  \"meta\": {\n  \t\"slackDestType\": \"{{metaDestType}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/send?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"send"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL016_Информация о сообщении Slack канала: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c885eb0-211a-4754-9bbb-026cdbd6ac74",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Message schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData.data[0], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test(\"Entity data is correct\", function () {",
									"    pm.expect(jsonData.data[0]).to.have.property(\"ID\", pm.environment.get(\"slack_messageID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[0]).to.have.property(\"channelID\", pm.environment.get(\"slack_channelID\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[0]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"    pm.expect(jsonData.data[0].meta).to.have.property(\"slackDestType\", pm.environment.get(\"metaDestType\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages/{{slack_messageID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages",
								"{{slack_messageID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SL017_Коллекция сообщений: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f857dd8-09e0-4804-91ca-604c90476c5c",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"slack_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(tv4.validate(jsonData.data[item], glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Entity data is valid', function() {",
									"    item=_.findIndex(jsonData.data, {\"ID\":  pm.environment.get(\"slack_messageID\")})",
									"    pm.expect(item).to.not.equal(-1);",
									"    pm.expect(jsonData.data[item]).to.have.property(\"status\", \"SENT\");",
									"    pm.expect(jsonData.data[item]).to.have.property(\"channelID\", pm.environment.get(\"slack_channelID\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"destination\", pm.environment.get(\"sendDestination\"));",
									"    pm.expect(jsonData.data[item]).to.have.property(\"data\", pm.environment.get(\"sendData\"));",
									"    pm.expect(jsonData.data[item].meta).to.have.property(\"slackDestType\", pm.environment.get(\"metaDestType\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "06_collection",
			"item": [
				{
					"name": "CL001_Коллекция сообщений: SUCCESS",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CL002_Коллекция сообщений: SUCCESS limit filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}&limit=1",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CL003_Коллекция сообщений: SUCCESS offset filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}&limit=1&offset=1",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								},
								{
									"key": "limit",
									"value": "1"
								},
								{
									"key": "offset",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CL004_Коллекция сообщений: SUCCESS channelID filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}&channelID={{mail_channelID}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								},
								{
									"key": "channelID",
									"value": "{{mail_channelID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CL005_Коллекция сообщений: SUCCESS   error status filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}&status=ERROR",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								},
								{
									"key": "status",
									"value": "ERROR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CL006_Коллекция сообщений: SUCCESS  sent status filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}&status=SENT",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								},
								{
									"key": "status",
									"value": "SENT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CL007_Коллекция сообщений: SUCCESS  destination filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}&destination=%2B79161145827",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								},
								{
									"key": "destination",
									"value": "%2B79161145827"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "CL008_Коллекция сообщений: SUCCESS  complex filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34aa8a4a-33b9-4232-9507-26e90d344ac2",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});",
									"",
									"pm.test('Entity schema is valid', function() {",
									"_.each(pm.response.json().data, (item) => {",
									"        pm.expect(tv4.validate(item, glFn.getEnvSchema(\"message_Schema\"))).to.be.true;",
									"    })",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{mailerHost}}/messages?accessToken={{accessToken}}&destination=%2B79161145827&status=SENT&channelID={{telegram_channelID}}&limit=1",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"messages"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								},
								{
									"key": "destination",
									"value": "%2B79161145827"
								},
								{
									"key": "status",
									"value": "SENT"
								},
								{
									"key": "channelID",
									"value": "{{telegram_channelID}}"
								},
								{
									"key": "limit",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for send"
		},
		{
			"name": "07_cleanup",
			"item": [
				{
					"name": "DL001_Удаление канала: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "661df8b8-e7a3-4468-808d-05c37834e0dd",
								"exec": [
									"var uuid = require(\"uuid\");",
									"pm.environment.set(\"randomID\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ce85f0e-2c19-4d65-89bf-3a942fb54101",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"{{channel_email_Server}}\",\n    \"port\": {{channel_email_Port}},\n    \"tls\": {{channel_email_Encryption}},\n    \"from\": \"{{channel_email_From}}\",\n    \"login\": \"{{channel_email_Login}}\",\n    \"password\": \"{{channel_email_Password}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{randomID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL002_Удаление Mail канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "493f335e-ca64-4589-8280-031a95021ef8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f477db61-2190-45f6-9a70-ac26e9d1b7b5",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{mail_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{mail_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL003_Удаление Local_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "61bb45c8-1c49-4d73-a59b-e52f4a2f416c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f587c827-b8ee-471a-b493-709a4ba96c9d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{local_SMS_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{local_SMS_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL004_Удаление MTS_SMS канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "591a1893-763f-4de0-a8b1-8490ee534ed3",
								"exec": [
									"pm.environment.set(\"channelType\", \"email\");",
									"pm.environment.set(\"channel_email_Server\", \"mail.google.com\");",
									"pm.environment.set(\"channel_email_Port\", \"465\");",
									"pm.environment.set(\"channel_email_Encryption\", \"true\");",
									"pm.environment.set(\"channel_email_From\", \"Иванов Иван\");",
									"pm.environment.set(\"channel_email_Login\", \"ivanov@gmail.com\");",
									"pm.environment.set(\"channel_email_Password\", \"xxxxxx\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f587c827-b8ee-471a-b493-709a4ba96c9d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{mts_sms_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{mts_sms_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL005_Удаление Telegram канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d9f4989-8238-4877-b853-eee42a17d21e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f587c827-b8ee-471a-b493-709a4ba96c9d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{telegram_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{telegram_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL006_Удаление Viber канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d9f4989-8238-4877-b853-eee42a17d21e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a4bfa1f9-11b0-4f9d-9f1b-5e0c40770641",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{viber_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{viber_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL007_Удаление Slack канала: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7d9f4989-8238-4877-b853-eee42a17d21e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f587c827-b8ee-471a-b493-709a4ba96c9d",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mailerHost}}/channels/{{slack_channelID}}?accessToken={{accessToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"channels",
								"{{slack_channelID}}"
							],
							"query": [
								{
									"key": "accessToken",
									"value": "{{accessToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL008_Удаление токена: ERROR not found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "661df8b8-e7a3-4468-808d-05c37834e0dd",
								"exec": [
									"var uuid = require(\"uuid\");",
									"pm.environment.set(\"randomID\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "232ea11b-8c5b-42c5-8d23-715a6851898e",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 404);",
									"    pm.expect(pm.response).to.have.property('status', 'Not Found');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"Entity not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{mockApiKey}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"server\": \"{{channel_email_Server}}\",\n    \"port\": {{channel_email_Port}},\n    \"tls\": {{channel_email_Encryption}},\n    \"from\": \"{{channel_email_From}}\",\n    \"login\": \"{{channel_email_Login}}\",\n    \"password\": \"{{channel_email_Password}}\"\n}"
						},
						"url": {
							"raw": "{{mailerHost}}/tokens/{{randomID}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{randomID}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": [
						{
							"name": "channels_email_200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": {{channelType}},\n  \"params\": {\n    \"server\": \"{{channel_1_Host}}\",\n    \"port\": {{channel_1_Port}},\n    \"tls\": {{channel_1_Encryption}},\n    \"from\": \"{{channel_1_From}}\",\n    \"login\": \"{{channel_1_Login}}\",\n    \"password\": \"{{channel_1_Password}}\"\n  }\n}"
								},
								"url": {
									"raw": "{{mailerHost}}/channels/email?accessToken={{accessToken}}",
									"host": [
										"{{mailerHost}}"
									],
									"path": [
										"channels",
										"email"
									],
									"query": [
										{
											"key": "accessToken",
											"value": "{{accessToken}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "204",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Tue, 17 Apr 2018 16:40:14 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=63072000; includeSubdomains",
									"name": "Strict-Transport-Security",
									"description": "A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains."
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff",
									"name": "X-Content-Type-Options",
									"description": "The only defined value, \"nosniff\", prevents Internet Explorer from MIME-sniffing a response away from the declared content-type"
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": "Clickjacking protection: \"deny\" - no rendering within a frame, \"sameorigin\" - no rendering if origin mismatch"
								}
							],
							"cookie": [],
							"body": "{\n  \"version\": \"develop\",\n  \"status\": {\n    \"code\": 200,\n    \"message\": \"Success\"\n  },\n  \"errors\": null,\n  \"data\": [{\n    \"ID\": \"d00962f4-d052-4fb4-99d6-91b56208e72f\",\n    \"type\": \"email\",\n    \"server\": \"mail.google.com\",\n    \"port\": 465,\n    \"tls\": true,\n    \"from\": \"Иванов Иван\",\n    \"login\": \"ivanov@gmail.com\",\n    \"password\": \"xxxxxx\"\n  }]\n}"
						}
					]
				},
				{
					"name": "DL009_Удаление токена: SUCCESS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c380e36d-4910-4f45-9f82-8f6b88d74439",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9e02830-f894-4107-a1c2-4693cbfcddb4",
								"exec": [
									"var jsonData = JSON.parse(responseBody)",
									"",
									"pm.test(\"Success response is correct\", function () {",
									"    pm.expect(pm.response).to.have.property('code', 200);",
									"    pm.expect(pm.response).to.have.property('status', 'OK');",
									"    pm.expect(pm.response).to.have.header('Content-type', 'application/json');",
									"});",
									"",
									"pm.test('Base schema is valid', function() {",
									"  pm.expect(tv4.validate(jsonData, glFn.getEnvSchema(\"baseSchema\"))).to.be.true;",
									"});",
									"",
									"pm.test('Message data is valid', function() {",
									"  pm.expect(jsonData).to.have.property(\"message\", \"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mailerHost}}/tokens/{{accessToken}}?masterToken={{masterToken}}",
							"host": [
								"{{mailerHost}}"
							],
							"path": [
								"tokens",
								"{{accessToken}}"
							],
							"query": [
								{
									"key": "masterToken",
									"value": "{{masterToken}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Folder for send"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "fe46ee1b-55cf-40cb-9f4e-6dad5fbc76bc",
				"type": "text/javascript",
				"exec": [
					"var uuid = require('uuid');",
					"pm.environment.set('randomGUID', uuid.v4());",
					"",
					"glFn = {",
					"    getEnvSchema: function(name) {",
					"        return JSON.parse(pm.variables.get(name));",
					"}",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "05c6a614-21ac-430e-a544-559f3bb89c6a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "97fd2fc7-7ef9-4fa7-8e3f-370475f48444",
			"key": "baseSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"version\":{\"type\":\"string\"},\"message\":{\"type\":\"string\"},\"errors\":{\"type\":[\"object\",\"null\"]},\"data\":{\"type\":[\"array\",\"null\"]}},\"required\":[\"version\",\"message\",\"errors\",\"data\"]}",
			"type": "string"
		},
		{
			"id": "44e288a9-2d7d-40ef-b930-ec2b9cd235e7",
			"key": "tokenSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"description\":{\"type\":\"string\"}},\"required\":[\"ID\",\"description\"]}",
			"type": "string"
		},
		{
			"id": "9fcf6bb9-c079-4350-b78a-d73bd4bfafc7",
			"key": "channel_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"type\":{\"type\":\"string\",\"enum\":[\"email\",\"local_sms\",\"mts_sms\",\"telegram\",\"slack\",\"viber\"]}},\"required\":[\"ID\",\"type\"]}",
			"type": "string"
		},
		{
			"id": "5b4c1d33-f7ca-4ac7-8a4a-5fc4354d82c3",
			"key": "channel_email_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"server\":{\"type\":\"string\"},\"port\":{\"type\":\"integer\"},\"ssl\":{\"type\":\"boolean\"},\"from\":{\"type\":\"string\"},\"login\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"},\"contentType\":{\"type\":\"string\"}},\"required\":[\"server\",\"port\",\"ssl\",\"from\",\"login\",\"password\",\"contentType\"]}",
			"type": "string"
		},
		{
			"id": "0c9bdac7-1775-4f02-b9ce-3812c089ffb2",
			"key": "channel_local_sms_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"server\":{\"type\":\"string\"},\"port\":{\"type\":\"integer\"},\"login\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"},\"modemID\":{\"type\":\"integer\"}},\"required\":[\"server\",\"port\",\"login\",\"password\",\"modemID\"]}",
			"type": "string"
		},
		{
			"id": "60c011b4-29d8-4040-8745-a18c9f27ba0a",
			"key": "channel_mts_sms_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"from\":{\"type\":[\"string\",\"null\"]},\"login\":{\"type\":\"string\"},\"password\":{\"type\":\"string\"}},\"required\":[\"from\",\"login\",\"password\"]}",
			"type": "string"
		},
		{
			"id": "b80dc3e3-6f24-4f8a-8bb5-29db29022ae6",
			"key": "channel_telegram_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"token\":{\"type\":\"string\"},\"greetingText\":{\"type\":\"string\"},\"answerText\":{\"type\":\"string\"},\"alternateText\":{\"type\":\"string\"}},\"required\":[\"token\",\"greetingText\",\"answerText\",\"alternateText\"]}",
			"type": "string"
		},
		{
			"id": "ebb155dd-b088-4734-9f86-cab8bfc8c275",
			"key": "channel_viber_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"token\":{\"type\":\"string\"},\"greetingText\":{\"type\":\"string\"},\"answerText\":{\"type\":\"string\"},\"alternateText\":{\"type\":\"string\"},\"botAvatar\":{\"type\":\"string\"},\"botName\":{\"type\":\"string\"}},\"required\":[\"token\",\"greetingText\",\"answerText\",\"alternateText\",\"botAvatar\",\"botName\"]}",
			"type": "string"
		},
		{
			"id": "0ae210c4-b971-45bf-83d5-2fba6f657ff1",
			"key": "channel_slack_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"}},\"required\":[\"name\",\"token\"]}",
			"type": "string"
		},
		{
			"id": "01a7188a-028a-4456-9938-d0ac5386adc1",
			"key": "message_Schema",
			"value": "{\"type\":\"object\",\"properties\":{\"ID\":{\"type\":\"string\"},\"created\":{\"type\":\"string\"},\"errors\":{\"type\":[\"string\",\"null\"]},\"status\":{\"type\":\"string\",\"enum\":[\"QUEUE\",\"SENT\",\"ERROR\"]},\"channelID\":{\"type\":\"string\"},\"data\":{\"type\":\"string\"},\"destination\":{\"type\":\"string\"}},\"required\":[\"ID\",\"created\",\"errors\",\"status\",\"channelID\",\"data\",\"destination\"]}",
			"type": "string"
		},
		{
			"id": "6f076856-1100-499b-95d7-18ecfd2b38a6",
			"key": "errorSchema",
			"value": "{\"type\":\"object\",\"properties\":{\"validation\":{\"type\":\"object\"}}}",
			"type": "string"
		}
	]
}