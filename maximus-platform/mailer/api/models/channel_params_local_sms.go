// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelParamsLocalSms Channel_params_local_sms
// swagger:model Channel_params_local_sms
type ChannelParamsLocalSms struct {

	// Имя базы данных
	// Required: true
	Db *string `json:"db"`

	// Лимит отпраки смс в месяц
	// Required: true
	Limit *int64 `json:"limit"`

	// Логин авторизации
	// Required: true
	Login *string `json:"login"`

	// Идентификатор модема
	// Required: true
	ModemID *int64 `json:"modemID"`

	// Пароль авторизации
	// Required: true
	Password *string `json:"password"`

	// Порт сервера
	// Required: true
	Port *int64 `json:"port"`

	// Адрес сервера
	// Required: true
	Server *string `json:"server"`
}

// Validate validates this channel params local sms
func (m *ChannelParamsLocalSms) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelParamsLocalSms) validateDb(formats strfmt.Registry) error {

	if err := validate.Required("db", "body", m.Db); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParamsLocalSms) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParamsLocalSms) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("login", "body", m.Login); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParamsLocalSms) validateModemID(formats strfmt.Registry) error {

	if err := validate.Required("modemID", "body", m.ModemID); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParamsLocalSms) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParamsLocalSms) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *ChannelParamsLocalSms) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelParamsLocalSms) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelParamsLocalSms) UnmarshalBinary(b []byte) error {
	var res ChannelParamsLocalSms
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
