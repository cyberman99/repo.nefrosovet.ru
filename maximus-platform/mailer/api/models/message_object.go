// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MessageObject Message_object
// swagger:model Message_object
type MessageObject struct {

	// Идентификатор канала
	// Required: true
	ChannelID *string `json:"channelID"`

	// Содержимое сообщения
	// Required: true
	Data *string `json:"data"`

	// Точка назначения получателя - email/phone
	// Required: true
	Destination *string `json:"destination"`

	// meta
	Meta *MessageObjectMeta `json:"meta,omitempty"`
}

// Validate validates this message object
func (m *MessageObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MessageObject) validateChannelID(formats strfmt.Registry) error {

	if err := validate.Required("channelID", "body", m.ChannelID); err != nil {
		return err
	}

	return nil
}

func (m *MessageObject) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data); err != nil {
		return err
	}

	return nil
}

func (m *MessageObject) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *MessageObject) validateMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.Meta) { // not required
		return nil
	}

	if m.Meta != nil {
		if err := m.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageObject) UnmarshalBinary(b []byte) error {
	var res MessageObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MessageObjectMeta Message_meta
//
// Мета информация сообщения
// swagger:model MessageObjectMeta
type MessageObjectMeta struct {

	// Имя отправителя письма в Email канале
	EmailFrom string `json:"emailFrom,omitempty"`

	// Тема письма в Email канале
	EmailSubject string `json:"emailSubject,omitempty"`

	// Тип адреса назначения в Slack канале
	// Enum: [user channel]
	SLACKDestType string `json:"slackDestType,omitempty"`
}

// Validate validates this message object meta
func (m *MessageObjectMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSLACKDestType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var messageObjectMetaTypeSLACKDestTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","channel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageObjectMetaTypeSLACKDestTypePropEnum = append(messageObjectMetaTypeSLACKDestTypePropEnum, v)
	}
}

const (

	// MessageObjectMetaSLACKDestTypeUser captures enum value "user"
	MessageObjectMetaSLACKDestTypeUser string = "user"

	// MessageObjectMetaSLACKDestTypeChannel captures enum value "channel"
	MessageObjectMetaSLACKDestTypeChannel string = "channel"
)

// prop value enum
func (m *MessageObjectMeta) validateSLACKDestTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, messageObjectMetaTypeSLACKDestTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MessageObjectMeta) validateSLACKDestType(formats strfmt.Registry) error {

	if swag.IsZero(m.SLACKDestType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSLACKDestTypeEnum("meta"+"."+"slackDestType", "body", m.SLACKDestType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MessageObjectMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MessageObjectMeta) UnmarshalBinary(b []byte) error {
	var res MessageObjectMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
