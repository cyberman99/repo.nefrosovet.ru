// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PostSendHandlerFunc turns a function with the right signature into a post send handler
type PostSendHandlerFunc func(PostSendParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSendHandlerFunc) Handle(params PostSendParams) middleware.Responder {
	return fn(params)
}

// PostSendHandler interface for that can handle valid post send params
type PostSendHandler interface {
	Handle(PostSendParams) middleware.Responder
}

// NewPostSend creates a new http.Handler for the post send operation
func NewPostSend(ctx *middleware.Context, handler PostSendHandler) *PostSend {
	return &PostSend{Context: ctx, Handler: handler}
}

/*PostSend swagger:route POST /send Messages postSend

Отправка сообщения

*/
type PostSend struct {
	Context *middleware.Context
	Handler PostSendHandler
}

func (o *PostSend) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostSendParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostSendBadRequestBody post send bad request body
// swagger:model PostSendBadRequestBody
type PostSendBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostSendBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostSendBadRequestBodyAO0
	var postSendBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postSendBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postSendBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostSendBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postSendBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postSendBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post send bad request body
func (o *PostSendBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostSendBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSendBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostSendBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostSendBody post send body
// swagger:model PostSendBody
type PostSendBody struct {
	models.MessageObject

	PostSendParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostSendBody) UnmarshalJSON(raw []byte) error {
	// PostSendParamsBodyAO0
	var postSendParamsBodyAO0 models.MessageObject
	if err := swag.ReadJSON(raw, &postSendParamsBodyAO0); err != nil {
		return err
	}
	o.MessageObject = postSendParamsBodyAO0

	// PostSendParamsBodyAO1
	var postSendParamsBodyAO1 PostSendParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &postSendParamsBodyAO1); err != nil {
		return err
	}
	o.PostSendParamsBodyAllOf1 = postSendParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostSendBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postSendParamsBodyAO0, err := swag.WriteJSON(o.MessageObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postSendParamsBodyAO0)

	postSendParamsBodyAO1, err := swag.WriteJSON(o.PostSendParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postSendParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post send body
func (o *PostSendBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.MessageObject
	if err := o.MessageObject.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostSendParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostSendBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSendBody) UnmarshalBinary(b []byte) error {
	var res PostSendBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostSendForbiddenBody post send forbidden body
// swagger:model PostSendForbiddenBody
type PostSendForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostSendForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PostSendForbiddenBodyAO0
	var postSendForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &postSendForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = postSendForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostSendForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postSendForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postSendForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post send forbidden body
func (o *PostSendForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostSendForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSendForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostSendForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostSendInternalServerErrorBody post send internal server error body
// swagger:model PostSendInternalServerErrorBody
type PostSendInternalServerErrorBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostSendInternalServerErrorBody) UnmarshalJSON(raw []byte) error {
	// PostSendInternalServerErrorBodyAO0
	var postSendInternalServerErrorBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postSendInternalServerErrorBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postSendInternalServerErrorBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostSendInternalServerErrorBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postSendInternalServerErrorBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postSendInternalServerErrorBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post send internal server error body
func (o *PostSendInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostSendInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSendInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostSendInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostSendMethodNotAllowedBody post send method not allowed body
// swagger:model PostSendMethodNotAllowedBody
type PostSendMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostSendMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostSendMethodNotAllowedBodyAO0
	var postSendMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postSendMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postSendMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostSendMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postSendMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postSendMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post send method not allowed body
func (o *PostSendMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostSendMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSendMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostSendMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostSendOKBody post send o k body
// swagger:model PostSendOKBody
type PostSendOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostSendOKBody) UnmarshalJSON(raw []byte) error {
	// PostSendOKBodyAO0
	var postSendOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postSendOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postSendOKBodyAO0

	// PostSendOKBodyAO1
	var dataPostSendOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostSendOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostSendOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostSendOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postSendOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postSendOKBodyAO0)

	var dataPostSendOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPostSendOKBodyAO1.Data = o.Data

	jsonDataPostSendOKBodyAO1, errPostSendOKBodyAO1 := swag.WriteJSON(dataPostSendOKBodyAO1)
	if errPostSendOKBodyAO1 != nil {
		return nil, errPostSendOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostSendOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post send o k body
func (o *PostSendOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostSendOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postSendOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostSendOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostSendOKBody) UnmarshalBinary(b []byte) error {
	var res PostSendOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostSendParamsBodyAllOf1 post send params body all of1
// swagger:model PostSendParamsBodyAllOf1
type PostSendParamsBodyAllOf1 interface{}
