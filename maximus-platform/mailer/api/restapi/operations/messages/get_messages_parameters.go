// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetMessagesParams creates a new GetMessagesParams object
// with the default values initialized.
func NewGetMessagesParams() GetMessagesParams {

	var (
		// initialize parameters with default values

		limitDefault  = int64(100)
		offsetDefault = int64(0)
	)

	return GetMessagesParams{
		Limit: &limitDefault,

		Offset: &offsetDefault,
	}
}

// GetMessagesParams contains all the bound params for the get messages operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetMessages
type GetMessagesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Токен доступа
	  Required: true
	  In: query
	*/
	AccessToken string
	/*Идентификатор канала
	  In: query
	*/
	ChannelID *string
	/*Адрес назначения
	  In: query
	*/
	Destination *string
	/*Лимит
	  In: query
	  Default: 100
	*/
	Limit *int64
	/*Шаг
	  In: query
	  Default: 0
	*/
	Offset *int64
	/*Статус сообщения
	  In: query
	*/
	Status *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetMessagesParams() beforehand.
func (o *GetMessagesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAccessToken, qhkAccessToken, _ := qs.GetOK("accessToken")
	if err := o.bindAccessToken(qAccessToken, qhkAccessToken, route.Formats); err != nil {
		res = append(res, err)
	}

	qChannelID, qhkChannelID, _ := qs.GetOK("channelID")
	if err := o.bindChannelID(qChannelID, qhkChannelID, route.Formats); err != nil {
		res = append(res, err)
	}

	qDestination, qhkDestination, _ := qs.GetOK("destination")
	if err := o.bindDestination(qDestination, qhkDestination, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qStatus, qhkStatus, _ := qs.GetOK("status")
	if err := o.bindStatus(qStatus, qhkStatus, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAccessToken binds and validates parameter AccessToken from query.
func (o *GetMessagesParams) bindAccessToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("accessToken", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("accessToken", "query", raw); err != nil {
		return err
	}

	o.AccessToken = raw

	return nil
}

// bindChannelID binds and validates parameter ChannelID from query.
func (o *GetMessagesParams) bindChannelID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.ChannelID = &raw

	return nil
}

// bindDestination binds and validates parameter Destination from query.
func (o *GetMessagesParams) bindDestination(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Destination = &raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetMessagesParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetMessagesParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetMessagesParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetMessagesParams()
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int64", raw)
	}
	o.Offset = &value

	return nil
}

// bindStatus binds and validates parameter Status from query.
func (o *GetMessagesParams) bindStatus(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Status = &raw

	if err := o.validateStatus(formats); err != nil {
		return err
	}

	return nil
}

// validateStatus carries on validations for parameter Status
func (o *GetMessagesParams) validateStatus(formats strfmt.Registry) error {

	if err := validate.Enum("status", "query", *o.Status, []interface{}{"SENT", "ERROR"}); err != nil {
		return err
	}

	return nil
}
