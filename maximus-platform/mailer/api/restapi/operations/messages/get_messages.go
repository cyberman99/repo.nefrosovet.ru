// Code generated by go-swagger; DO NOT EDIT.

package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// GetMessagesHandlerFunc turns a function with the right signature into a get messages handler
type GetMessagesHandlerFunc func(GetMessagesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMessagesHandlerFunc) Handle(params GetMessagesParams) middleware.Responder {
	return fn(params)
}

// GetMessagesHandler interface for that can handle valid get messages params
type GetMessagesHandler interface {
	Handle(GetMessagesParams) middleware.Responder
}

// NewGetMessages creates a new http.Handler for the get messages operation
func NewGetMessages(ctx *middleware.Context, handler GetMessagesHandler) *GetMessages {
	return &GetMessages{Context: ctx, Handler: handler}
}

/*GetMessages swagger:route GET /messages Messages getMessages

Коллекция сообщений

*/
type GetMessages struct {
	Context *middleware.Context
	Handler GetMessagesHandler
}

func (o *GetMessages) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetMessagesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DataItems0 data items0
// swagger:model DataItems0
type DataItems0 struct {

	// Идентификатор сообщения
	ID string `json:"ID,omitempty"`

	// channel ID
	ChannelID string `json:"channelID,omitempty"`

	// Дата-время создания сообщения
	Created string `json:"created,omitempty"`

	// errors
	// Required: true
	Errors interface{} `json:"errors"`

	// status
	// Enum: [SENT ERROR]
	Status string `json:"status,omitempty"`

	models.MessageObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		ChannelID string `json:"channelID,omitempty"`

		Created string `json:"created,omitempty"`

		Errors interface{} `json:"errors"`

		Status string `json:"status,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.ChannelID = dataAO0.ChannelID

	o.Created = dataAO0.Created

	o.Errors = dataAO0.Errors

	o.Status = dataAO0.Status

	// AO1
	var aO1 models.MessageObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.MessageObject = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		ChannelID string `json:"channelID,omitempty"`

		Created string `json:"created,omitempty"`

		Errors interface{} `json:"errors"`

		Status string `json:"status,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.ChannelID = o.ChannelID

	dataAO0.Created = o.Created

	dataAO0.Errors = o.Errors

	dataAO0.Status = o.Status

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.MessageObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data items0
func (o *DataItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with models.MessageObject
	if err := o.MessageObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DataItems0) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", o.Errors); err != nil {
		return err
	}

	return nil
}

var dataItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SENT","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataItems0TypeStatusPropEnum = append(dataItems0TypeStatusPropEnum, v)
	}
}

// property enum
func (o *DataItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dataItems0TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *DataItems0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(o.Status) { // not required
		return nil
	}

	// value enum
	if err := o.validateStatusEnum("status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DataItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItems0) UnmarshalBinary(b []byte) error {
	var res DataItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetMessagesForbiddenBody get messages forbidden body
// swagger:model GetMessagesForbiddenBody
type GetMessagesForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetMessagesForbiddenBody) UnmarshalJSON(raw []byte) error {
	// GetMessagesForbiddenBodyAO0
	var getMessagesForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &getMessagesForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = getMessagesForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetMessagesForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getMessagesForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getMessagesForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get messages forbidden body
func (o *GetMessagesForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetMessagesForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessagesForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetMessagesForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetMessagesMethodNotAllowedBody get messages method not allowed body
// swagger:model GetMessagesMethodNotAllowedBody
type GetMessagesMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetMessagesMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// GetMessagesMethodNotAllowedBodyAO0
	var getMessagesMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &getMessagesMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = getMessagesMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetMessagesMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getMessagesMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getMessagesMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get messages method not allowed body
func (o *GetMessagesMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetMessagesMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessagesMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res GetMessagesMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetMessagesOKBody get messages o k body
// swagger:model GetMessagesOKBody
type GetMessagesOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetMessagesOKBody) UnmarshalJSON(raw []byte) error {
	// GetMessagesOKBodyAO0
	var getMessagesOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getMessagesOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getMessagesOKBodyAO0

	// GetMessagesOKBodyAO1
	var dataGetMessagesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetMessagesOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetMessagesOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetMessagesOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getMessagesOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getMessagesOKBodyAO0)

	var dataGetMessagesOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataGetMessagesOKBodyAO1.Data = o.Data

	jsonDataGetMessagesOKBodyAO1, errGetMessagesOKBodyAO1 := swag.WriteJSON(dataGetMessagesOKBodyAO1)
	if errGetMessagesOKBodyAO1 != nil {
		return nil, errGetMessagesOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetMessagesOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get messages o k body
func (o *GetMessagesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetMessagesOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getMessagesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetMessagesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMessagesOKBody) UnmarshalBinary(b []byte) error {
	var res GetMessagesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
