// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"repo.nefrosovet.ru/maximus-platform/mailer/api/restapi/operations/channels"
	"repo.nefrosovet.ru/maximus-platform/mailer/api/restapi/operations/manage"
	"repo.nefrosovet.ru/maximus-platform/mailer/api/restapi/operations/messages"
	"repo.nefrosovet.ru/maximus-platform/mailer/api/restapi/operations/service"
)

// NewMailerAPI creates a new Mailer instance
func NewMailerAPI(spec *loads.Document) *MailerAPI {
	return &MailerAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		ChannelsDeleteChannelsChannelIDHandler: channels.DeleteChannelsChannelIDHandlerFunc(func(params channels.DeleteChannelsChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsDeleteChannelsChannelID has not yet been implemented")
		}),
		ManageDeleteTokensTokenIDHandler: manage.DeleteTokensTokenIDHandlerFunc(func(params manage.DeleteTokensTokenIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ManageDeleteTokensTokenID has not yet been implemented")
		}),
		ChannelsGetChannelsHandler: channels.GetChannelsHandlerFunc(func(params channels.GetChannelsParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsGetChannels has not yet been implemented")
		}),
		ChannelsGetChannelsChannelIDHandler: channels.GetChannelsChannelIDHandlerFunc(func(params channels.GetChannelsChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsGetChannelsChannelID has not yet been implemented")
		}),
		MessagesGetMessagesHandler: messages.GetMessagesHandlerFunc(func(params messages.GetMessagesParams) middleware.Responder {
			return middleware.NotImplemented("operation MessagesGetMessages has not yet been implemented")
		}),
		MessagesGetMessagesMessageIDHandler: messages.GetMessagesMessageIDHandlerFunc(func(params messages.GetMessagesMessageIDParams) middleware.Responder {
			return middleware.NotImplemented("operation MessagesGetMessagesMessageID has not yet been implemented")
		}),
		ServiceGetStatusHandler: service.GetStatusHandlerFunc(func(params service.GetStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation ServiceGetStatus has not yet been implemented")
		}),
		ManageGetTokensHandler: manage.GetTokensHandlerFunc(func(params manage.GetTokensParams) middleware.Responder {
			return middleware.NotImplemented("operation ManageGetTokens has not yet been implemented")
		}),
		ManageGetTokensTokenIDHandler: manage.GetTokensTokenIDHandlerFunc(func(params manage.GetTokensTokenIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ManageGetTokensTokenID has not yet been implemented")
		}),
		ChannelsPostChannelsEmailHandler: channels.PostChannelsEmailHandlerFunc(func(params channels.PostChannelsEmailParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPostChannelsEmail has not yet been implemented")
		}),
		ChannelsPostChannelsLocalSmsHandler: channels.PostChannelsLocalSmsHandlerFunc(func(params channels.PostChannelsLocalSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPostChannelsLocalSms has not yet been implemented")
		}),
		ChannelsPostChannelsMtsSmsHandler: channels.PostChannelsMtsSmsHandlerFunc(func(params channels.PostChannelsMtsSmsParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPostChannelsMtsSms has not yet been implemented")
		}),
		ChannelsPostChannelsSLACKHandler: channels.PostChannelsSLACKHandlerFunc(func(params channels.PostChannelsSLACKParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPostChannelsSLACK has not yet been implemented")
		}),
		ChannelsPostChannelsTelegramHandler: channels.PostChannelsTelegramHandlerFunc(func(params channels.PostChannelsTelegramParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPostChannelsTelegram has not yet been implemented")
		}),
		ChannelsPostChannelsViberHandler: channels.PostChannelsViberHandlerFunc(func(params channels.PostChannelsViberParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPostChannelsViber has not yet been implemented")
		}),
		MessagesPostSendHandler: messages.PostSendHandlerFunc(func(params messages.PostSendParams) middleware.Responder {
			return middleware.NotImplemented("operation MessagesPostSend has not yet been implemented")
		}),
		ManagePostTokensHandler: manage.PostTokensHandlerFunc(func(params manage.PostTokensParams) middleware.Responder {
			return middleware.NotImplemented("operation ManagePostTokens has not yet been implemented")
		}),
		ChannelsPutChannelsEmailChannelIDHandler: channels.PutChannelsEmailChannelIDHandlerFunc(func(params channels.PutChannelsEmailChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPutChannelsEmailChannelID has not yet been implemented")
		}),
		ChannelsPutChannelsLocalSmsChannelIDHandler: channels.PutChannelsLocalSmsChannelIDHandlerFunc(func(params channels.PutChannelsLocalSmsChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPutChannelsLocalSmsChannelID has not yet been implemented")
		}),
		ChannelsPutChannelsMtsSmsChannelIDHandler: channels.PutChannelsMtsSmsChannelIDHandlerFunc(func(params channels.PutChannelsMtsSmsChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPutChannelsMtsSmsChannelID has not yet been implemented")
		}),
		ChannelsPutChannelsSLACKChannelIDHandler: channels.PutChannelsSLACKChannelIDHandlerFunc(func(params channels.PutChannelsSLACKChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPutChannelsSLACKChannelID has not yet been implemented")
		}),
		ChannelsPutChannelsTelegramChannelIDHandler: channels.PutChannelsTelegramChannelIDHandlerFunc(func(params channels.PutChannelsTelegramChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPutChannelsTelegramChannelID has not yet been implemented")
		}),
		ChannelsPutChannelsViberChannelIDHandler: channels.PutChannelsViberChannelIDHandlerFunc(func(params channels.PutChannelsViberChannelIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ChannelsPutChannelsViberChannelID has not yet been implemented")
		}),
		ManagePutTokensTokenIDHandler: manage.PutTokensTokenIDHandlerFunc(func(params manage.PutTokensTokenIDParams) middleware.Responder {
			return middleware.NotImplemented("operation ManagePutTokensTokenID has not yet been implemented")
		}),
	}
}

/*MailerAPI #### RESTFUL Mailer API
 */
type MailerAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// ChannelsDeleteChannelsChannelIDHandler sets the operation handler for the delete channels channel ID operation
	ChannelsDeleteChannelsChannelIDHandler channels.DeleteChannelsChannelIDHandler
	// ManageDeleteTokensTokenIDHandler sets the operation handler for the delete tokens token ID operation
	ManageDeleteTokensTokenIDHandler manage.DeleteTokensTokenIDHandler
	// ChannelsGetChannelsHandler sets the operation handler for the get channels operation
	ChannelsGetChannelsHandler channels.GetChannelsHandler
	// ChannelsGetChannelsChannelIDHandler sets the operation handler for the get channels channel ID operation
	ChannelsGetChannelsChannelIDHandler channels.GetChannelsChannelIDHandler
	// MessagesGetMessagesHandler sets the operation handler for the get messages operation
	MessagesGetMessagesHandler messages.GetMessagesHandler
	// MessagesGetMessagesMessageIDHandler sets the operation handler for the get messages message ID operation
	MessagesGetMessagesMessageIDHandler messages.GetMessagesMessageIDHandler
	// ServiceGetStatusHandler sets the operation handler for the get status operation
	ServiceGetStatusHandler service.GetStatusHandler
	// ManageGetTokensHandler sets the operation handler for the get tokens operation
	ManageGetTokensHandler manage.GetTokensHandler
	// ManageGetTokensTokenIDHandler sets the operation handler for the get tokens token ID operation
	ManageGetTokensTokenIDHandler manage.GetTokensTokenIDHandler
	// ChannelsPostChannelsEmailHandler sets the operation handler for the post channels email operation
	ChannelsPostChannelsEmailHandler channels.PostChannelsEmailHandler
	// ChannelsPostChannelsLocalSmsHandler sets the operation handler for the post channels local sms operation
	ChannelsPostChannelsLocalSmsHandler channels.PostChannelsLocalSmsHandler
	// ChannelsPostChannelsMtsSmsHandler sets the operation handler for the post channels mts sms operation
	ChannelsPostChannelsMtsSmsHandler channels.PostChannelsMtsSmsHandler
	// ChannelsPostChannelsSLACKHandler sets the operation handler for the post channels SLA c k operation
	ChannelsPostChannelsSLACKHandler channels.PostChannelsSLACKHandler
	// ChannelsPostChannelsTelegramHandler sets the operation handler for the post channels telegram operation
	ChannelsPostChannelsTelegramHandler channels.PostChannelsTelegramHandler
	// ChannelsPostChannelsViberHandler sets the operation handler for the post channels viber operation
	ChannelsPostChannelsViberHandler channels.PostChannelsViberHandler
	// MessagesPostSendHandler sets the operation handler for the post send operation
	MessagesPostSendHandler messages.PostSendHandler
	// ManagePostTokensHandler sets the operation handler for the post tokens operation
	ManagePostTokensHandler manage.PostTokensHandler
	// ChannelsPutChannelsEmailChannelIDHandler sets the operation handler for the put channels email channel ID operation
	ChannelsPutChannelsEmailChannelIDHandler channels.PutChannelsEmailChannelIDHandler
	// ChannelsPutChannelsLocalSmsChannelIDHandler sets the operation handler for the put channels local sms channel ID operation
	ChannelsPutChannelsLocalSmsChannelIDHandler channels.PutChannelsLocalSmsChannelIDHandler
	// ChannelsPutChannelsMtsSmsChannelIDHandler sets the operation handler for the put channels mts sms channel ID operation
	ChannelsPutChannelsMtsSmsChannelIDHandler channels.PutChannelsMtsSmsChannelIDHandler
	// ChannelsPutChannelsSLACKChannelIDHandler sets the operation handler for the put channels SLA c k channel ID operation
	ChannelsPutChannelsSLACKChannelIDHandler channels.PutChannelsSLACKChannelIDHandler
	// ChannelsPutChannelsTelegramChannelIDHandler sets the operation handler for the put channels telegram channel ID operation
	ChannelsPutChannelsTelegramChannelIDHandler channels.PutChannelsTelegramChannelIDHandler
	// ChannelsPutChannelsViberChannelIDHandler sets the operation handler for the put channels viber channel ID operation
	ChannelsPutChannelsViberChannelIDHandler channels.PutChannelsViberChannelIDHandler
	// ManagePutTokensTokenIDHandler sets the operation handler for the put tokens token ID operation
	ManagePutTokensTokenIDHandler manage.PutTokensTokenIDHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *MailerAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MailerAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MailerAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MailerAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MailerAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MailerAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MailerAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MailerAPI
func (o *MailerAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.ChannelsDeleteChannelsChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.DeleteChannelsChannelIDHandler")
	}

	if o.ManageDeleteTokensTokenIDHandler == nil {
		unregistered = append(unregistered, "manage.DeleteTokensTokenIDHandler")
	}

	if o.ChannelsGetChannelsHandler == nil {
		unregistered = append(unregistered, "channels.GetChannelsHandler")
	}

	if o.ChannelsGetChannelsChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.GetChannelsChannelIDHandler")
	}

	if o.MessagesGetMessagesHandler == nil {
		unregistered = append(unregistered, "messages.GetMessagesHandler")
	}

	if o.MessagesGetMessagesMessageIDHandler == nil {
		unregistered = append(unregistered, "messages.GetMessagesMessageIDHandler")
	}

	if o.ServiceGetStatusHandler == nil {
		unregistered = append(unregistered, "service.GetStatusHandler")
	}

	if o.ManageGetTokensHandler == nil {
		unregistered = append(unregistered, "manage.GetTokensHandler")
	}

	if o.ManageGetTokensTokenIDHandler == nil {
		unregistered = append(unregistered, "manage.GetTokensTokenIDHandler")
	}

	if o.ChannelsPostChannelsEmailHandler == nil {
		unregistered = append(unregistered, "channels.PostChannelsEmailHandler")
	}

	if o.ChannelsPostChannelsLocalSmsHandler == nil {
		unregistered = append(unregistered, "channels.PostChannelsLocalSmsHandler")
	}

	if o.ChannelsPostChannelsMtsSmsHandler == nil {
		unregistered = append(unregistered, "channels.PostChannelsMtsSmsHandler")
	}

	if o.ChannelsPostChannelsSLACKHandler == nil {
		unregistered = append(unregistered, "channels.PostChannelsSLACKHandler")
	}

	if o.ChannelsPostChannelsTelegramHandler == nil {
		unregistered = append(unregistered, "channels.PostChannelsTelegramHandler")
	}

	if o.ChannelsPostChannelsViberHandler == nil {
		unregistered = append(unregistered, "channels.PostChannelsViberHandler")
	}

	if o.MessagesPostSendHandler == nil {
		unregistered = append(unregistered, "messages.PostSendHandler")
	}

	if o.ManagePostTokensHandler == nil {
		unregistered = append(unregistered, "manage.PostTokensHandler")
	}

	if o.ChannelsPutChannelsEmailChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.PutChannelsEmailChannelIDHandler")
	}

	if o.ChannelsPutChannelsLocalSmsChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.PutChannelsLocalSmsChannelIDHandler")
	}

	if o.ChannelsPutChannelsMtsSmsChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.PutChannelsMtsSmsChannelIDHandler")
	}

	if o.ChannelsPutChannelsSLACKChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.PutChannelsSLACKChannelIDHandler")
	}

	if o.ChannelsPutChannelsTelegramChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.PutChannelsTelegramChannelIDHandler")
	}

	if o.ChannelsPutChannelsViberChannelIDHandler == nil {
		unregistered = append(unregistered, "channels.PutChannelsViberChannelIDHandler")
	}

	if o.ManagePutTokensTokenIDHandler == nil {
		unregistered = append(unregistered, "manage.PutTokensTokenIDHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MailerAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MailerAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *MailerAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *MailerAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *MailerAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MailerAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the mailer API
func (o *MailerAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MailerAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/channels/{channelID}"] = channels.NewDeleteChannelsChannelID(o.context, o.ChannelsDeleteChannelsChannelIDHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/tokens/{tokenID}"] = manage.NewDeleteTokensTokenID(o.context, o.ManageDeleteTokensTokenIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/channels"] = channels.NewGetChannels(o.context, o.ChannelsGetChannelsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/channels/{channelID}"] = channels.NewGetChannelsChannelID(o.context, o.ChannelsGetChannelsChannelIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/messages"] = messages.NewGetMessages(o.context, o.MessagesGetMessagesHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/messages/{messageID}"] = messages.NewGetMessagesMessageID(o.context, o.MessagesGetMessagesMessageIDHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status"] = service.NewGetStatus(o.context, o.ServiceGetStatusHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens"] = manage.NewGetTokens(o.context, o.ManageGetTokensHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/tokens/{tokenID}"] = manage.NewGetTokensTokenID(o.context, o.ManageGetTokensTokenIDHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/channels/email"] = channels.NewPostChannelsEmail(o.context, o.ChannelsPostChannelsEmailHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/channels/local_sms"] = channels.NewPostChannelsLocalSms(o.context, o.ChannelsPostChannelsLocalSmsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/channels/mts_sms"] = channels.NewPostChannelsMtsSms(o.context, o.ChannelsPostChannelsMtsSmsHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/channels/slack"] = channels.NewPostChannelsSLACK(o.context, o.ChannelsPostChannelsSLACKHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/channels/telegram"] = channels.NewPostChannelsTelegram(o.context, o.ChannelsPostChannelsTelegramHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/channels/viber"] = channels.NewPostChannelsViber(o.context, o.ChannelsPostChannelsViberHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/send"] = messages.NewPostSend(o.context, o.MessagesPostSendHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/tokens"] = manage.NewPostTokens(o.context, o.ManagePostTokensHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/channels/email/{channelID}"] = channels.NewPutChannelsEmailChannelID(o.context, o.ChannelsPutChannelsEmailChannelIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/channels/local_sms/{channelID}"] = channels.NewPutChannelsLocalSmsChannelID(o.context, o.ChannelsPutChannelsLocalSmsChannelIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/channels/mts_sms/{channelID}"] = channels.NewPutChannelsMtsSmsChannelID(o.context, o.ChannelsPutChannelsMtsSmsChannelIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/channels/slack/{channelID}"] = channels.NewPutChannelsSLACKChannelID(o.context, o.ChannelsPutChannelsSLACKChannelIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/channels/telegram/{channelID}"] = channels.NewPutChannelsTelegramChannelID(o.context, o.ChannelsPutChannelsTelegramChannelIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/channels/viber/{channelID}"] = channels.NewPutChannelsViberChannelID(o.context, o.ChannelsPutChannelsViberChannelIDHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/tokens/{tokenID}"] = manage.NewPutTokensTokenID(o.context, o.ManagePutTokensTokenIDHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MailerAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MailerAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MailerAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MailerAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
