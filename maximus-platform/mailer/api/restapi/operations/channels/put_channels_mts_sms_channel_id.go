// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PutChannelsMtsSmsChannelIDHandlerFunc turns a function with the right signature into a put channels mts sms channel ID handler
type PutChannelsMtsSmsChannelIDHandlerFunc func(PutChannelsMtsSmsChannelIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutChannelsMtsSmsChannelIDHandlerFunc) Handle(params PutChannelsMtsSmsChannelIDParams) middleware.Responder {
	return fn(params)
}

// PutChannelsMtsSmsChannelIDHandler interface for that can handle valid put channels mts sms channel ID params
type PutChannelsMtsSmsChannelIDHandler interface {
	Handle(PutChannelsMtsSmsChannelIDParams) middleware.Responder
}

// NewPutChannelsMtsSmsChannelID creates a new http.Handler for the put channels mts sms channel ID operation
func NewPutChannelsMtsSmsChannelID(ctx *middleware.Context, handler PutChannelsMtsSmsChannelIDHandler) *PutChannelsMtsSmsChannelID {
	return &PutChannelsMtsSmsChannelID{Context: ctx, Handler: handler}
}

/*PutChannelsMtsSmsChannelID swagger:route PUT /channels/mts_sms/{channelID} Channels putChannelsMtsSmsChannelId

Изменение MTS SMS канала

*/
type PutChannelsMtsSmsChannelID struct {
	Context *middleware.Context
	Handler PutChannelsMtsSmsChannelIDHandler
}

func (o *PutChannelsMtsSmsChannelID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutChannelsMtsSmsChannelIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutChannelsMtsSmsChannelIDBadRequestBody put channels mts sms channel ID bad request body
// swagger:model PutChannelsMtsSmsChannelIDBadRequestBody
type PutChannelsMtsSmsChannelIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsMtsSmsChannelIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsMtsSmsChannelIDBadRequestBodyAO0
	var putChannelsMtsSmsChannelIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putChannelsMtsSmsChannelIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putChannelsMtsSmsChannelIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsMtsSmsChannelIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsMtsSmsChannelIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsMtsSmsChannelIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels mts sms channel ID bad request body
func (o *PutChannelsMtsSmsChannelIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsMtsSmsChannelIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsMtsSmsChannelIDBody put channels mts sms channel ID body
// swagger:model PutChannelsMtsSmsChannelIDBody
type PutChannelsMtsSmsChannelIDBody struct {
	models.ChannelParamsMtsSms

	PutChannelsMtsSmsChannelIDParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsMtsSmsChannelIDBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsMtsSmsChannelIDParamsBodyAO0
	var putChannelsMtsSmsChannelIDParamsBodyAO0 models.ChannelParamsMtsSms
	if err := swag.ReadJSON(raw, &putChannelsMtsSmsChannelIDParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsMtsSms = putChannelsMtsSmsChannelIDParamsBodyAO0

	// PutChannelsMtsSmsChannelIDParamsBodyAO1
	var putChannelsMtsSmsChannelIDParamsBodyAO1 PutChannelsMtsSmsChannelIDParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &putChannelsMtsSmsChannelIDParamsBodyAO1); err != nil {
		return err
	}
	o.PutChannelsMtsSmsChannelIDParamsBodyAllOf1 = putChannelsMtsSmsChannelIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsMtsSmsChannelIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsMtsSmsChannelIDParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsMtsSms)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsMtsSmsChannelIDParamsBodyAO0)

	putChannelsMtsSmsChannelIDParamsBodyAO1, err := swag.WriteJSON(o.PutChannelsMtsSmsChannelIDParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsMtsSmsChannelIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels mts sms channel ID body
func (o *PutChannelsMtsSmsChannelIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsMtsSms
	if err := o.ChannelParamsMtsSms.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PutChannelsMtsSmsChannelIDParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsMtsSmsChannelIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsMtsSmsChannelIDForbiddenBody put channels mts sms channel ID forbidden body
// swagger:model PutChannelsMtsSmsChannelIDForbiddenBody
type PutChannelsMtsSmsChannelIDForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsMtsSmsChannelIDForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsMtsSmsChannelIDForbiddenBodyAO0
	var putChannelsMtsSmsChannelIDForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &putChannelsMtsSmsChannelIDForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = putChannelsMtsSmsChannelIDForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsMtsSmsChannelIDForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsMtsSmsChannelIDForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsMtsSmsChannelIDForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels mts sms channel ID forbidden body
func (o *PutChannelsMtsSmsChannelIDForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsMtsSmsChannelIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsMtsSmsChannelIDMethodNotAllowedBody put channels mts sms channel ID method not allowed body
// swagger:model PutChannelsMtsSmsChannelIDMethodNotAllowedBody
type PutChannelsMtsSmsChannelIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsMtsSmsChannelIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsMtsSmsChannelIDMethodNotAllowedBodyAO0
	var putChannelsMtsSmsChannelIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putChannelsMtsSmsChannelIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putChannelsMtsSmsChannelIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsMtsSmsChannelIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsMtsSmsChannelIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsMtsSmsChannelIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels mts sms channel ID method not allowed body
func (o *PutChannelsMtsSmsChannelIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsMtsSmsChannelIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsMtsSmsChannelIDNotFoundBody put channels mts sms channel ID not found body
// swagger:model PutChannelsMtsSmsChannelIDNotFoundBody
type PutChannelsMtsSmsChannelIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsMtsSmsChannelIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsMtsSmsChannelIDNotFoundBodyAO0
	var putChannelsMtsSmsChannelIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putChannelsMtsSmsChannelIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putChannelsMtsSmsChannelIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsMtsSmsChannelIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsMtsSmsChannelIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsMtsSmsChannelIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels mts sms channel ID not found body
func (o *PutChannelsMtsSmsChannelIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsMtsSmsChannelIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsMtsSmsChannelIDOKBody put channels mts sms channel ID o k body
// swagger:model PutChannelsMtsSmsChannelIDOKBody
type PutChannelsMtsSmsChannelIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemMtsSms `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsMtsSmsChannelIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsMtsSmsChannelIDOKBodyAO0
	var putChannelsMtsSmsChannelIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putChannelsMtsSmsChannelIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putChannelsMtsSmsChannelIDOKBodyAO0

	// PutChannelsMtsSmsChannelIDOKBodyAO1
	var dataPutChannelsMtsSmsChannelIDOKBodyAO1 struct {
		Data []*DataItemMtsSms `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutChannelsMtsSmsChannelIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutChannelsMtsSmsChannelIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsMtsSmsChannelIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsMtsSmsChannelIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsMtsSmsChannelIDOKBodyAO0)

	var dataPutChannelsMtsSmsChannelIDOKBodyAO1 struct {
		Data []*DataItemMtsSms `json:"data"`
	}

	dataPutChannelsMtsSmsChannelIDOKBodyAO1.Data = o.Data

	jsonDataPutChannelsMtsSmsChannelIDOKBodyAO1, errPutChannelsMtsSmsChannelIDOKBodyAO1 := swag.WriteJSON(dataPutChannelsMtsSmsChannelIDOKBodyAO1)
	if errPutChannelsMtsSmsChannelIDOKBodyAO1 != nil {
		return nil, errPutChannelsMtsSmsChannelIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutChannelsMtsSmsChannelIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels mts sms channel ID o k body
func (o *PutChannelsMtsSmsChannelIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutChannelsMtsSmsChannelIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putChannelsMtsSmsChannelIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsMtsSmsChannelIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsMtsSmsChannelIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsMtsSmsChannelIDParamsBodyAllOf1 put channels mts sms channel ID params body all of1
// swagger:model PutChannelsMtsSmsChannelIDParamsBodyAllOf1
type PutChannelsMtsSmsChannelIDParamsBodyAllOf1 interface{}
