// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PutChannelsViberChannelIDHandlerFunc turns a function with the right signature into a put channels viber channel ID handler
type PutChannelsViberChannelIDHandlerFunc func(PutChannelsViberChannelIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutChannelsViberChannelIDHandlerFunc) Handle(params PutChannelsViberChannelIDParams) middleware.Responder {
	return fn(params)
}

// PutChannelsViberChannelIDHandler interface for that can handle valid put channels viber channel ID params
type PutChannelsViberChannelIDHandler interface {
	Handle(PutChannelsViberChannelIDParams) middleware.Responder
}

// NewPutChannelsViberChannelID creates a new http.Handler for the put channels viber channel ID operation
func NewPutChannelsViberChannelID(ctx *middleware.Context, handler PutChannelsViberChannelIDHandler) *PutChannelsViberChannelID {
	return &PutChannelsViberChannelID{Context: ctx, Handler: handler}
}

/*PutChannelsViberChannelID swagger:route PUT /channels/viber/{channelID} Channels putChannelsViberChannelId

Изменение Viber канала

*/
type PutChannelsViberChannelID struct {
	Context *middleware.Context
	Handler PutChannelsViberChannelIDHandler
}

func (o *PutChannelsViberChannelID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutChannelsViberChannelIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutChannelsViberChannelIDBadRequestBody put channels viber channel ID bad request body
// swagger:model PutChannelsViberChannelIDBadRequestBody
type PutChannelsViberChannelIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsViberChannelIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsViberChannelIDBadRequestBodyAO0
	var putChannelsViberChannelIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putChannelsViberChannelIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putChannelsViberChannelIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsViberChannelIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsViberChannelIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsViberChannelIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels viber channel ID bad request body
func (o *PutChannelsViberChannelIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsViberChannelIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsViberChannelIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsViberChannelIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsViberChannelIDBody put channels viber channel ID body
// swagger:model PutChannelsViberChannelIDBody
type PutChannelsViberChannelIDBody struct {
	models.ChannelParamsViber
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsViberChannelIDBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsViberChannelIDParamsBodyAO0
	var putChannelsViberChannelIDParamsBodyAO0 models.ChannelParamsViber
	if err := swag.ReadJSON(raw, &putChannelsViberChannelIDParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsViber = putChannelsViberChannelIDParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsViberChannelIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsViberChannelIDParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsViber)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsViberChannelIDParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels viber channel ID body
func (o *PutChannelsViberChannelIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsViber
	if err := o.ChannelParamsViber.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsViberChannelIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsViberChannelIDBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsViberChannelIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsViberChannelIDForbiddenBody put channels viber channel ID forbidden body
// swagger:model PutChannelsViberChannelIDForbiddenBody
type PutChannelsViberChannelIDForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsViberChannelIDForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsViberChannelIDForbiddenBodyAO0
	var putChannelsViberChannelIDForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &putChannelsViberChannelIDForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = putChannelsViberChannelIDForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsViberChannelIDForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsViberChannelIDForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsViberChannelIDForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels viber channel ID forbidden body
func (o *PutChannelsViberChannelIDForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsViberChannelIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsViberChannelIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsViberChannelIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsViberChannelIDMethodNotAllowedBody put channels viber channel ID method not allowed body
// swagger:model PutChannelsViberChannelIDMethodNotAllowedBody
type PutChannelsViberChannelIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsViberChannelIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsViberChannelIDMethodNotAllowedBodyAO0
	var putChannelsViberChannelIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putChannelsViberChannelIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putChannelsViberChannelIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsViberChannelIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsViberChannelIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsViberChannelIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels viber channel ID method not allowed body
func (o *PutChannelsViberChannelIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsViberChannelIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsViberChannelIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsViberChannelIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsViberChannelIDNotFoundBody put channels viber channel ID not found body
// swagger:model PutChannelsViberChannelIDNotFoundBody
type PutChannelsViberChannelIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsViberChannelIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsViberChannelIDNotFoundBodyAO0
	var putChannelsViberChannelIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putChannelsViberChannelIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putChannelsViberChannelIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsViberChannelIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsViberChannelIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsViberChannelIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels viber channel ID not found body
func (o *PutChannelsViberChannelIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsViberChannelIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsViberChannelIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsViberChannelIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsViberChannelIDOKBody put channels viber channel ID o k body
// swagger:model PutChannelsViberChannelIDOKBody
type PutChannelsViberChannelIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemViber `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsViberChannelIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsViberChannelIDOKBodyAO0
	var putChannelsViberChannelIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putChannelsViberChannelIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putChannelsViberChannelIDOKBodyAO0

	// PutChannelsViberChannelIDOKBodyAO1
	var dataPutChannelsViberChannelIDOKBodyAO1 struct {
		Data []*DataItemViber `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutChannelsViberChannelIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutChannelsViberChannelIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsViberChannelIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsViberChannelIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsViberChannelIDOKBodyAO0)

	var dataPutChannelsViberChannelIDOKBodyAO1 struct {
		Data []*DataItemViber `json:"data"`
	}

	dataPutChannelsViberChannelIDOKBodyAO1.Data = o.Data

	jsonDataPutChannelsViberChannelIDOKBodyAO1, errPutChannelsViberChannelIDOKBodyAO1 := swag.WriteJSON(dataPutChannelsViberChannelIDOKBodyAO1)
	if errPutChannelsViberChannelIDOKBodyAO1 != nil {
		return nil, errPutChannelsViberChannelIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutChannelsViberChannelIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels viber channel ID o k body
func (o *PutChannelsViberChannelIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutChannelsViberChannelIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putChannelsViberChannelIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsViberChannelIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsViberChannelIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsViberChannelIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
