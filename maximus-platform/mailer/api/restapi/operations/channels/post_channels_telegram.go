// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PostChannelsTelegramHandlerFunc turns a function with the right signature into a post channels telegram handler
type PostChannelsTelegramHandlerFunc func(PostChannelsTelegramParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostChannelsTelegramHandlerFunc) Handle(params PostChannelsTelegramParams) middleware.Responder {
	return fn(params)
}

// PostChannelsTelegramHandler interface for that can handle valid post channels telegram params
type PostChannelsTelegramHandler interface {
	Handle(PostChannelsTelegramParams) middleware.Responder
}

// NewPostChannelsTelegram creates a new http.Handler for the post channels telegram operation
func NewPostChannelsTelegram(ctx *middleware.Context, handler PostChannelsTelegramHandler) *PostChannelsTelegram {
	return &PostChannelsTelegram{Context: ctx, Handler: handler}
}

/*PostChannelsTelegram swagger:route POST /channels/telegram Channels postChannelsTelegram

Создание Telegram канала

*/
type PostChannelsTelegram struct {
	Context *middleware.Context
	Handler PostChannelsTelegramHandler
}

func (o *PostChannelsTelegram) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostChannelsTelegramParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostChannelsTelegramBadRequestBody post channels telegram bad request body
// swagger:model PostChannelsTelegramBadRequestBody
type PostChannelsTelegramBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsTelegramBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsTelegramBadRequestBodyAO0
	var postChannelsTelegramBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postChannelsTelegramBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postChannelsTelegramBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsTelegramBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsTelegramBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsTelegramBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels telegram bad request body
func (o *PostChannelsTelegramBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsTelegramBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsTelegramBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsTelegramBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsTelegramBody post channels telegram body
// swagger:model PostChannelsTelegramBody
type PostChannelsTelegramBody struct {
	models.ChannelParamsTelegram

	PostChannelsTelegramParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsTelegramBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsTelegramParamsBodyAO0
	var postChannelsTelegramParamsBodyAO0 models.ChannelParamsTelegram
	if err := swag.ReadJSON(raw, &postChannelsTelegramParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsTelegram = postChannelsTelegramParamsBodyAO0

	// PostChannelsTelegramParamsBodyAO1
	var postChannelsTelegramParamsBodyAO1 PostChannelsTelegramParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &postChannelsTelegramParamsBodyAO1); err != nil {
		return err
	}
	o.PostChannelsTelegramParamsBodyAllOf1 = postChannelsTelegramParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsTelegramBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postChannelsTelegramParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsTelegram)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsTelegramParamsBodyAO0)

	postChannelsTelegramParamsBodyAO1, err := swag.WriteJSON(o.PostChannelsTelegramParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsTelegramParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels telegram body
func (o *PostChannelsTelegramBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsTelegram
	if err := o.ChannelParamsTelegram.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostChannelsTelegramParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsTelegramBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsTelegramBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsTelegramBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsTelegramForbiddenBody post channels telegram forbidden body
// swagger:model PostChannelsTelegramForbiddenBody
type PostChannelsTelegramForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsTelegramForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsTelegramForbiddenBodyAO0
	var postChannelsTelegramForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &postChannelsTelegramForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = postChannelsTelegramForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsTelegramForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsTelegramForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsTelegramForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels telegram forbidden body
func (o *PostChannelsTelegramForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsTelegramForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsTelegramForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsTelegramForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsTelegramMethodNotAllowedBody post channels telegram method not allowed body
// swagger:model PostChannelsTelegramMethodNotAllowedBody
type PostChannelsTelegramMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsTelegramMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsTelegramMethodNotAllowedBodyAO0
	var postChannelsTelegramMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postChannelsTelegramMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postChannelsTelegramMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsTelegramMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsTelegramMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsTelegramMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels telegram method not allowed body
func (o *PostChannelsTelegramMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsTelegramMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsTelegramMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsTelegramMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsTelegramOKBody post channels telegram o k body
// swagger:model PostChannelsTelegramOKBody
type PostChannelsTelegramOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemTelegram `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsTelegramOKBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsTelegramOKBodyAO0
	var postChannelsTelegramOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postChannelsTelegramOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postChannelsTelegramOKBodyAO0

	// PostChannelsTelegramOKBodyAO1
	var dataPostChannelsTelegramOKBodyAO1 struct {
		Data []*DataItemTelegram `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostChannelsTelegramOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostChannelsTelegramOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsTelegramOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postChannelsTelegramOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsTelegramOKBodyAO0)

	var dataPostChannelsTelegramOKBodyAO1 struct {
		Data []*DataItemTelegram `json:"data"`
	}

	dataPostChannelsTelegramOKBodyAO1.Data = o.Data

	jsonDataPostChannelsTelegramOKBodyAO1, errPostChannelsTelegramOKBodyAO1 := swag.WriteJSON(dataPostChannelsTelegramOKBodyAO1)
	if errPostChannelsTelegramOKBodyAO1 != nil {
		return nil, errPostChannelsTelegramOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostChannelsTelegramOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels telegram o k body
func (o *PostChannelsTelegramOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostChannelsTelegramOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postChannelsTelegramOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsTelegramOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsTelegramOKBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsTelegramOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsTelegramParamsBodyAllOf1 post channels telegram params body all of1
// swagger:model PostChannelsTelegramParamsBodyAllOf1
type PostChannelsTelegramParamsBodyAllOf1 interface{}

// data-item-telegram data item telegram
// swagger:model data-item-telegram
type DataItemTelegram struct {

	// Идентификатор канала
	ID string `json:"ID,omitempty"`

	// Тип канала
	Type string `json:"type,omitempty"`

	models.ChannelParamsTelegram
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItemTelegram) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Type = dataAO0.Type

	// AO1
	var aO1 models.ChannelParamsTelegram
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ChannelParamsTelegram = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItemTelegram) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.ChannelParamsTelegram)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data item telegram
func (o *DataItemTelegram) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsTelegram
	if err := o.ChannelParamsTelegram.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItemTelegram) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItemTelegram) UnmarshalBinary(b []byte) error {
	var res DataItemTelegram
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
