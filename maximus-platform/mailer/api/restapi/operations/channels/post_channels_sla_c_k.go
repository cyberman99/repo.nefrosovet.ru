// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PostChannelsSLACKHandlerFunc turns a function with the right signature into a post channels SLA c k handler
type PostChannelsSLACKHandlerFunc func(PostChannelsSLACKParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostChannelsSLACKHandlerFunc) Handle(params PostChannelsSLACKParams) middleware.Responder {
	return fn(params)
}

// PostChannelsSLACKHandler interface for that can handle valid post channels SLA c k params
type PostChannelsSLACKHandler interface {
	Handle(PostChannelsSLACKParams) middleware.Responder
}

// NewPostChannelsSLACK creates a new http.Handler for the post channels SLA c k operation
func NewPostChannelsSLACK(ctx *middleware.Context, handler PostChannelsSLACKHandler) *PostChannelsSLACK {
	return &PostChannelsSLACK{Context: ctx, Handler: handler}
}

/*PostChannelsSLACK swagger:route POST /channels/slack Channels postChannelsSlaCK

Создание Slack канала

*/
type PostChannelsSLACK struct {
	Context *middleware.Context
	Handler PostChannelsSLACKHandler
}

func (o *PostChannelsSLACK) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostChannelsSLACKParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostChannelsSLACKBadRequestBody post channels SLA c k bad request body
// swagger:model PostChannelsSLACKBadRequestBody
type PostChannelsSLACKBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsSLACKBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsSLACKBadRequestBodyAO0
	var postChannelsSLACKBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postChannelsSLACKBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postChannelsSLACKBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsSLACKBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsSLACKBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsSLACKBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels SLA c k bad request body
func (o *PostChannelsSLACKBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsSLACKBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsSLACKBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsSLACKBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsSLACKBody post channels SLA c k body
// swagger:model PostChannelsSLACKBody
type PostChannelsSLACKBody struct {
	models.ChannelParamsSLACK

	PostChannelsSLACKParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsSLACKBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsSLACKParamsBodyAO0
	var postChannelsSLACKParamsBodyAO0 models.ChannelParamsSLACK
	if err := swag.ReadJSON(raw, &postChannelsSLACKParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsSLACK = postChannelsSLACKParamsBodyAO0

	// PostChannelsSLACKParamsBodyAO1
	var postChannelsSLACKParamsBodyAO1 PostChannelsSLACKParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &postChannelsSLACKParamsBodyAO1); err != nil {
		return err
	}
	o.PostChannelsSLACKParamsBodyAllOf1 = postChannelsSLACKParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsSLACKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postChannelsSLACKParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsSLACK)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsSLACKParamsBodyAO0)

	postChannelsSLACKParamsBodyAO1, err := swag.WriteJSON(o.PostChannelsSLACKParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsSLACKParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels SLA c k body
func (o *PostChannelsSLACKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsSLACK
	if err := o.ChannelParamsSLACK.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostChannelsSLACKParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsSLACKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsSLACKBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsSLACKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsSLACKForbiddenBody post channels SLA c k forbidden body
// swagger:model PostChannelsSLACKForbiddenBody
type PostChannelsSLACKForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsSLACKForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsSLACKForbiddenBodyAO0
	var postChannelsSLACKForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &postChannelsSLACKForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = postChannelsSLACKForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsSLACKForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsSLACKForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsSLACKForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels SLA c k forbidden body
func (o *PostChannelsSLACKForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsSLACKForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsSLACKForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsSLACKForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsSLACKMethodNotAllowedBody post channels SLA c k method not allowed body
// swagger:model PostChannelsSLACKMethodNotAllowedBody
type PostChannelsSLACKMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsSLACKMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsSLACKMethodNotAllowedBodyAO0
	var postChannelsSLACKMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postChannelsSLACKMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postChannelsSLACKMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsSLACKMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsSLACKMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsSLACKMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels SLA c k method not allowed body
func (o *PostChannelsSLACKMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsSLACKMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsSLACKMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsSLACKMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsSLACKOKBody post channels SLA c k o k body
// swagger:model PostChannelsSLACKOKBody
type PostChannelsSLACKOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemSLACK `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsSLACKOKBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsSLACKOKBodyAO0
	var postChannelsSLACKOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postChannelsSLACKOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postChannelsSLACKOKBodyAO0

	// PostChannelsSLACKOKBodyAO1
	var dataPostChannelsSLACKOKBodyAO1 struct {
		Data []*DataItemSLACK `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostChannelsSLACKOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostChannelsSLACKOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsSLACKOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postChannelsSLACKOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsSLACKOKBodyAO0)

	var dataPostChannelsSLACKOKBodyAO1 struct {
		Data []*DataItemSLACK `json:"data"`
	}

	dataPostChannelsSLACKOKBodyAO1.Data = o.Data

	jsonDataPostChannelsSLACKOKBodyAO1, errPostChannelsSLACKOKBodyAO1 := swag.WriteJSON(dataPostChannelsSLACKOKBodyAO1)
	if errPostChannelsSLACKOKBodyAO1 != nil {
		return nil, errPostChannelsSLACKOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostChannelsSLACKOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels SLA c k o k body
func (o *PostChannelsSLACKOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostChannelsSLACKOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postChannelsSlaCKOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsSLACKOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsSLACKOKBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsSLACKOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsSLACKParamsBodyAllOf1 post channels SLA c k params body all of1
// swagger:model PostChannelsSLACKParamsBodyAllOf1
type PostChannelsSLACKParamsBodyAllOf1 interface{}

// data-item-slack data item slack
// swagger:model data-item-slack
type DataItemSLACK struct {

	// Идентификатор канала
	ID string `json:"ID,omitempty"`

	// Тип канала
	Type string `json:"type,omitempty"`

	models.ChannelParamsSLACK
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItemSLACK) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Type = dataAO0.Type

	// AO1
	var aO1 models.ChannelParamsSLACK
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ChannelParamsSLACK = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItemSLACK) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.ChannelParamsSLACK)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data item slack
func (o *DataItemSLACK) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsSLACK
	if err := o.ChannelParamsSLACK.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItemSLACK) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItemSLACK) UnmarshalBinary(b []byte) error {
	var res DataItemSLACK
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
