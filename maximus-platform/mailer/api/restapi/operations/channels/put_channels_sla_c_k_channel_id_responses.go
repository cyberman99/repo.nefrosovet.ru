// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// PutChannelsSLACKChannelIDOKCode is the HTTP code returned for type PutChannelsSLACKChannelIDOK
const PutChannelsSLACKChannelIDOKCode int = 200

/*PutChannelsSLACKChannelIDOK Коллекция каналов

swagger:response putChannelsSlaCKChannelIdOK
*/
type PutChannelsSLACKChannelIDOK struct {

	/*
	  In: Body
	*/
	Payload *PutChannelsSLACKChannelIDOKBody `json:"body,omitempty"`
}

// NewPutChannelsSLACKChannelIDOK creates PutChannelsSLACKChannelIDOK with default headers values
func NewPutChannelsSLACKChannelIDOK() *PutChannelsSLACKChannelIDOK {

	return &PutChannelsSLACKChannelIDOK{}
}

// WithPayload adds the payload to the put channels Sla c k channel Id o k response
func (o *PutChannelsSLACKChannelIDOK) WithPayload(payload *PutChannelsSLACKChannelIDOKBody) *PutChannelsSLACKChannelIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put channels Sla c k channel Id o k response
func (o *PutChannelsSLACKChannelIDOK) SetPayload(payload *PutChannelsSLACKChannelIDOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutChannelsSLACKChannelIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutChannelsSLACKChannelIDBadRequestCode is the HTTP code returned for type PutChannelsSLACKChannelIDBadRequest
const PutChannelsSLACKChannelIDBadRequestCode int = 400

/*PutChannelsSLACKChannelIDBadRequest Validation error

swagger:response putChannelsSlaCKChannelIdBadRequest
*/
type PutChannelsSLACKChannelIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *PutChannelsSLACKChannelIDBadRequestBody `json:"body,omitempty"`
}

// NewPutChannelsSLACKChannelIDBadRequest creates PutChannelsSLACKChannelIDBadRequest with default headers values
func NewPutChannelsSLACKChannelIDBadRequest() *PutChannelsSLACKChannelIDBadRequest {

	return &PutChannelsSLACKChannelIDBadRequest{}
}

// WithPayload adds the payload to the put channels Sla c k channel Id bad request response
func (o *PutChannelsSLACKChannelIDBadRequest) WithPayload(payload *PutChannelsSLACKChannelIDBadRequestBody) *PutChannelsSLACKChannelIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put channels Sla c k channel Id bad request response
func (o *PutChannelsSLACKChannelIDBadRequest) SetPayload(payload *PutChannelsSLACKChannelIDBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutChannelsSLACKChannelIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutChannelsSLACKChannelIDForbiddenCode is the HTTP code returned for type PutChannelsSLACKChannelIDForbidden
const PutChannelsSLACKChannelIDForbiddenCode int = 403

/*PutChannelsSLACKChannelIDForbidden Forbidden

swagger:response putChannelsSlaCKChannelIdForbidden
*/
type PutChannelsSLACKChannelIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *PutChannelsSLACKChannelIDForbiddenBody `json:"body,omitempty"`
}

// NewPutChannelsSLACKChannelIDForbidden creates PutChannelsSLACKChannelIDForbidden with default headers values
func NewPutChannelsSLACKChannelIDForbidden() *PutChannelsSLACKChannelIDForbidden {

	return &PutChannelsSLACKChannelIDForbidden{}
}

// WithPayload adds the payload to the put channels Sla c k channel Id forbidden response
func (o *PutChannelsSLACKChannelIDForbidden) WithPayload(payload *PutChannelsSLACKChannelIDForbiddenBody) *PutChannelsSLACKChannelIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put channels Sla c k channel Id forbidden response
func (o *PutChannelsSLACKChannelIDForbidden) SetPayload(payload *PutChannelsSLACKChannelIDForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutChannelsSLACKChannelIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutChannelsSLACKChannelIDNotFoundCode is the HTTP code returned for type PutChannelsSLACKChannelIDNotFound
const PutChannelsSLACKChannelIDNotFoundCode int = 404

/*PutChannelsSLACKChannelIDNotFound Not found

swagger:response putChannelsSlaCKChannelIdNotFound
*/
type PutChannelsSLACKChannelIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *PutChannelsSLACKChannelIDNotFoundBody `json:"body,omitempty"`
}

// NewPutChannelsSLACKChannelIDNotFound creates PutChannelsSLACKChannelIDNotFound with default headers values
func NewPutChannelsSLACKChannelIDNotFound() *PutChannelsSLACKChannelIDNotFound {

	return &PutChannelsSLACKChannelIDNotFound{}
}

// WithPayload adds the payload to the put channels Sla c k channel Id not found response
func (o *PutChannelsSLACKChannelIDNotFound) WithPayload(payload *PutChannelsSLACKChannelIDNotFoundBody) *PutChannelsSLACKChannelIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put channels Sla c k channel Id not found response
func (o *PutChannelsSLACKChannelIDNotFound) SetPayload(payload *PutChannelsSLACKChannelIDNotFoundBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutChannelsSLACKChannelIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutChannelsSLACKChannelIDMethodNotAllowedCode is the HTTP code returned for type PutChannelsSLACKChannelIDMethodNotAllowed
const PutChannelsSLACKChannelIDMethodNotAllowedCode int = 405

/*PutChannelsSLACKChannelIDMethodNotAllowed Invalid Method

swagger:response putChannelsSlaCKChannelIdMethodNotAllowed
*/
type PutChannelsSLACKChannelIDMethodNotAllowed struct {

	/*
	  In: Body
	*/
	Payload *PutChannelsSLACKChannelIDMethodNotAllowedBody `json:"body,omitempty"`
}

// NewPutChannelsSLACKChannelIDMethodNotAllowed creates PutChannelsSLACKChannelIDMethodNotAllowed with default headers values
func NewPutChannelsSLACKChannelIDMethodNotAllowed() *PutChannelsSLACKChannelIDMethodNotAllowed {

	return &PutChannelsSLACKChannelIDMethodNotAllowed{}
}

// WithPayload adds the payload to the put channels Sla c k channel Id method not allowed response
func (o *PutChannelsSLACKChannelIDMethodNotAllowed) WithPayload(payload *PutChannelsSLACKChannelIDMethodNotAllowedBody) *PutChannelsSLACKChannelIDMethodNotAllowed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put channels Sla c k channel Id method not allowed response
func (o *PutChannelsSLACKChannelIDMethodNotAllowed) SetPayload(payload *PutChannelsSLACKChannelIDMethodNotAllowedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutChannelsSLACKChannelIDMethodNotAllowed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(405)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
