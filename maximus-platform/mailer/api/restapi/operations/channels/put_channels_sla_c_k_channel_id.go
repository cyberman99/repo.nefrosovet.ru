// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PutChannelsSLACKChannelIDHandlerFunc turns a function with the right signature into a put channels SLA c k channel ID handler
type PutChannelsSLACKChannelIDHandlerFunc func(PutChannelsSLACKChannelIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutChannelsSLACKChannelIDHandlerFunc) Handle(params PutChannelsSLACKChannelIDParams) middleware.Responder {
	return fn(params)
}

// PutChannelsSLACKChannelIDHandler interface for that can handle valid put channels SLA c k channel ID params
type PutChannelsSLACKChannelIDHandler interface {
	Handle(PutChannelsSLACKChannelIDParams) middleware.Responder
}

// NewPutChannelsSLACKChannelID creates a new http.Handler for the put channels SLA c k channel ID operation
func NewPutChannelsSLACKChannelID(ctx *middleware.Context, handler PutChannelsSLACKChannelIDHandler) *PutChannelsSLACKChannelID {
	return &PutChannelsSLACKChannelID{Context: ctx, Handler: handler}
}

/*PutChannelsSLACKChannelID swagger:route PUT /channels/slack/{channelID} Channels putChannelsSlaCKChannelId

Изменение Slack канала

*/
type PutChannelsSLACKChannelID struct {
	Context *middleware.Context
	Handler PutChannelsSLACKChannelIDHandler
}

func (o *PutChannelsSLACKChannelID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutChannelsSLACKChannelIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutChannelsSLACKChannelIDBadRequestBody put channels SLA c k channel ID bad request body
// swagger:model PutChannelsSLACKChannelIDBadRequestBody
type PutChannelsSLACKChannelIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsSLACKChannelIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsSLACKChannelIDBadRequestBodyAO0
	var putChannelsSLACKChannelIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putChannelsSLACKChannelIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putChannelsSLACKChannelIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsSLACKChannelIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsSLACKChannelIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsSLACKChannelIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels SLA c k channel ID bad request body
func (o *PutChannelsSLACKChannelIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsSLACKChannelIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsSLACKChannelIDBody put channels SLA c k channel ID body
// swagger:model PutChannelsSLACKChannelIDBody
type PutChannelsSLACKChannelIDBody struct {
	models.ChannelParamsSLACK

	PutChannelsSLACKChannelIDParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsSLACKChannelIDBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsSLACKChannelIDParamsBodyAO0
	var putChannelsSLACKChannelIDParamsBodyAO0 models.ChannelParamsSLACK
	if err := swag.ReadJSON(raw, &putChannelsSLACKChannelIDParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsSLACK = putChannelsSLACKChannelIDParamsBodyAO0

	// PutChannelsSLACKChannelIDParamsBodyAO1
	var putChannelsSLACKChannelIDParamsBodyAO1 PutChannelsSLACKChannelIDParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &putChannelsSLACKChannelIDParamsBodyAO1); err != nil {
		return err
	}
	o.PutChannelsSLACKChannelIDParamsBodyAllOf1 = putChannelsSLACKChannelIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsSLACKChannelIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsSLACKChannelIDParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsSLACK)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsSLACKChannelIDParamsBodyAO0)

	putChannelsSLACKChannelIDParamsBodyAO1, err := swag.WriteJSON(o.PutChannelsSLACKChannelIDParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsSLACKChannelIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels SLA c k channel ID body
func (o *PutChannelsSLACKChannelIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsSLACK
	if err := o.ChannelParamsSLACK.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PutChannelsSLACKChannelIDParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsSLACKChannelIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsSLACKChannelIDForbiddenBody put channels SLA c k channel ID forbidden body
// swagger:model PutChannelsSLACKChannelIDForbiddenBody
type PutChannelsSLACKChannelIDForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsSLACKChannelIDForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsSLACKChannelIDForbiddenBodyAO0
	var putChannelsSLACKChannelIDForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &putChannelsSLACKChannelIDForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = putChannelsSLACKChannelIDForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsSLACKChannelIDForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsSLACKChannelIDForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsSLACKChannelIDForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels SLA c k channel ID forbidden body
func (o *PutChannelsSLACKChannelIDForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsSLACKChannelIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsSLACKChannelIDMethodNotAllowedBody put channels SLA c k channel ID method not allowed body
// swagger:model PutChannelsSLACKChannelIDMethodNotAllowedBody
type PutChannelsSLACKChannelIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsSLACKChannelIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsSLACKChannelIDMethodNotAllowedBodyAO0
	var putChannelsSLACKChannelIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putChannelsSLACKChannelIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putChannelsSLACKChannelIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsSLACKChannelIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsSLACKChannelIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsSLACKChannelIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels SLA c k channel ID method not allowed body
func (o *PutChannelsSLACKChannelIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsSLACKChannelIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsSLACKChannelIDNotFoundBody put channels SLA c k channel ID not found body
// swagger:model PutChannelsSLACKChannelIDNotFoundBody
type PutChannelsSLACKChannelIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsSLACKChannelIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsSLACKChannelIDNotFoundBodyAO0
	var putChannelsSLACKChannelIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putChannelsSLACKChannelIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putChannelsSLACKChannelIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsSLACKChannelIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsSLACKChannelIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsSLACKChannelIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels SLA c k channel ID not found body
func (o *PutChannelsSLACKChannelIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsSLACKChannelIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsSLACKChannelIDOKBody put channels SLA c k channel ID o k body
// swagger:model PutChannelsSLACKChannelIDOKBody
type PutChannelsSLACKChannelIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemSLACK `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsSLACKChannelIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsSLACKChannelIDOKBodyAO0
	var putChannelsSLACKChannelIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putChannelsSLACKChannelIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putChannelsSLACKChannelIDOKBodyAO0

	// PutChannelsSLACKChannelIDOKBodyAO1
	var dataPutChannelsSLACKChannelIDOKBodyAO1 struct {
		Data []*DataItemSLACK `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutChannelsSLACKChannelIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutChannelsSLACKChannelIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsSLACKChannelIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsSLACKChannelIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsSLACKChannelIDOKBodyAO0)

	var dataPutChannelsSLACKChannelIDOKBodyAO1 struct {
		Data []*DataItemSLACK `json:"data"`
	}

	dataPutChannelsSLACKChannelIDOKBodyAO1.Data = o.Data

	jsonDataPutChannelsSLACKChannelIDOKBodyAO1, errPutChannelsSLACKChannelIDOKBodyAO1 := swag.WriteJSON(dataPutChannelsSLACKChannelIDOKBodyAO1)
	if errPutChannelsSLACKChannelIDOKBodyAO1 != nil {
		return nil, errPutChannelsSLACKChannelIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutChannelsSLACKChannelIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels SLA c k channel ID o k body
func (o *PutChannelsSLACKChannelIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutChannelsSLACKChannelIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putChannelsSlaCKChannelIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsSLACKChannelIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsSLACKChannelIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsSLACKChannelIDParamsBodyAllOf1 put channels SLA c k channel ID params body all of1
// swagger:model PutChannelsSLACKChannelIDParamsBodyAllOf1
type PutChannelsSLACKChannelIDParamsBodyAllOf1 interface{}
