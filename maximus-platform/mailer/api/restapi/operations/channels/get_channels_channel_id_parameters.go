// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetChannelsChannelIDParams creates a new GetChannelsChannelIDParams object
// no default values defined in spec.
func NewGetChannelsChannelIDParams() GetChannelsChannelIDParams {

	return GetChannelsChannelIDParams{}
}

// GetChannelsChannelIDParams contains all the bound params for the get channels channel ID operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetChannelsChannelID
type GetChannelsChannelIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Токен доступа
	  Required: true
	  In: query
	*/
	AccessToken string
	/*Идентификатор канала
	  Required: true
	  In: path
	*/
	ChannelID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetChannelsChannelIDParams() beforehand.
func (o *GetChannelsChannelIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAccessToken, qhkAccessToken, _ := qs.GetOK("accessToken")
	if err := o.bindAccessToken(qAccessToken, qhkAccessToken, route.Formats); err != nil {
		res = append(res, err)
	}

	rChannelID, rhkChannelID, _ := route.Params.GetOK("channelID")
	if err := o.bindChannelID(rChannelID, rhkChannelID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAccessToken binds and validates parameter AccessToken from query.
func (o *GetChannelsChannelIDParams) bindAccessToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("accessToken", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("accessToken", "query", raw); err != nil {
		return err
	}

	o.AccessToken = raw

	return nil
}

// bindChannelID binds and validates parameter ChannelID from path.
func (o *GetChannelsChannelIDParams) bindChannelID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ChannelID = raw

	return nil
}
