// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PostChannelsEmailHandlerFunc turns a function with the right signature into a post channels email handler
type PostChannelsEmailHandlerFunc func(PostChannelsEmailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostChannelsEmailHandlerFunc) Handle(params PostChannelsEmailParams) middleware.Responder {
	return fn(params)
}

// PostChannelsEmailHandler interface for that can handle valid post channels email params
type PostChannelsEmailHandler interface {
	Handle(PostChannelsEmailParams) middleware.Responder
}

// NewPostChannelsEmail creates a new http.Handler for the post channels email operation
func NewPostChannelsEmail(ctx *middleware.Context, handler PostChannelsEmailHandler) *PostChannelsEmail {
	return &PostChannelsEmail{Context: ctx, Handler: handler}
}

/*PostChannelsEmail swagger:route POST /channels/email Channels postChannelsEmail

Создание e-mail канала

*/
type PostChannelsEmail struct {
	Context *middleware.Context
	Handler PostChannelsEmailHandler
}

func (o *PostChannelsEmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostChannelsEmailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostChannelsEmailBadRequestBody post channels email bad request body
// swagger:model PostChannelsEmailBadRequestBody
type PostChannelsEmailBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsEmailBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsEmailBadRequestBodyAO0
	var postChannelsEmailBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postChannelsEmailBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postChannelsEmailBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsEmailBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsEmailBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsEmailBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels email bad request body
func (o *PostChannelsEmailBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsEmailBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsEmailBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsEmailBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsEmailBody post channels email body
// swagger:model PostChannelsEmailBody
type PostChannelsEmailBody struct {
	models.ChannelParamsMail

	PostChannelsEmailParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsEmailBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsEmailParamsBodyAO0
	var postChannelsEmailParamsBodyAO0 models.ChannelParamsMail
	if err := swag.ReadJSON(raw, &postChannelsEmailParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsMail = postChannelsEmailParamsBodyAO0

	// PostChannelsEmailParamsBodyAO1
	var postChannelsEmailParamsBodyAO1 PostChannelsEmailParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &postChannelsEmailParamsBodyAO1); err != nil {
		return err
	}
	o.PostChannelsEmailParamsBodyAllOf1 = postChannelsEmailParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsEmailBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postChannelsEmailParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsMail)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsEmailParamsBodyAO0)

	postChannelsEmailParamsBodyAO1, err := swag.WriteJSON(o.PostChannelsEmailParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsEmailParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels email body
func (o *PostChannelsEmailBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsMail
	if err := o.ChannelParamsMail.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostChannelsEmailParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsEmailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsEmailBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsEmailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsEmailForbiddenBody post channels email forbidden body
// swagger:model PostChannelsEmailForbiddenBody
type PostChannelsEmailForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsEmailForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsEmailForbiddenBodyAO0
	var postChannelsEmailForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &postChannelsEmailForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = postChannelsEmailForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsEmailForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsEmailForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsEmailForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels email forbidden body
func (o *PostChannelsEmailForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsEmailForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsEmailForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsEmailForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsEmailMethodNotAllowedBody post channels email method not allowed body
// swagger:model PostChannelsEmailMethodNotAllowedBody
type PostChannelsEmailMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsEmailMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsEmailMethodNotAllowedBodyAO0
	var postChannelsEmailMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postChannelsEmailMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postChannelsEmailMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsEmailMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsEmailMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsEmailMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels email method not allowed body
func (o *PostChannelsEmailMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsEmailMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsEmailMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsEmailMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsEmailOKBody post channels email o k body
// swagger:model PostChannelsEmailOKBody
type PostChannelsEmailOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemEmail `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsEmailOKBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsEmailOKBodyAO0
	var postChannelsEmailOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postChannelsEmailOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postChannelsEmailOKBodyAO0

	// PostChannelsEmailOKBodyAO1
	var dataPostChannelsEmailOKBodyAO1 struct {
		Data []*DataItemEmail `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostChannelsEmailOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostChannelsEmailOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsEmailOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postChannelsEmailOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsEmailOKBodyAO0)

	var dataPostChannelsEmailOKBodyAO1 struct {
		Data []*DataItemEmail `json:"data"`
	}

	dataPostChannelsEmailOKBodyAO1.Data = o.Data

	jsonDataPostChannelsEmailOKBodyAO1, errPostChannelsEmailOKBodyAO1 := swag.WriteJSON(dataPostChannelsEmailOKBodyAO1)
	if errPostChannelsEmailOKBodyAO1 != nil {
		return nil, errPostChannelsEmailOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostChannelsEmailOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels email o k body
func (o *PostChannelsEmailOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostChannelsEmailOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postChannelsEmailOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsEmailOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsEmailOKBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsEmailOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsEmailParamsBodyAllOf1 post channels email params body all of1
// swagger:model PostChannelsEmailParamsBodyAllOf1
type PostChannelsEmailParamsBodyAllOf1 interface{}

// data-item-email data item email
// swagger:model data-item-email
type DataItemEmail struct {

	// Идентификатор канала
	ID string `json:"ID,omitempty"`

	// Тип канала
	Type string `json:"type,omitempty"`

	models.ChannelParamsMail
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItemEmail) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Type = dataAO0.Type

	// AO1
	var aO1 models.ChannelParamsMail
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ChannelParamsMail = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItemEmail) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.ChannelParamsMail)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data item email
func (o *DataItemEmail) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsMail
	if err := o.ChannelParamsMail.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItemEmail) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItemEmail) UnmarshalBinary(b []byte) error {
	var res DataItemEmail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
