// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PutChannelsTelegramChannelIDHandlerFunc turns a function with the right signature into a put channels telegram channel ID handler
type PutChannelsTelegramChannelIDHandlerFunc func(PutChannelsTelegramChannelIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutChannelsTelegramChannelIDHandlerFunc) Handle(params PutChannelsTelegramChannelIDParams) middleware.Responder {
	return fn(params)
}

// PutChannelsTelegramChannelIDHandler interface for that can handle valid put channels telegram channel ID params
type PutChannelsTelegramChannelIDHandler interface {
	Handle(PutChannelsTelegramChannelIDParams) middleware.Responder
}

// NewPutChannelsTelegramChannelID creates a new http.Handler for the put channels telegram channel ID operation
func NewPutChannelsTelegramChannelID(ctx *middleware.Context, handler PutChannelsTelegramChannelIDHandler) *PutChannelsTelegramChannelID {
	return &PutChannelsTelegramChannelID{Context: ctx, Handler: handler}
}

/*PutChannelsTelegramChannelID swagger:route PUT /channels/telegram/{channelID} Channels putChannelsTelegramChannelId

Изменение Telegram канала

*/
type PutChannelsTelegramChannelID struct {
	Context *middleware.Context
	Handler PutChannelsTelegramChannelIDHandler
}

func (o *PutChannelsTelegramChannelID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutChannelsTelegramChannelIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutChannelsTelegramChannelIDBadRequestBody put channels telegram channel ID bad request body
// swagger:model PutChannelsTelegramChannelIDBadRequestBody
type PutChannelsTelegramChannelIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsTelegramChannelIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsTelegramChannelIDBadRequestBodyAO0
	var putChannelsTelegramChannelIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putChannelsTelegramChannelIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putChannelsTelegramChannelIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsTelegramChannelIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsTelegramChannelIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsTelegramChannelIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels telegram channel ID bad request body
func (o *PutChannelsTelegramChannelIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsTelegramChannelIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsTelegramChannelIDBody put channels telegram channel ID body
// swagger:model PutChannelsTelegramChannelIDBody
type PutChannelsTelegramChannelIDBody struct {
	models.ChannelParamsTelegram

	PutChannelsTelegramChannelIDParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsTelegramChannelIDBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsTelegramChannelIDParamsBodyAO0
	var putChannelsTelegramChannelIDParamsBodyAO0 models.ChannelParamsTelegram
	if err := swag.ReadJSON(raw, &putChannelsTelegramChannelIDParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsTelegram = putChannelsTelegramChannelIDParamsBodyAO0

	// PutChannelsTelegramChannelIDParamsBodyAO1
	var putChannelsTelegramChannelIDParamsBodyAO1 PutChannelsTelegramChannelIDParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &putChannelsTelegramChannelIDParamsBodyAO1); err != nil {
		return err
	}
	o.PutChannelsTelegramChannelIDParamsBodyAllOf1 = putChannelsTelegramChannelIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsTelegramChannelIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsTelegramChannelIDParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsTelegram)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsTelegramChannelIDParamsBodyAO0)

	putChannelsTelegramChannelIDParamsBodyAO1, err := swag.WriteJSON(o.PutChannelsTelegramChannelIDParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsTelegramChannelIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels telegram channel ID body
func (o *PutChannelsTelegramChannelIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsTelegram
	if err := o.ChannelParamsTelegram.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PutChannelsTelegramChannelIDParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsTelegramChannelIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsTelegramChannelIDForbiddenBody put channels telegram channel ID forbidden body
// swagger:model PutChannelsTelegramChannelIDForbiddenBody
type PutChannelsTelegramChannelIDForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsTelegramChannelIDForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsTelegramChannelIDForbiddenBodyAO0
	var putChannelsTelegramChannelIDForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &putChannelsTelegramChannelIDForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = putChannelsTelegramChannelIDForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsTelegramChannelIDForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsTelegramChannelIDForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsTelegramChannelIDForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels telegram channel ID forbidden body
func (o *PutChannelsTelegramChannelIDForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsTelegramChannelIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsTelegramChannelIDMethodNotAllowedBody put channels telegram channel ID method not allowed body
// swagger:model PutChannelsTelegramChannelIDMethodNotAllowedBody
type PutChannelsTelegramChannelIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsTelegramChannelIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsTelegramChannelIDMethodNotAllowedBodyAO0
	var putChannelsTelegramChannelIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putChannelsTelegramChannelIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putChannelsTelegramChannelIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsTelegramChannelIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsTelegramChannelIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsTelegramChannelIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels telegram channel ID method not allowed body
func (o *PutChannelsTelegramChannelIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsTelegramChannelIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsTelegramChannelIDNotFoundBody put channels telegram channel ID not found body
// swagger:model PutChannelsTelegramChannelIDNotFoundBody
type PutChannelsTelegramChannelIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsTelegramChannelIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsTelegramChannelIDNotFoundBodyAO0
	var putChannelsTelegramChannelIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putChannelsTelegramChannelIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putChannelsTelegramChannelIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsTelegramChannelIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsTelegramChannelIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsTelegramChannelIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels telegram channel ID not found body
func (o *PutChannelsTelegramChannelIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsTelegramChannelIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsTelegramChannelIDOKBody put channels telegram channel ID o k body
// swagger:model PutChannelsTelegramChannelIDOKBody
type PutChannelsTelegramChannelIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemTelegram `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsTelegramChannelIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsTelegramChannelIDOKBodyAO0
	var putChannelsTelegramChannelIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putChannelsTelegramChannelIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putChannelsTelegramChannelIDOKBodyAO0

	// PutChannelsTelegramChannelIDOKBodyAO1
	var dataPutChannelsTelegramChannelIDOKBodyAO1 struct {
		Data []*DataItemTelegram `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutChannelsTelegramChannelIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutChannelsTelegramChannelIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsTelegramChannelIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsTelegramChannelIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsTelegramChannelIDOKBodyAO0)

	var dataPutChannelsTelegramChannelIDOKBodyAO1 struct {
		Data []*DataItemTelegram `json:"data"`
	}

	dataPutChannelsTelegramChannelIDOKBodyAO1.Data = o.Data

	jsonDataPutChannelsTelegramChannelIDOKBodyAO1, errPutChannelsTelegramChannelIDOKBodyAO1 := swag.WriteJSON(dataPutChannelsTelegramChannelIDOKBodyAO1)
	if errPutChannelsTelegramChannelIDOKBodyAO1 != nil {
		return nil, errPutChannelsTelegramChannelIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutChannelsTelegramChannelIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels telegram channel ID o k body
func (o *PutChannelsTelegramChannelIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutChannelsTelegramChannelIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putChannelsTelegramChannelIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsTelegramChannelIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsTelegramChannelIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsTelegramChannelIDParamsBodyAllOf1 put channels telegram channel ID params body all of1
// swagger:model PutChannelsTelegramChannelIDParamsBodyAllOf1
type PutChannelsTelegramChannelIDParamsBodyAllOf1 interface{}
