// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// GetChannelsHandlerFunc turns a function with the right signature into a get channels handler
type GetChannelsHandlerFunc func(GetChannelsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChannelsHandlerFunc) Handle(params GetChannelsParams) middleware.Responder {
	return fn(params)
}

// GetChannelsHandler interface for that can handle valid get channels params
type GetChannelsHandler interface {
	Handle(GetChannelsParams) middleware.Responder
}

// NewGetChannels creates a new http.Handler for the get channels operation
func NewGetChannels(ctx *middleware.Context, handler GetChannelsHandler) *GetChannels {
	return &GetChannels{Context: ctx, Handler: handler}
}

/*GetChannels swagger:route GET /channels Channels getChannels

Коллекция каналов

*/
type GetChannels struct {
	Context *middleware.Context
	Handler GetChannelsHandler
}

func (o *GetChannels) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetChannelsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetChannelsForbiddenBody get channels forbidden body
// swagger:model GetChannelsForbiddenBody
type GetChannelsForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetChannelsForbiddenBody) UnmarshalJSON(raw []byte) error {
	// GetChannelsForbiddenBodyAO0
	var getChannelsForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &getChannelsForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = getChannelsForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetChannelsForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getChannelsForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getChannelsForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get channels forbidden body
func (o *GetChannelsForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetChannelsForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetChannelsForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetChannelsForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetChannelsOKBody get channels o k body
// swagger:model GetChannelsOKBody
type GetChannelsOKBody struct {
	models.SuccessData

	// data
	// Required: true
	Data []interface{} `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetChannelsOKBody) UnmarshalJSON(raw []byte) error {
	// GetChannelsOKBodyAO0
	var getChannelsOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getChannelsOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getChannelsOKBodyAO0

	// GetChannelsOKBodyAO1
	var dataGetChannelsOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetChannelsOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetChannelsOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetChannelsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getChannelsOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getChannelsOKBodyAO0)

	var dataGetChannelsOKBodyAO1 struct {
		Data []interface{} `json:"data"`
	}

	dataGetChannelsOKBodyAO1.Data = o.Data

	jsonDataGetChannelsOKBodyAO1, errGetChannelsOKBodyAO1 := swag.WriteJSON(dataGetChannelsOKBodyAO1)
	if errGetChannelsOKBodyAO1 != nil {
		return nil, errGetChannelsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetChannelsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get channels o k body
func (o *GetChannelsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetChannelsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getChannelsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetChannelsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetChannelsOKBody) UnmarshalBinary(b []byte) error {
	var res GetChannelsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
