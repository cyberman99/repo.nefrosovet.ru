// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PutChannelsLocalSmsChannelIDHandlerFunc turns a function with the right signature into a put channels local sms channel ID handler
type PutChannelsLocalSmsChannelIDHandlerFunc func(PutChannelsLocalSmsChannelIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutChannelsLocalSmsChannelIDHandlerFunc) Handle(params PutChannelsLocalSmsChannelIDParams) middleware.Responder {
	return fn(params)
}

// PutChannelsLocalSmsChannelIDHandler interface for that can handle valid put channels local sms channel ID params
type PutChannelsLocalSmsChannelIDHandler interface {
	Handle(PutChannelsLocalSmsChannelIDParams) middleware.Responder
}

// NewPutChannelsLocalSmsChannelID creates a new http.Handler for the put channels local sms channel ID operation
func NewPutChannelsLocalSmsChannelID(ctx *middleware.Context, handler PutChannelsLocalSmsChannelIDHandler) *PutChannelsLocalSmsChannelID {
	return &PutChannelsLocalSmsChannelID{Context: ctx, Handler: handler}
}

/*PutChannelsLocalSmsChannelID swagger:route PUT /channels/local_sms/{channelID} Channels putChannelsLocalSmsChannelId

Изменение Local SMS канала

*/
type PutChannelsLocalSmsChannelID struct {
	Context *middleware.Context
	Handler PutChannelsLocalSmsChannelIDHandler
}

func (o *PutChannelsLocalSmsChannelID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutChannelsLocalSmsChannelIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutChannelsLocalSmsChannelIDBadRequestBody put channels local sms channel ID bad request body
// swagger:model PutChannelsLocalSmsChannelIDBadRequestBody
type PutChannelsLocalSmsChannelIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsLocalSmsChannelIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsLocalSmsChannelIDBadRequestBodyAO0
	var putChannelsLocalSmsChannelIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putChannelsLocalSmsChannelIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putChannelsLocalSmsChannelIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsLocalSmsChannelIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsLocalSmsChannelIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsLocalSmsChannelIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels local sms channel ID bad request body
func (o *PutChannelsLocalSmsChannelIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsLocalSmsChannelIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsLocalSmsChannelIDBody put channels local sms channel ID body
// swagger:model PutChannelsLocalSmsChannelIDBody
type PutChannelsLocalSmsChannelIDBody struct {
	models.ChannelParamsLocalSms

	PutChannelsLocalSmsChannelIDParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsLocalSmsChannelIDBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsLocalSmsChannelIDParamsBodyAO0
	var putChannelsLocalSmsChannelIDParamsBodyAO0 models.ChannelParamsLocalSms
	if err := swag.ReadJSON(raw, &putChannelsLocalSmsChannelIDParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsLocalSms = putChannelsLocalSmsChannelIDParamsBodyAO0

	// PutChannelsLocalSmsChannelIDParamsBodyAO1
	var putChannelsLocalSmsChannelIDParamsBodyAO1 PutChannelsLocalSmsChannelIDParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &putChannelsLocalSmsChannelIDParamsBodyAO1); err != nil {
		return err
	}
	o.PutChannelsLocalSmsChannelIDParamsBodyAllOf1 = putChannelsLocalSmsChannelIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsLocalSmsChannelIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsLocalSmsChannelIDParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsLocalSms)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsLocalSmsChannelIDParamsBodyAO0)

	putChannelsLocalSmsChannelIDParamsBodyAO1, err := swag.WriteJSON(o.PutChannelsLocalSmsChannelIDParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsLocalSmsChannelIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels local sms channel ID body
func (o *PutChannelsLocalSmsChannelIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsLocalSms
	if err := o.ChannelParamsLocalSms.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PutChannelsLocalSmsChannelIDParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsLocalSmsChannelIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsLocalSmsChannelIDForbiddenBody put channels local sms channel ID forbidden body
// swagger:model PutChannelsLocalSmsChannelIDForbiddenBody
type PutChannelsLocalSmsChannelIDForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsLocalSmsChannelIDForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsLocalSmsChannelIDForbiddenBodyAO0
	var putChannelsLocalSmsChannelIDForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &putChannelsLocalSmsChannelIDForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = putChannelsLocalSmsChannelIDForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsLocalSmsChannelIDForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsLocalSmsChannelIDForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsLocalSmsChannelIDForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels local sms channel ID forbidden body
func (o *PutChannelsLocalSmsChannelIDForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsLocalSmsChannelIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsLocalSmsChannelIDMethodNotAllowedBody put channels local sms channel ID method not allowed body
// swagger:model PutChannelsLocalSmsChannelIDMethodNotAllowedBody
type PutChannelsLocalSmsChannelIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsLocalSmsChannelIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsLocalSmsChannelIDMethodNotAllowedBodyAO0
	var putChannelsLocalSmsChannelIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putChannelsLocalSmsChannelIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putChannelsLocalSmsChannelIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsLocalSmsChannelIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsLocalSmsChannelIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsLocalSmsChannelIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels local sms channel ID method not allowed body
func (o *PutChannelsLocalSmsChannelIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsLocalSmsChannelIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsLocalSmsChannelIDNotFoundBody put channels local sms channel ID not found body
// swagger:model PutChannelsLocalSmsChannelIDNotFoundBody
type PutChannelsLocalSmsChannelIDNotFoundBody struct {
	models.Error404Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsLocalSmsChannelIDNotFoundBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsLocalSmsChannelIDNotFoundBodyAO0
	var putChannelsLocalSmsChannelIDNotFoundBodyAO0 models.Error404Data
	if err := swag.ReadJSON(raw, &putChannelsLocalSmsChannelIDNotFoundBodyAO0); err != nil {
		return err
	}
	o.Error404Data = putChannelsLocalSmsChannelIDNotFoundBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsLocalSmsChannelIDNotFoundBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putChannelsLocalSmsChannelIDNotFoundBodyAO0, err := swag.WriteJSON(o.Error404Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsLocalSmsChannelIDNotFoundBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels local sms channel ID not found body
func (o *PutChannelsLocalSmsChannelIDNotFoundBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error404Data
	if err := o.Error404Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsLocalSmsChannelIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsLocalSmsChannelIDOKBody put channels local sms channel ID o k body
// swagger:model PutChannelsLocalSmsChannelIDOKBody
type PutChannelsLocalSmsChannelIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemLocalSms `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutChannelsLocalSmsChannelIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutChannelsLocalSmsChannelIDOKBodyAO0
	var putChannelsLocalSmsChannelIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putChannelsLocalSmsChannelIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putChannelsLocalSmsChannelIDOKBodyAO0

	// PutChannelsLocalSmsChannelIDOKBodyAO1
	var dataPutChannelsLocalSmsChannelIDOKBodyAO1 struct {
		Data []*DataItemLocalSms `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutChannelsLocalSmsChannelIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutChannelsLocalSmsChannelIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutChannelsLocalSmsChannelIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putChannelsLocalSmsChannelIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putChannelsLocalSmsChannelIDOKBodyAO0)

	var dataPutChannelsLocalSmsChannelIDOKBodyAO1 struct {
		Data []*DataItemLocalSms `json:"data"`
	}

	dataPutChannelsLocalSmsChannelIDOKBodyAO1.Data = o.Data

	jsonDataPutChannelsLocalSmsChannelIDOKBodyAO1, errPutChannelsLocalSmsChannelIDOKBodyAO1 := swag.WriteJSON(dataPutChannelsLocalSmsChannelIDOKBodyAO1)
	if errPutChannelsLocalSmsChannelIDOKBodyAO1 != nil {
		return nil, errPutChannelsLocalSmsChannelIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutChannelsLocalSmsChannelIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put channels local sms channel ID o k body
func (o *PutChannelsLocalSmsChannelIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutChannelsLocalSmsChannelIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putChannelsLocalSmsChannelIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutChannelsLocalSmsChannelIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutChannelsLocalSmsChannelIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutChannelsLocalSmsChannelIDParamsBodyAllOf1 put channels local sms channel ID params body all of1
// swagger:model PutChannelsLocalSmsChannelIDParamsBodyAllOf1
type PutChannelsLocalSmsChannelIDParamsBodyAllOf1 interface{}
