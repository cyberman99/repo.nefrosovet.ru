// Code generated by go-swagger; DO NOT EDIT.

package channels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PostChannelsViberHandlerFunc turns a function with the right signature into a post channels viber handler
type PostChannelsViberHandlerFunc func(PostChannelsViberParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostChannelsViberHandlerFunc) Handle(params PostChannelsViberParams) middleware.Responder {
	return fn(params)
}

// PostChannelsViberHandler interface for that can handle valid post channels viber params
type PostChannelsViberHandler interface {
	Handle(PostChannelsViberParams) middleware.Responder
}

// NewPostChannelsViber creates a new http.Handler for the post channels viber operation
func NewPostChannelsViber(ctx *middleware.Context, handler PostChannelsViberHandler) *PostChannelsViber {
	return &PostChannelsViber{Context: ctx, Handler: handler}
}

/*PostChannelsViber swagger:route POST /channels/viber Channels postChannelsViber

Создание Viber канала

*/
type PostChannelsViber struct {
	Context *middleware.Context
	Handler PostChannelsViberHandler
}

func (o *PostChannelsViber) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostChannelsViberParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostChannelsViberBadRequestBody post channels viber bad request body
// swagger:model PostChannelsViberBadRequestBody
type PostChannelsViberBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsViberBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsViberBadRequestBodyAO0
	var postChannelsViberBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postChannelsViberBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postChannelsViberBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsViberBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsViberBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsViberBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels viber bad request body
func (o *PostChannelsViberBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsViberBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsViberBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsViberBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsViberBody post channels viber body
// swagger:model PostChannelsViberBody
type PostChannelsViberBody struct {
	models.ChannelParamsViber
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsViberBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsViberParamsBodyAO0
	var postChannelsViberParamsBodyAO0 models.ChannelParamsViber
	if err := swag.ReadJSON(raw, &postChannelsViberParamsBodyAO0); err != nil {
		return err
	}
	o.ChannelParamsViber = postChannelsViberParamsBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsViberBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsViberParamsBodyAO0, err := swag.WriteJSON(o.ChannelParamsViber)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsViberParamsBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels viber body
func (o *PostChannelsViberBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsViber
	if err := o.ChannelParamsViber.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsViberBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsViberBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsViberBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsViberForbiddenBody post channels viber forbidden body
// swagger:model PostChannelsViberForbiddenBody
type PostChannelsViberForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsViberForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsViberForbiddenBodyAO0
	var postChannelsViberForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &postChannelsViberForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = postChannelsViberForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsViberForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsViberForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsViberForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels viber forbidden body
func (o *PostChannelsViberForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsViberForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsViberForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsViberForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsViberMethodNotAllowedBody post channels viber method not allowed body
// swagger:model PostChannelsViberMethodNotAllowedBody
type PostChannelsViberMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsViberMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsViberMethodNotAllowedBodyAO0
	var postChannelsViberMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postChannelsViberMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postChannelsViberMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsViberMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postChannelsViberMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsViberMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels viber method not allowed body
func (o *PostChannelsViberMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsViberMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsViberMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsViberMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostChannelsViberOKBody post channels viber o k body
// swagger:model PostChannelsViberOKBody
type PostChannelsViberOKBody struct {
	models.SuccessData

	// data
	Data []*DataItemViber `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostChannelsViberOKBody) UnmarshalJSON(raw []byte) error {
	// PostChannelsViberOKBodyAO0
	var postChannelsViberOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postChannelsViberOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postChannelsViberOKBodyAO0

	// PostChannelsViberOKBodyAO1
	var dataPostChannelsViberOKBodyAO1 struct {
		Data []*DataItemViber `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostChannelsViberOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostChannelsViberOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostChannelsViberOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postChannelsViberOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postChannelsViberOKBodyAO0)

	var dataPostChannelsViberOKBodyAO1 struct {
		Data []*DataItemViber `json:"data"`
	}

	dataPostChannelsViberOKBodyAO1.Data = o.Data

	jsonDataPostChannelsViberOKBodyAO1, errPostChannelsViberOKBodyAO1 := swag.WriteJSON(dataPostChannelsViberOKBodyAO1)
	if errPostChannelsViberOKBodyAO1 != nil {
		return nil, errPostChannelsViberOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostChannelsViberOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post channels viber o k body
func (o *PostChannelsViberOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostChannelsViberOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postChannelsViberOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostChannelsViberOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostChannelsViberOKBody) UnmarshalBinary(b []byte) error {
	var res PostChannelsViberOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// data-item-viber data item viber
// swagger:model data-item-viber
type DataItemViber struct {

	// Идентификатор канала
	ID string `json:"ID,omitempty"`

	// Тип канала
	Type string `json:"type,omitempty"`

	models.ChannelParamsViber
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DataItemViber) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	o.ID = dataAO0.ID

	o.Type = dataAO0.Type

	// AO1
	var aO1 models.ChannelParamsViber
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	o.ChannelParamsViber = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DataItemViber) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		ID string `json:"ID,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO0.ID = o.ID

	dataAO0.Type = o.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(o.ChannelParamsViber)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this data item viber
func (o *DataItemViber) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ChannelParamsViber
	if err := o.ChannelParamsViber.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *DataItemViber) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DataItemViber) UnmarshalBinary(b []byte) error {
	var res DataItemViber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
