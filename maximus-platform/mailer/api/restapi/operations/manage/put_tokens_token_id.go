// Code generated by go-swagger; DO NOT EDIT.

package manage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PutTokensTokenIDHandlerFunc turns a function with the right signature into a put tokens token ID handler
type PutTokensTokenIDHandlerFunc func(PutTokensTokenIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutTokensTokenIDHandlerFunc) Handle(params PutTokensTokenIDParams) middleware.Responder {
	return fn(params)
}

// PutTokensTokenIDHandler interface for that can handle valid put tokens token ID params
type PutTokensTokenIDHandler interface {
	Handle(PutTokensTokenIDParams) middleware.Responder
}

// NewPutTokensTokenID creates a new http.Handler for the put tokens token ID operation
func NewPutTokensTokenID(ctx *middleware.Context, handler PutTokensTokenIDHandler) *PutTokensTokenID {
	return &PutTokensTokenID{Context: ctx, Handler: handler}
}

/*PutTokensTokenID swagger:route PUT /tokens/{tokenID} Manage putTokensTokenId

Изменение токена доступа

*/
type PutTokensTokenID struct {
	Context *middleware.Context
	Handler PutTokensTokenIDHandler
}

func (o *PutTokensTokenID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutTokensTokenIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutTokensTokenIDBadRequestBody put tokens token ID bad request body
// swagger:model PutTokensTokenIDBadRequestBody
type PutTokensTokenIDBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutTokensTokenIDBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PutTokensTokenIDBadRequestBodyAO0
	var putTokensTokenIDBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &putTokensTokenIDBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = putTokensTokenIDBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutTokensTokenIDBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putTokensTokenIDBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putTokensTokenIDBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put tokens token ID bad request body
func (o *PutTokensTokenIDBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutTokensTokenIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTokensTokenIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutTokensTokenIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTokensTokenIDBody put tokens token ID body
// swagger:model PutTokensTokenIDBody
type PutTokensTokenIDBody struct {
	models.TokenParams

	PutTokensTokenIDParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutTokensTokenIDBody) UnmarshalJSON(raw []byte) error {
	// PutTokensTokenIDParamsBodyAO0
	var putTokensTokenIDParamsBodyAO0 models.TokenParams
	if err := swag.ReadJSON(raw, &putTokensTokenIDParamsBodyAO0); err != nil {
		return err
	}
	o.TokenParams = putTokensTokenIDParamsBodyAO0

	// PutTokensTokenIDParamsBodyAO1
	var putTokensTokenIDParamsBodyAO1 PutTokensTokenIDParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &putTokensTokenIDParamsBodyAO1); err != nil {
		return err
	}
	o.PutTokensTokenIDParamsBodyAllOf1 = putTokensTokenIDParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutTokensTokenIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putTokensTokenIDParamsBodyAO0, err := swag.WriteJSON(o.TokenParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putTokensTokenIDParamsBodyAO0)

	putTokensTokenIDParamsBodyAO1, err := swag.WriteJSON(o.PutTokensTokenIDParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putTokensTokenIDParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put tokens token ID body
func (o *PutTokensTokenIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.TokenParams
	if err := o.TokenParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PutTokensTokenIDParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutTokensTokenIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTokensTokenIDBody) UnmarshalBinary(b []byte) error {
	var res PutTokensTokenIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTokensTokenIDForbiddenBody put tokens token ID forbidden body
// swagger:model PutTokensTokenIDForbiddenBody
type PutTokensTokenIDForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutTokensTokenIDForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PutTokensTokenIDForbiddenBodyAO0
	var putTokensTokenIDForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &putTokensTokenIDForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = putTokensTokenIDForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutTokensTokenIDForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putTokensTokenIDForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putTokensTokenIDForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put tokens token ID forbidden body
func (o *PutTokensTokenIDForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutTokensTokenIDForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTokensTokenIDForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutTokensTokenIDForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTokensTokenIDMethodNotAllowedBody put tokens token ID method not allowed body
// swagger:model PutTokensTokenIDMethodNotAllowedBody
type PutTokensTokenIDMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutTokensTokenIDMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PutTokensTokenIDMethodNotAllowedBodyAO0
	var putTokensTokenIDMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &putTokensTokenIDMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = putTokensTokenIDMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutTokensTokenIDMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	putTokensTokenIDMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putTokensTokenIDMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put tokens token ID method not allowed body
func (o *PutTokensTokenIDMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutTokensTokenIDMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTokensTokenIDMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PutTokensTokenIDMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTokensTokenIDOKBody put tokens token ID o k body
// swagger:model PutTokensTokenIDOKBody
type PutTokensTokenIDOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutTokensTokenIDOKBody) UnmarshalJSON(raw []byte) error {
	// PutTokensTokenIDOKBodyAO0
	var putTokensTokenIDOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &putTokensTokenIDOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = putTokensTokenIDOKBodyAO0

	// PutTokensTokenIDOKBodyAO1
	var dataPutTokensTokenIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPutTokensTokenIDOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPutTokensTokenIDOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutTokensTokenIDOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putTokensTokenIDOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putTokensTokenIDOKBodyAO0)

	var dataPutTokensTokenIDOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPutTokensTokenIDOKBodyAO1.Data = o.Data

	jsonDataPutTokensTokenIDOKBodyAO1, errPutTokensTokenIDOKBodyAO1 := swag.WriteJSON(dataPutTokensTokenIDOKBodyAO1)
	if errPutTokensTokenIDOKBodyAO1 != nil {
		return nil, errPutTokensTokenIDOKBodyAO1
	}
	_parts = append(_parts, jsonDataPutTokensTokenIDOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put tokens token ID o k body
func (o *PutTokensTokenIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutTokensTokenIDOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("putTokensTokenIdOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PutTokensTokenIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutTokensTokenIDOKBody) UnmarshalBinary(b []byte) error {
	var res PutTokensTokenIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutTokensTokenIDParamsBodyAllOf1 put tokens token ID params body all of1
// swagger:model PutTokensTokenIDParamsBodyAllOf1
type PutTokensTokenIDParamsBodyAllOf1 interface{}
