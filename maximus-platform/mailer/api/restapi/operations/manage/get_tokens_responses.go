// Code generated by go-swagger; DO NOT EDIT.

package manage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetTokensOKCode is the HTTP code returned for type GetTokensOK
const GetTokensOKCode int = 200

/*GetTokensOK Коллекция токенов

swagger:response getTokensOK
*/
type GetTokensOK struct {

	/*
	  In: Body
	*/
	Payload *GetTokensOKBody `json:"body,omitempty"`
}

// NewGetTokensOK creates GetTokensOK with default headers values
func NewGetTokensOK() *GetTokensOK {

	return &GetTokensOK{}
}

// WithPayload adds the payload to the get tokens o k response
func (o *GetTokensOK) WithPayload(payload *GetTokensOKBody) *GetTokensOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tokens o k response
func (o *GetTokensOK) SetPayload(payload *GetTokensOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTokensOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTokensForbiddenCode is the HTTP code returned for type GetTokensForbidden
const GetTokensForbiddenCode int = 403

/*GetTokensForbidden Forbidden

swagger:response getTokensForbidden
*/
type GetTokensForbidden struct {

	/*
	  In: Body
	*/
	Payload *GetTokensForbiddenBody `json:"body,omitempty"`
}

// NewGetTokensForbidden creates GetTokensForbidden with default headers values
func NewGetTokensForbidden() *GetTokensForbidden {

	return &GetTokensForbidden{}
}

// WithPayload adds the payload to the get tokens forbidden response
func (o *GetTokensForbidden) WithPayload(payload *GetTokensForbiddenBody) *GetTokensForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get tokens forbidden response
func (o *GetTokensForbidden) SetPayload(payload *GetTokensForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTokensForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
