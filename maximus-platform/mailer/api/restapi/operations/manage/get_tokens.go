// Code generated by go-swagger; DO NOT EDIT.

package manage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// GetTokensHandlerFunc turns a function with the right signature into a get tokens handler
type GetTokensHandlerFunc func(GetTokensParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTokensHandlerFunc) Handle(params GetTokensParams) middleware.Responder {
	return fn(params)
}

// GetTokensHandler interface for that can handle valid get tokens params
type GetTokensHandler interface {
	Handle(GetTokensParams) middleware.Responder
}

// NewGetTokens creates a new http.Handler for the get tokens operation
func NewGetTokens(ctx *middleware.Context, handler GetTokensHandler) *GetTokens {
	return &GetTokens{Context: ctx, Handler: handler}
}

/*GetTokens swagger:route GET /tokens Manage getTokens

Коллекция токенов

*/
type GetTokens struct {
	Context *middleware.Context
	Handler GetTokensHandler
}

func (o *GetTokens) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTokensParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetTokensForbiddenBody get tokens forbidden body
// swagger:model GetTokensForbiddenBody
type GetTokensForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetTokensForbiddenBody) UnmarshalJSON(raw []byte) error {
	// GetTokensForbiddenBodyAO0
	var getTokensForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &getTokensForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = getTokensForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetTokensForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	getTokensForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTokensForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get tokens forbidden body
func (o *GetTokensForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *GetTokensForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTokensForbiddenBody) UnmarshalBinary(b []byte) error {
	var res GetTokensForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetTokensOKBody get tokens o k body
// swagger:model GetTokensOKBody
type GetTokensOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetTokensOKBody) UnmarshalJSON(raw []byte) error {
	// GetTokensOKBodyAO0
	var getTokensOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &getTokensOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = getTokensOKBodyAO0

	// GetTokensOKBodyAO1
	var dataGetTokensOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataGetTokensOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataGetTokensOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetTokensOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getTokensOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getTokensOKBodyAO0)

	var dataGetTokensOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataGetTokensOKBodyAO1.Data = o.Data

	jsonDataGetTokensOKBodyAO1, errGetTokensOKBodyAO1 := swag.WriteJSON(dataGetTokensOKBodyAO1)
	if errGetTokensOKBodyAO1 != nil {
		return nil, errGetTokensOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetTokensOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get tokens o k body
func (o *GetTokensOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetTokensOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getTokensOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetTokensOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetTokensOKBody) UnmarshalBinary(b []byte) error {
	var res GetTokensOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
