// Code generated by go-swagger; DO NOT EDIT.

package manage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "repo.nefrosovet.ru/maximus-platform/mailer/api/models"
)

// PostTokensHandlerFunc turns a function with the right signature into a post tokens handler
type PostTokensHandlerFunc func(PostTokensParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTokensHandlerFunc) Handle(params PostTokensParams) middleware.Responder {
	return fn(params)
}

// PostTokensHandler interface for that can handle valid post tokens params
type PostTokensHandler interface {
	Handle(PostTokensParams) middleware.Responder
}

// NewPostTokens creates a new http.Handler for the post tokens operation
func NewPostTokens(ctx *middleware.Context, handler PostTokensHandler) *PostTokens {
	return &PostTokens{Context: ctx, Handler: handler}
}

/*PostTokens swagger:route POST /tokens Manage postTokens

Создание токена доступа

*/
type PostTokens struct {
	Context *middleware.Context
	Handler PostTokensHandler
}

func (o *PostTokens) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostTokensParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTokensBadRequestBody post tokens bad request body
// swagger:model PostTokensBadRequestBody
type PostTokensBadRequestBody struct {
	models.Error400Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostTokensBadRequestBody) UnmarshalJSON(raw []byte) error {
	// PostTokensBadRequestBodyAO0
	var postTokensBadRequestBodyAO0 models.Error400Data
	if err := swag.ReadJSON(raw, &postTokensBadRequestBodyAO0); err != nil {
		return err
	}
	o.Error400Data = postTokensBadRequestBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostTokensBadRequestBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postTokensBadRequestBodyAO0, err := swag.WriteJSON(o.Error400Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postTokensBadRequestBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post tokens bad request body
func (o *PostTokensBadRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error400Data
	if err := o.Error400Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokensBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokensBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostTokensBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokensBody post tokens body
// swagger:model PostTokensBody
type PostTokensBody struct {
	models.TokenParams

	PostTokensParamsBodyAllOf1
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostTokensBody) UnmarshalJSON(raw []byte) error {
	// PostTokensParamsBodyAO0
	var postTokensParamsBodyAO0 models.TokenParams
	if err := swag.ReadJSON(raw, &postTokensParamsBodyAO0); err != nil {
		return err
	}
	o.TokenParams = postTokensParamsBodyAO0

	// PostTokensParamsBodyAO1
	var postTokensParamsBodyAO1 PostTokensParamsBodyAllOf1
	if err := swag.ReadJSON(raw, &postTokensParamsBodyAO1); err != nil {
		return err
	}
	o.PostTokensParamsBodyAllOf1 = postTokensParamsBodyAO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostTokensBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postTokensParamsBodyAO0, err := swag.WriteJSON(o.TokenParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postTokensParamsBodyAO0)

	postTokensParamsBodyAO1, err := swag.WriteJSON(o.PostTokensParamsBodyAllOf1)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postTokensParamsBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post tokens body
func (o *PostTokensBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.TokenParams
	if err := o.TokenParams.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PostTokensParamsBodyAllOf1

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokensBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokensBody) UnmarshalBinary(b []byte) error {
	var res PostTokensBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokensForbiddenBody post tokens forbidden body
// swagger:model PostTokensForbiddenBody
type PostTokensForbiddenBody struct {
	models.Error403Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostTokensForbiddenBody) UnmarshalJSON(raw []byte) error {
	// PostTokensForbiddenBodyAO0
	var postTokensForbiddenBodyAO0 models.Error403Data
	if err := swag.ReadJSON(raw, &postTokensForbiddenBodyAO0); err != nil {
		return err
	}
	o.Error403Data = postTokensForbiddenBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostTokensForbiddenBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postTokensForbiddenBodyAO0, err := swag.WriteJSON(o.Error403Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postTokensForbiddenBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post tokens forbidden body
func (o *PostTokensForbiddenBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error403Data
	if err := o.Error403Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokensForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokensForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PostTokensForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokensMethodNotAllowedBody post tokens method not allowed body
// swagger:model PostTokensMethodNotAllowedBody
type PostTokensMethodNotAllowedBody struct {
	models.Error405Data
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostTokensMethodNotAllowedBody) UnmarshalJSON(raw []byte) error {
	// PostTokensMethodNotAllowedBodyAO0
	var postTokensMethodNotAllowedBodyAO0 models.Error405Data
	if err := swag.ReadJSON(raw, &postTokensMethodNotAllowedBodyAO0); err != nil {
		return err
	}
	o.Error405Data = postTokensMethodNotAllowedBodyAO0

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostTokensMethodNotAllowedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	postTokensMethodNotAllowedBodyAO0, err := swag.WriteJSON(o.Error405Data)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postTokensMethodNotAllowedBodyAO0)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post tokens method not allowed body
func (o *PostTokensMethodNotAllowedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Error405Data
	if err := o.Error405Data.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PostTokensMethodNotAllowedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokensMethodNotAllowedBody) UnmarshalBinary(b []byte) error {
	var res PostTokensMethodNotAllowedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokensOKBody post tokens o k body
// swagger:model PostTokensOKBody
type PostTokensOKBody struct {
	models.SuccessData

	// data
	Data []*DataItems0 `json:"data"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PostTokensOKBody) UnmarshalJSON(raw []byte) error {
	// PostTokensOKBodyAO0
	var postTokensOKBodyAO0 models.SuccessData
	if err := swag.ReadJSON(raw, &postTokensOKBodyAO0); err != nil {
		return err
	}
	o.SuccessData = postTokensOKBodyAO0

	// PostTokensOKBodyAO1
	var dataPostTokensOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}
	if err := swag.ReadJSON(raw, &dataPostTokensOKBodyAO1); err != nil {
		return err
	}

	o.Data = dataPostTokensOKBodyAO1.Data

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PostTokensOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	postTokensOKBodyAO0, err := swag.WriteJSON(o.SuccessData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, postTokensOKBodyAO0)

	var dataPostTokensOKBodyAO1 struct {
		Data []*DataItems0 `json:"data"`
	}

	dataPostTokensOKBodyAO1.Data = o.Data

	jsonDataPostTokensOKBodyAO1, errPostTokensOKBodyAO1 := swag.WriteJSON(dataPostTokensOKBodyAO1)
	if errPostTokensOKBodyAO1 != nil {
		return nil, errPostTokensOKBodyAO1
	}
	_parts = append(_parts, jsonDataPostTokensOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this post tokens o k body
func (o *PostTokensOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.SuccessData
	if err := o.SuccessData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTokensOKBody) validateData(formats strfmt.Registry) error {

	if swag.IsZero(o.Data) { // not required
		return nil
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("postTokensOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTokensOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTokensOKBody) UnmarshalBinary(b []byte) error {
	var res PostTokensOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTokensParamsBodyAllOf1 post tokens params body all of1
// swagger:model PostTokensParamsBodyAllOf1
type PostTokensParamsBodyAllOf1 interface{}
