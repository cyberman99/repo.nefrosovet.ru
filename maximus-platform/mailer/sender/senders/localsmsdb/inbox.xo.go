// Package local_sms_db contains the types for schema 'sms'.
package localsmsdb

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Inbox represents a row from 'sms.inbox'.
type Inbox struct {
	Updatedindb       time.Time `json:"UpdatedInDB"`       // UpdatedInDB
	Receivingdatetime time.Time `json:"ReceivingDateTime"` // ReceivingDateTime
	Text              string    `json:"Text"`              // Text
	Sendernumber      string    `json:"SenderNumber"`      // SenderNumber
	Coding            Coding    `json:"Coding"`            // Coding
	Udh               string    `json:"UDH"`               // UDH
	Smscnumber        string    `json:"SMSCNumber"`        // SMSCNumber
	Class             int       `json:"Class"`             // Class
	Textdecoded       string    `json:"TextDecoded"`       // TextDecoded
	ID                uint      `json:"ID"`                // ID
	Recipientid       string    `json:"RecipientID"`       // RecipientID
	Processed         Processed `json:"Processed"`         // Processed

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Inbox exists in the database.
func (i *Inbox) Exists() bool {
	return i._exists
}

// Deleted provides information if the Inbox has been deleted from the database.
func (i *Inbox) Deleted() bool {
	return i._deleted
}

// Insert inserts the Inbox to the database.
func (i *Inbox) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sms.inbox (` +
		`UpdatedInDB, ReceivingDateTime, Text, SenderNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, RecipientID, Processed` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, i.Updatedindb, i.Receivingdatetime, i.Text, i.Sendernumber, i.Coding, i.Udh, i.Smscnumber, i.Class, i.Textdecoded, i.Recipientid, i.Processed)
	res, err := db.Exec(sqlstr, i.Updatedindb, i.Receivingdatetime, i.Text, i.Sendernumber, i.Coding, i.Udh, i.Smscnumber, i.Class, i.Textdecoded, i.Recipientid, i.Processed)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	i.ID = uint(id)
	i._exists = true

	return nil
}

// Update updates the Inbox in the database.
func (i *Inbox) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sms.inbox SET ` +
		`UpdatedInDB = ?, ReceivingDateTime = ?, Text = ?, SenderNumber = ?, Coding = ?, UDH = ?, SMSCNumber = ?, Class = ?, TextDecoded = ?, RecipientID = ?, Processed = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, i.Updatedindb, i.Receivingdatetime, i.Text, i.Sendernumber, i.Coding, i.Udh, i.Smscnumber, i.Class, i.Textdecoded, i.Recipientid, i.Processed, i.ID)
	_, err = db.Exec(sqlstr, i.Updatedindb, i.Receivingdatetime, i.Text, i.Sendernumber, i.Coding, i.Udh, i.Smscnumber, i.Class, i.Textdecoded, i.Recipientid, i.Processed, i.ID)
	return err
}

// Save saves the Inbox to the database.
func (i *Inbox) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Delete deletes the Inbox from the database.
func (i *Inbox) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sms.inbox WHERE ID = ?`

	// run query
	XOLog(sqlstr, i.ID)
	_, err = db.Exec(sqlstr, i.ID)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// InboxByID retrieves a row from 'sms.inbox' as a Inbox.
//
// Generated from index 'inbox_ID_pkey'.
func InboxByID(db XODB, id uint) (*Inbox, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, ReceivingDateTime, Text, SenderNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, ID, RecipientID, Processed ` +
		`FROM sms.inbox ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	i := Inbox{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&i.Updatedindb, &i.Receivingdatetime, &i.Text, &i.Sendernumber, &i.Coding, &i.Udh, &i.Smscnumber, &i.Class, &i.Textdecoded, &i.ID, &i.Recipientid, &i.Processed)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
