// Package local_sms_db contains the types for schema 'sms'.
package localsmsdb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Phone represents a row from 'sms.phones'.
type Phone struct {
	ID           string         `json:"ID"`           // ID
	Updatedindb  time.Time      `json:"UpdatedInDB"`  // UpdatedInDB
	Insertintodb time.Time      `json:"InsertIntoDB"` // InsertIntoDB
	Timeout      time.Time      `json:"TimeOut"`      // TimeOut
	Send         Send           `json:"Send"`         // Send
	Receive      Receive        `json:"Receive"`      // Receive
	Imei         string         `json:"IMEI"`         // IMEI
	Imsi         string         `json:"IMSI"`         // IMSI
	Netcode      sql.NullString `json:"NetCode"`      // NetCode
	Netname      sql.NullString `json:"NetName"`      // NetName
	Client       string         `json:"Client"`       // Client
	Battery      int            `json:"Battery"`      // Battery
	Signal       int            `json:"Signal"`       // Signal
	Sent         int            `json:"Sent"`         // Sent
	Received     int            `json:"Received"`     // Received

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Phone exists in the database.
func (p *Phone) Exists() bool {
	return p._exists
}

// Deleted provides information if the Phone has been deleted from the database.
func (p *Phone) Deleted() bool {
	return p._deleted
}

// Insert inserts the Phone to the database.
func (p *Phone) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sms.phones (` +
		`ID, UpdatedInDB, InsertIntoDB, TimeOut, Send, Receive, IMEI, IMSI, NetCode, NetName, Client, Battery, Signal, Sent, Received` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, p.ID, p.Updatedindb, p.Insertintodb, p.Timeout, p.Send, p.Receive, p.Imei, p.Imsi, p.Netcode, p.Netname, p.Client, p.Battery, p.Signal, p.Sent, p.Received)
	_, err = db.Exec(sqlstr, p.ID, p.Updatedindb, p.Insertintodb, p.Timeout, p.Send, p.Receive, p.Imei, p.Imsi, p.Netcode, p.Netname, p.Client, p.Battery, p.Signal, p.Sent, p.Received)
	if err != nil {
		return err
	}

	// set existence
	p._exists = true

	return nil
}

// Update updates the Phone in the database.
func (p *Phone) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sms.phones SET ` +
		`ID = ?, UpdatedInDB = ?, InsertIntoDB = ?, TimeOut = ?, Send = ?, Receive = ?, IMSI = ?, NetCode = ?, NetName = ?, Client = ?, Battery = ?, Signal = ?, Sent = ?, Received = ?` +
		` WHERE IMEI = ?`

	// run query
	XOLog(sqlstr, p.ID, p.Updatedindb, p.Insertintodb, p.Timeout, p.Send, p.Receive, p.Imsi, p.Netcode, p.Netname, p.Client, p.Battery, p.Signal, p.Sent, p.Received, p.Imei)
	_, err = db.Exec(sqlstr, p.ID, p.Updatedindb, p.Insertintodb, p.Timeout, p.Send, p.Receive, p.Imsi, p.Netcode, p.Netname, p.Client, p.Battery, p.Signal, p.Sent, p.Received, p.Imei)
	return err
}

// Save saves the Phone to the database.
func (p *Phone) Save(db XODB) error {
	if p.Exists() {
		return p.Update(db)
	}

	return p.Insert(db)
}

// Delete deletes the Phone from the database.
func (p *Phone) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sms.phones WHERE IMEI = ?`

	// run query
	XOLog(sqlstr, p.Imei)
	_, err = db.Exec(sqlstr, p.Imei)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

// PhoneByImei retrieves a row from 'sms.phones' as a Phone.
//
// Generated from index 'phones_IMEI_pkey'.
func PhoneByImei(db XODB, imei string) (*Phone, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`ID, UpdatedInDB, InsertIntoDB, TimeOut, Send, Receive, IMEI, IMSI, NetCode, NetName, Client, Battery, Signal, Sent, Received ` +
		`FROM sms.phones ` +
		`WHERE IMEI = ?`

	// run query
	XOLog(sqlstr, imei)
	p := Phone{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, imei).Scan(&p.ID, &p.Updatedindb, &p.Insertintodb, &p.Timeout, &p.Send, &p.Receive, &p.Imei, &p.Imsi, &p.Netcode, &p.Netname, &p.Client, &p.Battery, &p.Signal, &p.Sent, &p.Received)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
