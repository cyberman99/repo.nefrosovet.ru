// Package local_sms_db contains the types for schema 'sms'.
package localsmsdb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Send is the 'Send' enum type from schema 'sms'.
type Send uint16

const (
	// SendYes is the 'yes' Send.
	SendYes = Send(1)

	// SendNo is the 'no' Send.
	SendNo = Send(2)
)

// String returns the string value of the Send.
func (s Send) String() string {
	var enumVal string

	switch s {
	case SendYes:
		enumVal = "yes"

	case SendNo:
		enumVal = "no"
	}

	return enumVal
}

// MarshalText marshals Send into text.
func (s Send) MarshalText() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalText unmarshals Send from text.
func (s *Send) UnmarshalText(text []byte) error {
	switch string(text) {
	case "yes":
		*s = SendYes

	case "no":
		*s = SendNo

	default:
		return errors.New("invalid Send")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Send.
func (s Send) Value() (driver.Value, error) {
	return s.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Send.
func (s *Send) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Send")
	}

	return s.UnmarshalText(buf)
}
