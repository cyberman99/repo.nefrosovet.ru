// Package local_sms_db contains the types for schema 'sms'.
package localsmsdb

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// Sentitem represents a row from 'sms.sentitems'.
type Sentitem struct {
	Updatedindb       time.Time      `json:"UpdatedInDB"`       // UpdatedInDB
	Insertintodb      time.Time      `json:"InsertIntoDB"`      // InsertIntoDB
	Sendingdatetime   time.Time      `json:"SendingDateTime"`   // SendingDateTime
	Deliverydatetime  mysql.NullTime `json:"DeliveryDateTime"`  // DeliveryDateTime
	Text              string         `json:"Text"`              // Text
	Destinationnumber string         `json:"DestinationNumber"` // DestinationNumber
	Coding            Coding         `json:"Coding"`            // Coding
	Udh               string         `json:"UDH"`               // UDH
	Smscnumber        string         `json:"SMSCNumber"`        // SMSCNumber
	Class             int            `json:"Class"`             // Class
	Textdecoded       string         `json:"TextDecoded"`       // TextDecoded
	ID                uint           `json:"ID"`                // ID
	Senderid          string         `json:"SenderID"`          // SenderID
	Sequenceposition  int            `json:"SequencePosition"`  // SequencePosition
	Status            Status         `json:"Status"`            // Status
	Statuserror       int            `json:"StatusError"`       // StatusError
	Tpmr              int            `json:"TPMR"`              // TPMR
	Relativevalidity  int            `json:"RelativeValidity"`  // RelativeValidity
	Creatorid         string         `json:"CreatorID"`         // CreatorID

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Sentitem exists in the database.
func (s *Sentitem) Exists() bool {
	return s._exists
}

// Deleted provides information if the Sentitem has been deleted from the database.
func (s *Sentitem) Deleted() bool {
	return s._deleted
}

// Insert inserts the Sentitem to the database.
func (s *Sentitem) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sms.sentitems (` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, DeliveryDateTime, Text, DestinationNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, ID, SenderID, SequencePosition, Status, StatusError, TPMR, RelativeValidity, CreatorID` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.Updatedindb, s.Insertintodb, s.Sendingdatetime, s.Deliverydatetime, s.Text, s.Destinationnumber, s.Coding, s.Udh, s.Smscnumber, s.Class, s.Textdecoded, s.ID, s.Senderid, s.Sequenceposition, s.Status, s.Statuserror, s.Tpmr, s.Relativevalidity, s.Creatorid)
	_, err = db.Exec(sqlstr, s.Updatedindb, s.Insertintodb, s.Sendingdatetime, s.Deliverydatetime, s.Text, s.Destinationnumber, s.Coding, s.Udh, s.Smscnumber, s.Class, s.Textdecoded, s.ID, s.Senderid, s.Sequenceposition, s.Status, s.Statuserror, s.Tpmr, s.Relativevalidity, s.Creatorid)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Sentitem in the database.
func (s *Sentitem) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE sms.sentitems SET ` +
		`UpdatedInDB = ?, InsertIntoDB = ?, SendingDateTime = ?, DeliveryDateTime = ?, Text = ?, DestinationNumber = ?, Coding = ?, UDH = ?, SMSCNumber = ?, Class = ?, TextDecoded = ?, SenderID = ?, Status = ?, StatusError = ?, TPMR = ?, RelativeValidity = ?, CreatorID = ?` +
		` WHERE ID = ? AND SequencePosition = ?`

	// run query
	XOLog(sqlstr, s.Updatedindb, s.Insertintodb, s.Sendingdatetime, s.Deliverydatetime, s.Text, s.Destinationnumber, s.Coding, s.Udh, s.Smscnumber, s.Class, s.Textdecoded, s.Senderid, s.Status, s.Statuserror, s.Tpmr, s.Relativevalidity, s.Creatorid, s.ID, s.Sequenceposition)
	_, err = db.Exec(sqlstr, s.Updatedindb, s.Insertintodb, s.Sendingdatetime, s.Deliverydatetime, s.Text, s.Destinationnumber, s.Coding, s.Udh, s.Smscnumber, s.Class, s.Textdecoded, s.Senderid, s.Status, s.Statuserror, s.Tpmr, s.Relativevalidity, s.Creatorid, s.ID, s.Sequenceposition)
	return err
}

// Save saves the Sentitem to the database.
func (s *Sentitem) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Sentitem from the database.
func (s *Sentitem) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM sms.sentitems WHERE ID = ? AND SequencePosition = ?`

	// run query
	XOLog(sqlstr, s.ID, s.Sequenceposition)
	_, err = db.Exec(sqlstr, s.ID, s.Sequenceposition)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SentitemBySequenceposition retrieves a row from 'sms.sentitems' as a Sentitem.
//
// Generated from index 'sentitems_SequencePosition_pkey'.
func SentitemBySequenceposition(db XODB, sequenceposition int) (*Sentitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, DeliveryDateTime, Text, DestinationNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, ID, SenderID, SequencePosition, Status, StatusError, TPMR, RelativeValidity, CreatorID ` +
		`FROM sms.sentitems ` +
		`WHERE SequencePosition = ?`

	// run query
	XOLog(sqlstr, sequenceposition)
	s := Sentitem{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, sequenceposition).Scan(&s.Updatedindb, &s.Insertintodb, &s.Sendingdatetime, &s.Deliverydatetime, &s.Text, &s.Destinationnumber, &s.Coding, &s.Udh, &s.Smscnumber, &s.Class, &s.Textdecoded, &s.ID, &s.Senderid, &s.Sequenceposition, &s.Status, &s.Statuserror, &s.Tpmr, &s.Relativevalidity, &s.Creatorid)
	if err != nil {
		return nil, err
	}

	return &s, nil
}

// SentitemsByDeliverydatetime retrieves a row from 'sms.sentitems' as a Sentitem.
//
// Generated from index 'sentitems_date'.
func SentitemsByDeliverydatetime(db XODB, deliverydatetime mysql.NullTime) ([]*Sentitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, DeliveryDateTime, Text, DestinationNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, ID, SenderID, SequencePosition, Status, StatusError, TPMR, RelativeValidity, CreatorID ` +
		`FROM sms.sentitems ` +
		`WHERE DeliveryDateTime = ?`

	// run query
	XOLog(sqlstr, deliverydatetime)
	q, err := db.Query(sqlstr, deliverydatetime)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Sentitem{}
	for q.Next() {
		s := Sentitem{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.Updatedindb, &s.Insertintodb, &s.Sendingdatetime, &s.Deliverydatetime, &s.Text, &s.Destinationnumber, &s.Coding, &s.Udh, &s.Smscnumber, &s.Class, &s.Textdecoded, &s.ID, &s.Senderid, &s.Sequenceposition, &s.Status, &s.Statuserror, &s.Tpmr, &s.Relativevalidity, &s.Creatorid)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// SentitemsByDestinationnumber retrieves a row from 'sms.sentitems' as a Sentitem.
//
// Generated from index 'sentitems_dest'.
func SentitemsByDestinationnumber(db XODB, destinationnumber string) ([]*Sentitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, DeliveryDateTime, Text, DestinationNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, ID, SenderID, SequencePosition, Status, StatusError, TPMR, RelativeValidity, CreatorID ` +
		`FROM sms.sentitems ` +
		`WHERE DestinationNumber = ?`

	// run query
	XOLog(sqlstr, destinationnumber)
	q, err := db.Query(sqlstr, destinationnumber)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Sentitem{}
	for q.Next() {
		s := Sentitem{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.Updatedindb, &s.Insertintodb, &s.Sendingdatetime, &s.Deliverydatetime, &s.Text, &s.Destinationnumber, &s.Coding, &s.Udh, &s.Smscnumber, &s.Class, &s.Textdecoded, &s.ID, &s.Senderid, &s.Sequenceposition, &s.Status, &s.Statuserror, &s.Tpmr, &s.Relativevalidity, &s.Creatorid)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// SentitemsBySenderid retrieves a row from 'sms.sentitems' as a Sentitem.
//
// Generated from index 'sentitems_sender'.
func SentitemsBySenderid(db XODB, senderid string) ([]*Sentitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, DeliveryDateTime, Text, DestinationNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, ID, SenderID, SequencePosition, Status, StatusError, TPMR, RelativeValidity, CreatorID ` +
		`FROM sms.sentitems ` +
		`WHERE SenderID = ?`

	// run query
	XOLog(sqlstr, senderid)
	q, err := db.Query(sqlstr, senderid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Sentitem{}
	for q.Next() {
		s := Sentitem{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.Updatedindb, &s.Insertintodb, &s.Sendingdatetime, &s.Deliverydatetime, &s.Text, &s.Destinationnumber, &s.Coding, &s.Udh, &s.Smscnumber, &s.Class, &s.Textdecoded, &s.ID, &s.Senderid, &s.Sequenceposition, &s.Status, &s.Statuserror, &s.Tpmr, &s.Relativevalidity, &s.Creatorid)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// SentitemsByTpmr retrieves a row from 'sms.sentitems' as a Sentitem.
//
// Generated from index 'sentitems_tpmr'.
func SentitemsByTpmr(db XODB, tpmr int) ([]*Sentitem, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, DeliveryDateTime, Text, DestinationNumber, Coding, UDH, SMSCNumber, Class, TextDecoded, ID, SenderID, SequencePosition, Status, StatusError, TPMR, RelativeValidity, CreatorID ` +
		`FROM sms.sentitems ` +
		`WHERE TPMR = ?`

	// run query
	XOLog(sqlstr, tpmr)
	q, err := db.Query(sqlstr, tpmr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Sentitem{}
	for q.Next() {
		s := Sentitem{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.Updatedindb, &s.Insertintodb, &s.Sendingdatetime, &s.Deliverydatetime, &s.Text, &s.Destinationnumber, &s.Coding, &s.Udh, &s.Smscnumber, &s.Class, &s.Textdecoded, &s.ID, &s.Senderid, &s.Sequenceposition, &s.Status, &s.Statuserror, &s.Tpmr, &s.Relativevalidity, &s.Creatorid)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}
