// Package local_sms_db contains the types for schema 'sms'.
package localsmsdb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
)

// Outbox represents a row from 'sms.outbox'.
type Outbox struct {
	Updatedindb       time.Time      `json:"UpdatedInDB"`       // UpdatedInDB
	Insertintodb      time.Time      `json:"InsertIntoDB"`      // InsertIntoDB
	Sendingdatetime   time.Time      `json:"SendingDateTime"`   // SendingDateTime
	Sendbefore        string         `json:"SendBefore"`        // SendBefore
	Sendafter         string         `json:"SendAfter"`         // SendAfter
	Text              sql.NullString `json:"Text"`              // Text
	Destinationnumber string         `json:"DestinationNumber"` // DestinationNumber
	Coding            Coding         `json:"Coding"`            // Coding
	Udh               sql.NullString `json:"UDH"`               // UDH
	Class             sql.NullInt64  `json:"Class"`             // Class
	Textdecoded       string         `json:"TextDecoded"`       // TextDecoded
	ID                uint           `json:"ID"`                // ID
	Multipart         Multipart      `json:"MultiPart"`         // MultiPart
	Relativevalidity  sql.NullInt64  `json:"RelativeValidity"`  // RelativeValidity
	Senderid          sql.NullString `json:"SenderID"`          // SenderID
	Sendingtimeout    mysql.NullTime `json:"SendingTimeOut"`    // SendingTimeOut
	Deliveryreport    Deliveryreport `json:"DeliveryReport"`    // DeliveryReport
	Creatorid         string         `json:"CreatorID"`         // CreatorID
	Retries           sql.NullInt64  `json:"Retries"`           // Retries
	Priority          sql.NullInt64  `json:"Priority"`          // Priority

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Outbox exists in the database.
func (o *Outbox) Exists() bool {
	return o._exists
}

// Deleted provides information if the Outbox has been deleted from the database.
func (o *Outbox) Deleted() bool {
	return o._deleted
}

// Insert inserts the Outbox to the database.
func (o *Outbox) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO sms.outbox (` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, SendBefore, SendAfter, Text, DestinationNumber, Coding, UDH, Class, TextDecoded, MultiPart, RelativeValidity, SenderID, SendingTimeOut, DeliveryReport, CreatorID, Retries, Priority` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, o.Updatedindb, o.Insertintodb, o.Sendingdatetime, o.Sendbefore, o.Sendafter, o.Text, o.Destinationnumber, o.Coding, o.Udh, o.Class, o.Textdecoded, o.Multipart, o.Relativevalidity, o.Senderid, o.Sendingtimeout, o.Deliveryreport, o.Creatorid, o.Retries, o.Priority)
	res, err := db.Exec(sqlstr, o.Updatedindb, o.Insertintodb, o.Sendingdatetime, o.Sendbefore, o.Sendafter, o.Text, o.Destinationnumber, o.Coding, o.Udh, o.Class, o.Textdecoded, o.Multipart, o.Relativevalidity, o.Senderid, o.Sendingtimeout, o.Deliveryreport, o.Creatorid, o.Retries, o.Priority)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	o.ID = uint(id)
	o._exists = true

	return nil
}

// Update updates the Outbox in the database.
func (o *Outbox) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE sms.outbox SET ` +
		`UpdatedInDB = ?, InsertIntoDB = ?, SendingDateTime = ?, SendBefore = ?, SendAfter = ?, Text = ?, DestinationNumber = ?, Coding = ?, UDH = ?, Class = ?, TextDecoded = ?, MultiPart = ?, RelativeValidity = ?, SenderID = ?, SendingTimeOut = ?, DeliveryReport = ?, CreatorID = ?, Retries = ?, Priority = ?` +
		` WHERE ID = ?`

	// run query
	XOLog(sqlstr, o.Updatedindb, o.Insertintodb, o.Sendingdatetime, o.Sendbefore, o.Sendafter, o.Text, o.Destinationnumber, o.Coding, o.Udh, o.Class, o.Textdecoded, o.Multipart, o.Relativevalidity, o.Senderid, o.Sendingtimeout, o.Deliveryreport, o.Creatorid, o.Retries, o.Priority, o.ID)
	_, err = db.Exec(sqlstr, o.Updatedindb, o.Insertintodb, o.Sendingdatetime, o.Sendbefore, o.Sendafter, o.Text, o.Destinationnumber, o.Coding, o.Udh, o.Class, o.Textdecoded, o.Multipart, o.Relativevalidity, o.Senderid, o.Sendingtimeout, o.Deliveryreport, o.Creatorid, o.Retries, o.Priority, o.ID)
	return err
}

// Save saves the Outbox to the database.
func (o *Outbox) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Insert(db)
}

// Delete deletes the Outbox from the database.
func (o *Outbox) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sms.outbox WHERE ID = ?`

	// run query
	XOLog(sqlstr, o.ID)
	_, err = db.Exec(sqlstr, o.ID)
	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// OutboxByID retrieves a row from 'sms.outbox' as a Outbox.
//
// Generated from index 'outbox_ID_pkey'.
func OutboxByID(db XODB, id uint) (*Outbox, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, SendBefore, SendAfter, Text, DestinationNumber, Coding, UDH, Class, TextDecoded, ID, MultiPart, RelativeValidity, SenderID, SendingTimeOut, DeliveryReport, CreatorID, Retries, Priority ` +
		`FROM sms.outbox ` +
		`WHERE ID = ?`

	// run query
	XOLog(sqlstr, id)
	o := Outbox{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&o.Updatedindb, &o.Insertintodb, &o.Sendingdatetime, &o.Sendbefore, &o.Sendafter, &o.Text, &o.Destinationnumber, &o.Coding, &o.Udh, &o.Class, &o.Textdecoded, &o.ID, &o.Multipart, &o.Relativevalidity, &o.Senderid, &o.Sendingtimeout, &o.Deliveryreport, &o.Creatorid, &o.Retries, &o.Priority)
	if err != nil {
		return nil, err
	}

	return &o, nil
}

// OutboxesBySendingdatetimeSendingtimeout retrieves a row from 'sms.outbox' as a Outbox.
//
// Generated from index 'outbox_date'.
func OutboxesBySendingdatetimeSendingtimeout(db XODB, sendingdatetime time.Time, sendingtimeout mysql.NullTime) ([]*Outbox, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, SendBefore, SendAfter, Text, DestinationNumber, Coding, UDH, Class, TextDecoded, ID, MultiPart, RelativeValidity, SenderID, SendingTimeOut, DeliveryReport, CreatorID, Retries, Priority ` +
		`FROM sms.outbox ` +
		`WHERE SendingDateTime = ? AND SendingTimeOut = ?`

	// run query
	XOLog(sqlstr, sendingdatetime, sendingtimeout)
	q, err := db.Query(sqlstr, sendingdatetime, sendingtimeout)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Outbox{}
	for q.Next() {
		o := Outbox{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.Updatedindb, &o.Insertintodb, &o.Sendingdatetime, &o.Sendbefore, &o.Sendafter, &o.Text, &o.Destinationnumber, &o.Coding, &o.Udh, &o.Class, &o.Textdecoded, &o.ID, &o.Multipart, &o.Relativevalidity, &o.Senderid, &o.Sendingtimeout, &o.Deliveryreport, &o.Creatorid, &o.Retries, &o.Priority)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OutboxesBySenderid retrieves a row from 'sms.outbox' as a Outbox.
//
// Generated from index 'outbox_sender'.
func OutboxesBySenderid(db XODB, senderid sql.NullString) ([]*Outbox, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`UpdatedInDB, InsertIntoDB, SendingDateTime, SendBefore, SendAfter, Text, DestinationNumber, Coding, UDH, Class, TextDecoded, ID, MultiPart, RelativeValidity, SenderID, SendingTimeOut, DeliveryReport, CreatorID, Retries, Priority ` +
		`FROM sms.outbox ` +
		`WHERE SenderID = ?`

	// run query
	XOLog(sqlstr, senderid)
	q, err := db.Query(sqlstr, senderid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Outbox{}
	for q.Next() {
		o := Outbox{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.Updatedindb, &o.Insertintodb, &o.Sendingdatetime, &o.Sendbefore, &o.Sendafter, &o.Text, &o.Destinationnumber, &o.Coding, &o.Udh, &o.Class, &o.Textdecoded, &o.ID, &o.Multipart, &o.Relativevalidity, &o.Senderid, &o.Sendingtimeout, &o.Deliveryreport, &o.Creatorid, &o.Retries, &o.Priority)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}
