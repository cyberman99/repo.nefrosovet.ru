// Package local_sms_db contains the types for schema 'sms'.
package localsmsdb

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// OutboxMultipart represents a row from 'sms.outbox_multipart'.
type OutboxMultipart struct {
	Text             sql.NullString `json:"Text"`             // Text
	Coding           Coding         `json:"Coding"`           // Coding
	Udh              sql.NullString `json:"UDH"`              // UDH
	Class            sql.NullInt64  `json:"Class"`            // Class
	Textdecoded      sql.NullString `json:"TextDecoded"`      // TextDecoded
	ID               uint           `json:"ID"`               // ID
	Sequenceposition int            `json:"SequencePosition"` // SequencePosition

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OutboxMultipart exists in the database.
func (om *OutboxMultipart) Exists() bool {
	return om._exists
}

// Deleted provides information if the OutboxMultipart has been deleted from the database.
func (om *OutboxMultipart) Deleted() bool {
	return om._deleted
}

// Insert inserts the OutboxMultipart to the database.
func (om *OutboxMultipart) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if om._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sms.outbox_multipart (` +
		`Text, Coding, UDH, Class, TextDecoded, ID, SequencePosition` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, om.Text, om.Coding, om.Udh, om.Class, om.Textdecoded, om.ID, om.Sequenceposition)
	_, err = db.Exec(sqlstr, om.Text, om.Coding, om.Udh, om.Class, om.Textdecoded, om.ID, om.Sequenceposition)
	if err != nil {
		return err
	}

	// set existence
	om._exists = true

	return nil
}

// Update updates the OutboxMultipart in the database.
func (om *OutboxMultipart) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !om._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if om._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE sms.outbox_multipart SET ` +
		`Text = ?, Coding = ?, UDH = ?, Class = ?, TextDecoded = ?` +
		` WHERE ID = ? AND SequencePosition = ?`

	// run query
	XOLog(sqlstr, om.Text, om.Coding, om.Udh, om.Class, om.Textdecoded, om.ID, om.Sequenceposition)
	_, err = db.Exec(sqlstr, om.Text, om.Coding, om.Udh, om.Class, om.Textdecoded, om.ID, om.Sequenceposition)
	return err
}

// Save saves the OutboxMultipart to the database.
func (om *OutboxMultipart) Save(db XODB) error {
	if om.Exists() {
		return om.Update(db)
	}

	return om.Insert(db)
}

// Delete deletes the OutboxMultipart from the database.
func (om *OutboxMultipart) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !om._exists {
		return nil
	}

	// if deleted, bail
	if om._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM sms.outbox_multipart WHERE ID = ? AND SequencePosition = ?`

	// run query
	XOLog(sqlstr, om.ID, om.Sequenceposition)
	_, err = db.Exec(sqlstr, om.ID, om.Sequenceposition)
	if err != nil {
		return err
	}

	// set deleted
	om._deleted = true

	return nil
}

// OutboxMultipartBySequenceposition retrieves a row from 'sms.outbox_multipart' as a OutboxMultipart.
//
// Generated from index 'outbox_multipart_SequencePosition_pkey'.
func OutboxMultipartBySequenceposition(db XODB, sequenceposition int) (*OutboxMultipart, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Text, Coding, UDH, Class, TextDecoded, ID, SequencePosition ` +
		`FROM sms.outbox_multipart ` +
		`WHERE SequencePosition = ?`

	// run query
	XOLog(sqlstr, sequenceposition)
	om := OutboxMultipart{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, sequenceposition).Scan(&om.Text, &om.Coding, &om.Udh, &om.Class, &om.Textdecoded, &om.ID, &om.Sequenceposition)
	if err != nil {
		return nil, err
	}

	return &om, nil
}
