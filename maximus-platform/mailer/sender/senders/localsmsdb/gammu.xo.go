// Package local_sms_db contains the types for schema 'sms'.
package localsmsdb

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// Gammu represents a row from 'sms.gammu'.
type Gammu struct {
	Version int `json:"Version"` // Version

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Gammu exists in the database.
func (g *Gammu) Exists() bool {
	return g._exists
}

// Deleted provides information if the Gammu has been deleted from the database.
func (g *Gammu) Deleted() bool {
	return g._deleted
}

// Insert inserts the Gammu to the database.
func (g *Gammu) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if g._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO sms.gammu (` +
		`Version` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, g.Version)
	_, err = db.Exec(sqlstr, g.Version)
	if err != nil {
		return err
	}

	// set existence
	g._exists = true

	return nil
}

// Update statements omitted due to lack of fields other than primary key

// Delete deletes the Gammu from the database.
func (g *Gammu) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !g._exists {
		return nil
	}

	// if deleted, bail
	if g._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM sms.gammu WHERE Version = ?`

	// run query
	XOLog(sqlstr, g.Version)
	_, err = db.Exec(sqlstr, g.Version)
	if err != nil {
		return err
	}

	// set deleted
	g._deleted = true

	return nil
}

// GammuByVersion retrieves a row from 'sms.gammu' as a Gammu.
//
// Generated from index 'gammu_Version_pkey'.
func GammuByVersion(db XODB, version int) (*Gammu, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`Version ` +
		`FROM sms.gammu ` +
		`WHERE Version = ?`

	// run query
	XOLog(sqlstr, version)
	g := Gammu{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, version).Scan(&g.Version)
	if err != nil {
		return nil, err
	}

	return &g, nil
}
