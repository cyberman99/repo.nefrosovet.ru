// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"repo.nefrosovet.ru/go-lms/api-video/ent/predicate"
	"repo.nefrosovet.ru/go-lms/api-video/ent/subscriber"
	"repo.nefrosovet.ru/go-lms/api-video/ent/user"
)

// SubscriberUpdate is the builder for updating Subscriber entities.
type SubscriberUpdate struct {
	config
	username    *string
	domain      *string
	ha1         *string
	ha1b        *string
	user        map[int]struct{}
	clearedUser bool
	predicates  []predicate.Subscriber
}

// Where adds a new predicate for the builder.
func (su *SubscriberUpdate) Where(ps ...predicate.Subscriber) *SubscriberUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetUsername sets the username field.
func (su *SubscriberUpdate) SetUsername(s string) *SubscriberUpdate {
	su.username = &s
	return su
}

// SetNillableUsername sets the username field if the given value is not nil.
func (su *SubscriberUpdate) SetNillableUsername(s *string) *SubscriberUpdate {
	if s != nil {
		su.SetUsername(*s)
	}
	return su
}

// SetDomain sets the domain field.
func (su *SubscriberUpdate) SetDomain(s string) *SubscriberUpdate {
	su.domain = &s
	return su
}

// SetNillableDomain sets the domain field if the given value is not nil.
func (su *SubscriberUpdate) SetNillableDomain(s *string) *SubscriberUpdate {
	if s != nil {
		su.SetDomain(*s)
	}
	return su
}

// SetHa1 sets the ha1 field.
func (su *SubscriberUpdate) SetHa1(s string) *SubscriberUpdate {
	su.ha1 = &s
	return su
}

// SetNillableHa1 sets the ha1 field if the given value is not nil.
func (su *SubscriberUpdate) SetNillableHa1(s *string) *SubscriberUpdate {
	if s != nil {
		su.SetHa1(*s)
	}
	return su
}

// SetHa1b sets the ha1b field.
func (su *SubscriberUpdate) SetHa1b(s string) *SubscriberUpdate {
	su.ha1b = &s
	return su
}

// SetNillableHa1b sets the ha1b field if the given value is not nil.
func (su *SubscriberUpdate) SetNillableHa1b(s *string) *SubscriberUpdate {
	if s != nil {
		su.SetHa1b(*s)
	}
	return su
}

// SetUserID sets the user edge to User by id.
func (su *SubscriberUpdate) SetUserID(id int) *SubscriberUpdate {
	if su.user == nil {
		su.user = make(map[int]struct{})
	}
	su.user[id] = struct{}{}
	return su
}

// SetUser sets the user edge to User.
func (su *SubscriberUpdate) SetUser(u *User) *SubscriberUpdate {
	return su.SetUserID(u.ID)
}

// ClearUser clears the user edge to User.
func (su *SubscriberUpdate) ClearUser() *SubscriberUpdate {
	su.clearedUser = true
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SubscriberUpdate) Save(ctx context.Context) (int, error) {
	if su.username != nil {
		if err := subscriber.UsernameValidator(*su.username); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
		}
	}
	if su.domain != nil {
		if err := subscriber.DomainValidator(*su.domain); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"domain\": %v", err)
		}
	}
	if su.ha1 != nil {
		if err := subscriber.Ha1Validator(*su.ha1); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"ha1\": %v", err)
		}
	}
	if su.ha1b != nil {
		if err := subscriber.Ha1bValidator(*su.ha1b); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"ha1b\": %v", err)
		}
	}
	if len(su.user) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if su.clearedUser && su.user == nil {
		return 0, errors.New("ent: clearing a unique edge \"user\"")
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriberUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriberUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriberUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubscriberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscriber.Table,
			Columns: subscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subscriber.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.username; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldUsername,
		})
	}
	if value := su.domain; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldDomain,
		})
	}
	if value := su.ha1; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldHa1,
		})
	}
	if value := su.ha1b; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldHa1b,
		})
	}
	if su.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriber.UserTable,
			Columns: []string{subscriber.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriber.UserTable,
			Columns: []string{subscriber.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SubscriberUpdateOne is the builder for updating a single Subscriber entity.
type SubscriberUpdateOne struct {
	config
	id          int
	username    *string
	domain      *string
	ha1         *string
	ha1b        *string
	user        map[int]struct{}
	clearedUser bool
}

// SetUsername sets the username field.
func (suo *SubscriberUpdateOne) SetUsername(s string) *SubscriberUpdateOne {
	suo.username = &s
	return suo
}

// SetNillableUsername sets the username field if the given value is not nil.
func (suo *SubscriberUpdateOne) SetNillableUsername(s *string) *SubscriberUpdateOne {
	if s != nil {
		suo.SetUsername(*s)
	}
	return suo
}

// SetDomain sets the domain field.
func (suo *SubscriberUpdateOne) SetDomain(s string) *SubscriberUpdateOne {
	suo.domain = &s
	return suo
}

// SetNillableDomain sets the domain field if the given value is not nil.
func (suo *SubscriberUpdateOne) SetNillableDomain(s *string) *SubscriberUpdateOne {
	if s != nil {
		suo.SetDomain(*s)
	}
	return suo
}

// SetHa1 sets the ha1 field.
func (suo *SubscriberUpdateOne) SetHa1(s string) *SubscriberUpdateOne {
	suo.ha1 = &s
	return suo
}

// SetNillableHa1 sets the ha1 field if the given value is not nil.
func (suo *SubscriberUpdateOne) SetNillableHa1(s *string) *SubscriberUpdateOne {
	if s != nil {
		suo.SetHa1(*s)
	}
	return suo
}

// SetHa1b sets the ha1b field.
func (suo *SubscriberUpdateOne) SetHa1b(s string) *SubscriberUpdateOne {
	suo.ha1b = &s
	return suo
}

// SetNillableHa1b sets the ha1b field if the given value is not nil.
func (suo *SubscriberUpdateOne) SetNillableHa1b(s *string) *SubscriberUpdateOne {
	if s != nil {
		suo.SetHa1b(*s)
	}
	return suo
}

// SetUserID sets the user edge to User by id.
func (suo *SubscriberUpdateOne) SetUserID(id int) *SubscriberUpdateOne {
	if suo.user == nil {
		suo.user = make(map[int]struct{})
	}
	suo.user[id] = struct{}{}
	return suo
}

// SetUser sets the user edge to User.
func (suo *SubscriberUpdateOne) SetUser(u *User) *SubscriberUpdateOne {
	return suo.SetUserID(u.ID)
}

// ClearUser clears the user edge to User.
func (suo *SubscriberUpdateOne) ClearUser() *SubscriberUpdateOne {
	suo.clearedUser = true
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SubscriberUpdateOne) Save(ctx context.Context) (*Subscriber, error) {
	if suo.username != nil {
		if err := subscriber.UsernameValidator(*suo.username); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
		}
	}
	if suo.domain != nil {
		if err := subscriber.DomainValidator(*suo.domain); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"domain\": %v", err)
		}
	}
	if suo.ha1 != nil {
		if err := subscriber.Ha1Validator(*suo.ha1); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"ha1\": %v", err)
		}
	}
	if suo.ha1b != nil {
		if err := subscriber.Ha1bValidator(*suo.ha1b); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"ha1b\": %v", err)
		}
	}
	if len(suo.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if suo.clearedUser && suo.user == nil {
		return nil, errors.New("ent: clearing a unique edge \"user\"")
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriberUpdateOne) SaveX(ctx context.Context) *Subscriber {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SubscriberUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriberUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubscriberUpdateOne) sqlSave(ctx context.Context) (s *Subscriber, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subscriber.Table,
			Columns: subscriber.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeInt,
				Column: subscriber.FieldID,
			},
		},
	}
	if value := suo.username; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldUsername,
		})
	}
	if value := suo.domain; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldDomain,
		})
	}
	if value := suo.ha1; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldHa1,
		})
	}
	if value := suo.ha1b; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: subscriber.FieldHa1b,
		})
	}
	if suo.clearedUser {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriber.UserTable,
			Columns: []string{subscriber.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subscriber.UserTable,
			Columns: []string{subscriber.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Subscriber{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
