// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"repo.nefrosovet.ru/go-lms/api-video/ent/predicate"
	"repo.nefrosovet.ru/go-lms/api-video/ent/subscriber"
	"repo.nefrosovet.ru/go-lms/api-video/ent/user"
	"repo.nefrosovet.ru/go-lms/api-video/ent/useraccount"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	created_at         *time.Time
	clearcreated_at    bool
	updated_at         *time.Time
	clearupdated_at    bool
	meta_data          *string
	subscriber         map[int]struct{}
	useraccount        map[int]struct{}
	clearedSubscriber  bool
	clearedUseraccount bool
	predicates         []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetCreatedAt sets the created_at field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.created_at = &t
	return uu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// ClearCreatedAt clears the value of created_at.
func (uu *UserUpdate) ClearCreatedAt() *UserUpdate {
	uu.created_at = nil
	uu.clearcreated_at = true
	return uu
}

// SetUpdatedAt sets the updated_at field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.updated_at = &t
	return uu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUpdatedAt(*t)
	}
	return uu
}

// ClearUpdatedAt clears the value of updated_at.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.updated_at = nil
	uu.clearupdated_at = true
	return uu
}

// SetMetaData sets the meta_data field.
func (uu *UserUpdate) SetMetaData(s string) *UserUpdate {
	uu.meta_data = &s
	return uu
}

// SetSubscriberID sets the subscriber edge to Subscriber by id.
func (uu *UserUpdate) SetSubscriberID(id int) *UserUpdate {
	if uu.subscriber == nil {
		uu.subscriber = make(map[int]struct{})
	}
	uu.subscriber[id] = struct{}{}
	return uu
}

// SetNillableSubscriberID sets the subscriber edge to Subscriber by id if the given value is not nil.
func (uu *UserUpdate) SetNillableSubscriberID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetSubscriberID(*id)
	}
	return uu
}

// SetSubscriber sets the subscriber edge to Subscriber.
func (uu *UserUpdate) SetSubscriber(s *Subscriber) *UserUpdate {
	return uu.SetSubscriberID(s.ID)
}

// SetUseraccountID sets the useraccount edge to UserAccount by id.
func (uu *UserUpdate) SetUseraccountID(id int) *UserUpdate {
	if uu.useraccount == nil {
		uu.useraccount = make(map[int]struct{})
	}
	uu.useraccount[id] = struct{}{}
	return uu
}

// SetNillableUseraccountID sets the useraccount edge to UserAccount by id if the given value is not nil.
func (uu *UserUpdate) SetNillableUseraccountID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetUseraccountID(*id)
	}
	return uu
}

// SetUseraccount sets the useraccount edge to UserAccount.
func (uu *UserUpdate) SetUseraccount(u *UserAccount) *UserUpdate {
	return uu.SetUseraccountID(u.ID)
}

// ClearSubscriber clears the subscriber edge to Subscriber.
func (uu *UserUpdate) ClearSubscriber() *UserUpdate {
	uu.clearedSubscriber = true
	return uu
}

// ClearUseraccount clears the useraccount edge to UserAccount.
func (uu *UserUpdate) ClearUseraccount() *UserUpdate {
	uu.clearedUseraccount = true
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if len(uu.subscriber) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"subscriber\"")
	}
	if len(uu.useraccount) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"useraccount\"")
	}
	return uu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := uu.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldCreatedAt,
		})
	}
	if uu.clearcreated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldCreatedAt,
		})
	}
	if value := uu.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldUpdatedAt,
		})
	}
	if uu.clearupdated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldUpdatedAt,
		})
	}
	if value := uu.meta_data; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldMetaData,
		})
	}
	if uu.clearedSubscriber {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriberTable,
			Columns: []string{user.SubscriberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriber.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.subscriber; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriberTable,
			Columns: []string{user.SubscriberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriber.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.clearedUseraccount {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UseraccountTable,
			Columns: []string{user.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.useraccount; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UseraccountTable,
			Columns: []string{user.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	id                 int
	created_at         *time.Time
	clearcreated_at    bool
	updated_at         *time.Time
	clearupdated_at    bool
	meta_data          *string
	subscriber         map[int]struct{}
	useraccount        map[int]struct{}
	clearedSubscriber  bool
	clearedUseraccount bool
}

// SetCreatedAt sets the created_at field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.created_at = &t
	return uuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// ClearCreatedAt clears the value of created_at.
func (uuo *UserUpdateOne) ClearCreatedAt() *UserUpdateOne {
	uuo.created_at = nil
	uuo.clearcreated_at = true
	return uuo
}

// SetUpdatedAt sets the updated_at field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.updated_at = &t
	return uuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUpdatedAt(*t)
	}
	return uuo
}

// ClearUpdatedAt clears the value of updated_at.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.updated_at = nil
	uuo.clearupdated_at = true
	return uuo
}

// SetMetaData sets the meta_data field.
func (uuo *UserUpdateOne) SetMetaData(s string) *UserUpdateOne {
	uuo.meta_data = &s
	return uuo
}

// SetSubscriberID sets the subscriber edge to Subscriber by id.
func (uuo *UserUpdateOne) SetSubscriberID(id int) *UserUpdateOne {
	if uuo.subscriber == nil {
		uuo.subscriber = make(map[int]struct{})
	}
	uuo.subscriber[id] = struct{}{}
	return uuo
}

// SetNillableSubscriberID sets the subscriber edge to Subscriber by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSubscriberID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetSubscriberID(*id)
	}
	return uuo
}

// SetSubscriber sets the subscriber edge to Subscriber.
func (uuo *UserUpdateOne) SetSubscriber(s *Subscriber) *UserUpdateOne {
	return uuo.SetSubscriberID(s.ID)
}

// SetUseraccountID sets the useraccount edge to UserAccount by id.
func (uuo *UserUpdateOne) SetUseraccountID(id int) *UserUpdateOne {
	if uuo.useraccount == nil {
		uuo.useraccount = make(map[int]struct{})
	}
	uuo.useraccount[id] = struct{}{}
	return uuo
}

// SetNillableUseraccountID sets the useraccount edge to UserAccount by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseraccountID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUseraccountID(*id)
	}
	return uuo
}

// SetUseraccount sets the useraccount edge to UserAccount.
func (uuo *UserUpdateOne) SetUseraccount(u *UserAccount) *UserUpdateOne {
	return uuo.SetUseraccountID(u.ID)
}

// ClearSubscriber clears the subscriber edge to Subscriber.
func (uuo *UserUpdateOne) ClearSubscriber() *UserUpdateOne {
	uuo.clearedSubscriber = true
	return uuo
}

// ClearUseraccount clears the useraccount edge to UserAccount.
func (uuo *UserUpdateOne) ClearUseraccount() *UserUpdateOne {
	uuo.clearedUseraccount = true
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if len(uuo.subscriber) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"subscriber\"")
	}
	if len(uuo.useraccount) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"useraccount\"")
	}
	return uuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  uuo.id,
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if value := uuo.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldCreatedAt,
		})
	}
	if uuo.clearcreated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldCreatedAt,
		})
	}
	if value := uuo.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldUpdatedAt,
		})
	}
	if uuo.clearupdated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldUpdatedAt,
		})
	}
	if value := uuo.meta_data; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldMetaData,
		})
	}
	if uuo.clearedSubscriber {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriberTable,
			Columns: []string{user.SubscriberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriber.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.subscriber; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SubscriberTable,
			Columns: []string{user.SubscriberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subscriber.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.clearedUseraccount {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UseraccountTable,
			Columns: []string{user.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.useraccount; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.UseraccountTable,
			Columns: []string{user.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
