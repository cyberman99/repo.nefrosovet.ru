// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"repo.nefrosovet.ru/go-lms/api-video/ent/subscriber"
	"repo.nefrosovet.ru/go-lms/api-video/ent/user"
)

// Subscriber is the model entity for the Subscriber schema.
type Subscriber struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain string `json:"domain,omitempty"`
	// Ha1 holds the value of the "ha1" field.
	Ha1 string `json:"ha1,omitempty"`
	// Ha1b holds the value of the "ha1b" field.
	Ha1b string `json:"ha1b,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubscriberQuery when eager-loading is set.
	Edges           SubscriberEdges `json:"edges"`
	user_subscriber *int
}

// SubscriberEdges holds the relations/edges for other nodes in the graph.
type SubscriberEdges struct {
	// User holds the value of the user edge.
	User *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubscriberEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subscriber) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // username
		&sql.NullString{}, // domain
		&sql.NullString{}, // ha1
		&sql.NullString{}, // ha1b
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Subscriber) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_subscriber
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subscriber fields.
func (s *Subscriber) assignValues(values ...interface{}) error {
	if m, n := len(values), len(subscriber.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field username", values[0])
	} else if value.Valid {
		s.Username = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field domain", values[1])
	} else if value.Valid {
		s.Domain = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ha1", values[2])
	} else if value.Valid {
		s.Ha1 = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ha1b", values[3])
	} else if value.Valid {
		s.Ha1b = value.String
	}
	values = values[4:]
	if len(values) == len(subscriber.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_subscriber", value)
		} else if value.Valid {
			s.user_subscriber = new(int)
			*s.user_subscriber = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Subscriber.
func (s *Subscriber) QueryUser() *UserQuery {
	return (&SubscriberClient{s.config}).QueryUser(s)
}

// Update returns a builder for updating this Subscriber.
// Note that, you need to call Subscriber.Unwrap() before calling this method, if this Subscriber
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subscriber) Update() *SubscriberUpdateOne {
	return (&SubscriberClient{s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Subscriber) Unwrap() *Subscriber {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Subscriber is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subscriber) String() string {
	var builder strings.Builder
	builder.WriteString("Subscriber(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", username=")
	builder.WriteString(s.Username)
	builder.WriteString(", domain=")
	builder.WriteString(s.Domain)
	builder.WriteString(", ha1=")
	builder.WriteString(s.Ha1)
	builder.WriteString(", ha1b=")
	builder.WriteString(s.Ha1b)
	builder.WriteByte(')')
	return builder.String()
}

// Subscribers is a parsable slice of Subscriber.
type Subscribers []*Subscriber

func (s Subscribers) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
