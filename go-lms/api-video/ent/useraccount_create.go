// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"repo.nefrosovet.ru/go-lms/api-video/ent/accountkey"
	"repo.nefrosovet.ru/go-lms/api-video/ent/user"
	"repo.nefrosovet.ru/go-lms/api-video/ent/useraccount"
)

// UserAccountCreate is the builder for creating a UserAccount entity.
type UserAccountCreate struct {
	config
	username       *string
	password       *string
	remember_token *string
	active         *int16
	event_channel  *string
	did_prefix     *string
	use_kamalio    *int16
	user           map[int]struct{}
	accountkeys    map[int]struct{}
}

// SetUsername sets the username field.
func (uac *UserAccountCreate) SetUsername(s string) *UserAccountCreate {
	uac.username = &s
	return uac
}

// SetPassword sets the password field.
func (uac *UserAccountCreate) SetPassword(s string) *UserAccountCreate {
	uac.password = &s
	return uac
}

// SetRememberToken sets the remember_token field.
func (uac *UserAccountCreate) SetRememberToken(s string) *UserAccountCreate {
	uac.remember_token = &s
	return uac
}

// SetNillableRememberToken sets the remember_token field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableRememberToken(s *string) *UserAccountCreate {
	if s != nil {
		uac.SetRememberToken(*s)
	}
	return uac
}

// SetActive sets the active field.
func (uac *UserAccountCreate) SetActive(i int16) *UserAccountCreate {
	uac.active = &i
	return uac
}

// SetNillableActive sets the active field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableActive(i *int16) *UserAccountCreate {
	if i != nil {
		uac.SetActive(*i)
	}
	return uac
}

// SetEventChannel sets the event_channel field.
func (uac *UserAccountCreate) SetEventChannel(s string) *UserAccountCreate {
	uac.event_channel = &s
	return uac
}

// SetNillableEventChannel sets the event_channel field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableEventChannel(s *string) *UserAccountCreate {
	if s != nil {
		uac.SetEventChannel(*s)
	}
	return uac
}

// SetDidPrefix sets the did_prefix field.
func (uac *UserAccountCreate) SetDidPrefix(s string) *UserAccountCreate {
	uac.did_prefix = &s
	return uac
}

// SetNillableDidPrefix sets the did_prefix field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableDidPrefix(s *string) *UserAccountCreate {
	if s != nil {
		uac.SetDidPrefix(*s)
	}
	return uac
}

// SetUseKamalio sets the use_kamalio field.
func (uac *UserAccountCreate) SetUseKamalio(i int16) *UserAccountCreate {
	uac.use_kamalio = &i
	return uac
}

// SetNillableUseKamalio sets the use_kamalio field if the given value is not nil.
func (uac *UserAccountCreate) SetNillableUseKamalio(i *int16) *UserAccountCreate {
	if i != nil {
		uac.SetUseKamalio(*i)
	}
	return uac
}

// SetUserID sets the user edge to User by id.
func (uac *UserAccountCreate) SetUserID(id int) *UserAccountCreate {
	if uac.user == nil {
		uac.user = make(map[int]struct{})
	}
	uac.user[id] = struct{}{}
	return uac
}

// SetUser sets the user edge to User.
func (uac *UserAccountCreate) SetUser(u *User) *UserAccountCreate {
	return uac.SetUserID(u.ID)
}

// AddAccountkeyIDs adds the accountkeys edge to AccountKey by ids.
func (uac *UserAccountCreate) AddAccountkeyIDs(ids ...int) *UserAccountCreate {
	if uac.accountkeys == nil {
		uac.accountkeys = make(map[int]struct{})
	}
	for i := range ids {
		uac.accountkeys[ids[i]] = struct{}{}
	}
	return uac
}

// AddAccountkeys adds the accountkeys edges to AccountKey.
func (uac *UserAccountCreate) AddAccountkeys(a ...*AccountKey) *UserAccountCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uac.AddAccountkeyIDs(ids...)
}

// Save creates the UserAccount in the database.
func (uac *UserAccountCreate) Save(ctx context.Context) (*UserAccount, error) {
	if uac.username == nil {
		return nil, errors.New("ent: missing required field \"username\"")
	}
	if err := useraccount.UsernameValidator(*uac.username); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"username\": %v", err)
	}
	if uac.password == nil {
		return nil, errors.New("ent: missing required field \"password\"")
	}
	if err := useraccount.PasswordValidator(*uac.password); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"password\": %v", err)
	}
	if uac.remember_token != nil {
		if err := useraccount.RememberTokenValidator(*uac.remember_token); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"remember_token\": %v", err)
		}
	}
	if uac.active == nil {
		v := useraccount.DefaultActive
		uac.active = &v
	}
	if uac.event_channel != nil {
		if err := useraccount.EventChannelValidator(*uac.event_channel); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"event_channel\": %v", err)
		}
	}
	if uac.did_prefix == nil {
		v := useraccount.DefaultDidPrefix
		uac.did_prefix = &v
	}
	if err := useraccount.DidPrefixValidator(*uac.did_prefix); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"did_prefix\": %v", err)
	}
	if uac.use_kamalio == nil {
		v := useraccount.DefaultUseKamalio
		uac.use_kamalio = &v
	}
	if len(uac.user) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"user\"")
	}
	if uac.user == nil {
		return nil, errors.New("ent: missing required edge \"user\"")
	}
	return uac.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (uac *UserAccountCreate) SaveX(ctx context.Context) *UserAccount {
	v, err := uac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uac *UserAccountCreate) sqlSave(ctx context.Context) (*UserAccount, error) {
	var (
		ua    = &UserAccount{config: uac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: useraccount.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: useraccount.FieldID,
			},
		}
	)
	if value := uac.username; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: useraccount.FieldUsername,
		})
		ua.Username = *value
	}
	if value := uac.password; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: useraccount.FieldPassword,
		})
		ua.Password = *value
	}
	if value := uac.remember_token; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: useraccount.FieldRememberToken,
		})
		ua.RememberToken = value
	}
	if value := uac.active; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: useraccount.FieldActive,
		})
		ua.Active = *value
	}
	if value := uac.event_channel; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: useraccount.FieldEventChannel,
		})
		ua.EventChannel = value
	}
	if value := uac.did_prefix; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: useraccount.FieldDidPrefix,
		})
		ua.DidPrefix = *value
	}
	if value := uac.use_kamalio; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: useraccount.FieldUseKamalio,
		})
		ua.UseKamalio = *value
	}
	if nodes := uac.user; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   useraccount.UserTable,
			Columns: []string{useraccount.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uac.accountkeys; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   useraccount.AccountkeysTable,
			Columns: []string{useraccount.AccountkeysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: accountkey.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, uac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ua.ID = int(id)
	return ua, nil
}
