// Code generated by entc, DO NOT EDIT.

package useraccount

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"repo.nefrosovet.ru/go-lms/api-video/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	},
	)
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	},
	)
}

// RememberToken applies equality check predicate on the "remember_token" field. It's identical to RememberTokenEQ.
func RememberToken(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRememberToken), v))
	},
	)
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	},
	)
}

// EventChannel applies equality check predicate on the "event_channel" field. It's identical to EventChannelEQ.
func EventChannel(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventChannel), v))
	},
	)
}

// DidPrefix applies equality check predicate on the "did_prefix" field. It's identical to DidPrefixEQ.
func DidPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDidPrefix), v))
	},
	)
}

// UseKamalio applies equality check predicate on the "use_kamalio" field. It's identical to UseKamalioEQ.
func UseKamalio(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUseKamalio), v))
	},
	)
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	},
	)
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	},
	)
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsername), v...))
	},
	)
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	},
	)
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	},
	)
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	},
	)
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	},
	)
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	},
	)
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	},
	)
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	},
	)
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	},
	)
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	},
	)
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	},
	)
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPassword), v))
	},
	)
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPassword), v))
	},
	)
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPassword), v...))
	},
	)
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPassword), v...))
	},
	)
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPassword), v))
	},
	)
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPassword), v))
	},
	)
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPassword), v))
	},
	)
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPassword), v))
	},
	)
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPassword), v))
	},
	)
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPassword), v))
	},
	)
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPassword), v))
	},
	)
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPassword), v))
	},
	)
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPassword), v))
	},
	)
}

// RememberTokenEQ applies the EQ predicate on the "remember_token" field.
func RememberTokenEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenNEQ applies the NEQ predicate on the "remember_token" field.
func RememberTokenNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenIn applies the In predicate on the "remember_token" field.
func RememberTokenIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRememberToken), v...))
	},
	)
}

// RememberTokenNotIn applies the NotIn predicate on the "remember_token" field.
func RememberTokenNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRememberToken), v...))
	},
	)
}

// RememberTokenGT applies the GT predicate on the "remember_token" field.
func RememberTokenGT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenGTE applies the GTE predicate on the "remember_token" field.
func RememberTokenGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenLT applies the LT predicate on the "remember_token" field.
func RememberTokenLT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenLTE applies the LTE predicate on the "remember_token" field.
func RememberTokenLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenContains applies the Contains predicate on the "remember_token" field.
func RememberTokenContains(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenHasPrefix applies the HasPrefix predicate on the "remember_token" field.
func RememberTokenHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenHasSuffix applies the HasSuffix predicate on the "remember_token" field.
func RememberTokenHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenIsNil applies the IsNil predicate on the "remember_token" field.
func RememberTokenIsNil() predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRememberToken)))
	},
	)
}

// RememberTokenNotNil applies the NotNil predicate on the "remember_token" field.
func RememberTokenNotNil() predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRememberToken)))
	},
	)
}

// RememberTokenEqualFold applies the EqualFold predicate on the "remember_token" field.
func RememberTokenEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRememberToken), v))
	},
	)
}

// RememberTokenContainsFold applies the ContainsFold predicate on the "remember_token" field.
func RememberTokenContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRememberToken), v))
	},
	)
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	},
	)
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	},
	)
}

// ActiveIn applies the In predicate on the "active" field.
func ActiveIn(vs ...int16) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActive), v...))
	},
	)
}

// ActiveNotIn applies the NotIn predicate on the "active" field.
func ActiveNotIn(vs ...int16) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActive), v...))
	},
	)
}

// ActiveGT applies the GT predicate on the "active" field.
func ActiveGT(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActive), v))
	},
	)
}

// ActiveGTE applies the GTE predicate on the "active" field.
func ActiveGTE(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActive), v))
	},
	)
}

// ActiveLT applies the LT predicate on the "active" field.
func ActiveLT(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActive), v))
	},
	)
}

// ActiveLTE applies the LTE predicate on the "active" field.
func ActiveLTE(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActive), v))
	},
	)
}

// EventChannelEQ applies the EQ predicate on the "event_channel" field.
func EventChannelEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelNEQ applies the NEQ predicate on the "event_channel" field.
func EventChannelNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelIn applies the In predicate on the "event_channel" field.
func EventChannelIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEventChannel), v...))
	},
	)
}

// EventChannelNotIn applies the NotIn predicate on the "event_channel" field.
func EventChannelNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEventChannel), v...))
	},
	)
}

// EventChannelGT applies the GT predicate on the "event_channel" field.
func EventChannelGT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelGTE applies the GTE predicate on the "event_channel" field.
func EventChannelGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelLT applies the LT predicate on the "event_channel" field.
func EventChannelLT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelLTE applies the LTE predicate on the "event_channel" field.
func EventChannelLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelContains applies the Contains predicate on the "event_channel" field.
func EventChannelContains(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelHasPrefix applies the HasPrefix predicate on the "event_channel" field.
func EventChannelHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelHasSuffix applies the HasSuffix predicate on the "event_channel" field.
func EventChannelHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelIsNil applies the IsNil predicate on the "event_channel" field.
func EventChannelIsNil() predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEventChannel)))
	},
	)
}

// EventChannelNotNil applies the NotNil predicate on the "event_channel" field.
func EventChannelNotNil() predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEventChannel)))
	},
	)
}

// EventChannelEqualFold applies the EqualFold predicate on the "event_channel" field.
func EventChannelEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEventChannel), v))
	},
	)
}

// EventChannelContainsFold applies the ContainsFold predicate on the "event_channel" field.
func EventChannelContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEventChannel), v))
	},
	)
}

// DidPrefixEQ applies the EQ predicate on the "did_prefix" field.
func DidPrefixEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixNEQ applies the NEQ predicate on the "did_prefix" field.
func DidPrefixNEQ(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixIn applies the In predicate on the "did_prefix" field.
func DidPrefixIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDidPrefix), v...))
	},
	)
}

// DidPrefixNotIn applies the NotIn predicate on the "did_prefix" field.
func DidPrefixNotIn(vs ...string) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDidPrefix), v...))
	},
	)
}

// DidPrefixGT applies the GT predicate on the "did_prefix" field.
func DidPrefixGT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixGTE applies the GTE predicate on the "did_prefix" field.
func DidPrefixGTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixLT applies the LT predicate on the "did_prefix" field.
func DidPrefixLT(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixLTE applies the LTE predicate on the "did_prefix" field.
func DidPrefixLTE(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixContains applies the Contains predicate on the "did_prefix" field.
func DidPrefixContains(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixHasPrefix applies the HasPrefix predicate on the "did_prefix" field.
func DidPrefixHasPrefix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixHasSuffix applies the HasSuffix predicate on the "did_prefix" field.
func DidPrefixHasSuffix(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixEqualFold applies the EqualFold predicate on the "did_prefix" field.
func DidPrefixEqualFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDidPrefix), v))
	},
	)
}

// DidPrefixContainsFold applies the ContainsFold predicate on the "did_prefix" field.
func DidPrefixContainsFold(v string) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDidPrefix), v))
	},
	)
}

// UseKamalioEQ applies the EQ predicate on the "use_kamalio" field.
func UseKamalioEQ(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUseKamalio), v))
	},
	)
}

// UseKamalioNEQ applies the NEQ predicate on the "use_kamalio" field.
func UseKamalioNEQ(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUseKamalio), v))
	},
	)
}

// UseKamalioIn applies the In predicate on the "use_kamalio" field.
func UseKamalioIn(vs ...int16) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUseKamalio), v...))
	},
	)
}

// UseKamalioNotIn applies the NotIn predicate on the "use_kamalio" field.
func UseKamalioNotIn(vs ...int16) predicate.UserAccount {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserAccount(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUseKamalio), v...))
	},
	)
}

// UseKamalioGT applies the GT predicate on the "use_kamalio" field.
func UseKamalioGT(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUseKamalio), v))
	},
	)
}

// UseKamalioGTE applies the GTE predicate on the "use_kamalio" field.
func UseKamalioGTE(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUseKamalio), v))
	},
	)
}

// UseKamalioLT applies the LT predicate on the "use_kamalio" field.
func UseKamalioLT(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUseKamalio), v))
	},
	)
}

// UseKamalioLTE applies the LTE predicate on the "use_kamalio" field.
func UseKamalioLTE(v int16) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUseKamalio), v))
	},
	)
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// HasAccountkeys applies the HasEdge predicate on the "accountkeys" edge.
func HasAccountkeys() predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountkeysTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountkeysTable, AccountkeysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasAccountkeysWith applies the HasEdge predicate on the "accountkeys" edge with a given conditions (other predicates).
func HasAccountkeysWith(preds ...predicate.AccountKey) predicate.UserAccount {
	return predicate.UserAccount(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AccountkeysInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AccountkeysTable, AccountkeysColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.UserAccount) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.UserAccount) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserAccount) predicate.UserAccount {
	return predicate.UserAccount(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
