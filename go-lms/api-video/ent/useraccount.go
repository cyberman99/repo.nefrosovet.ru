// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"repo.nefrosovet.ru/go-lms/api-video/ent/user"
	"repo.nefrosovet.ru/go-lms/api-video/ent/useraccount"
)

// UserAccount is the model entity for the UserAccount schema.
type UserAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// RememberToken holds the value of the "remember_token" field.
	RememberToken *string `json:"remember_token,omitempty"`
	// Active holds the value of the "active" field.
	Active int16 `json:"active,omitempty"`
	// EventChannel holds the value of the "event_channel" field.
	EventChannel *string `json:"event_channel,omitempty"`
	// DidPrefix holds the value of the "did_prefix" field.
	DidPrefix string `json:"did_prefix,omitempty"`
	// UseKamalio holds the value of the "use_kamalio" field.
	UseKamalio int16 `json:"use_kamalio,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserAccountQuery when eager-loading is set.
	Edges            UserAccountEdges `json:"edges"`
	user_useraccount *int
}

// UserAccountEdges holds the relations/edges for other nodes in the graph.
type UserAccountEdges struct {
	// User holds the value of the user edge.
	User *User
	// Accountkeys holds the value of the accountkeys edge.
	Accountkeys []*AccountKey
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserAccountEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AccountkeysOrErr returns the Accountkeys value or an error if the edge
// was not loaded in eager-loading.
func (e UserAccountEdges) AccountkeysOrErr() ([]*AccountKey, error) {
	if e.loadedTypes[1] {
		return e.Accountkeys, nil
	}
	return nil, &NotLoadedError{edge: "accountkeys"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserAccount) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // username
		&sql.NullString{}, // password
		&sql.NullString{}, // remember_token
		&sql.NullInt64{},  // active
		&sql.NullString{}, // event_channel
		&sql.NullString{}, // did_prefix
		&sql.NullInt64{},  // use_kamalio
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*UserAccount) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_useraccount
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserAccount fields.
func (ua *UserAccount) assignValues(values ...interface{}) error {
	if m, n := len(values), len(useraccount.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ua.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field username", values[0])
	} else if value.Valid {
		ua.Username = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field password", values[1])
	} else if value.Valid {
		ua.Password = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field remember_token", values[2])
	} else if value.Valid {
		ua.RememberToken = new(string)
		*ua.RememberToken = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field active", values[3])
	} else if value.Valid {
		ua.Active = int16(value.Int64)
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field event_channel", values[4])
	} else if value.Valid {
		ua.EventChannel = new(string)
		*ua.EventChannel = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field did_prefix", values[5])
	} else if value.Valid {
		ua.DidPrefix = value.String
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field use_kamalio", values[6])
	} else if value.Valid {
		ua.UseKamalio = int16(value.Int64)
	}
	values = values[7:]
	if len(values) == len(useraccount.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_useraccount", value)
		} else if value.Valid {
			ua.user_useraccount = new(int)
			*ua.user_useraccount = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the UserAccount.
func (ua *UserAccount) QueryUser() *UserQuery {
	return (&UserAccountClient{ua.config}).QueryUser(ua)
}

// QueryAccountkeys queries the accountkeys edge of the UserAccount.
func (ua *UserAccount) QueryAccountkeys() *AccountKeyQuery {
	return (&UserAccountClient{ua.config}).QueryAccountkeys(ua)
}

// Update returns a builder for updating this UserAccount.
// Note that, you need to call UserAccount.Unwrap() before calling this method, if this UserAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (ua *UserAccount) Update() *UserAccountUpdateOne {
	return (&UserAccountClient{ua.config}).UpdateOne(ua)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ua *UserAccount) Unwrap() *UserAccount {
	tx, ok := ua.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserAccount is not a transactional entity")
	}
	ua.config.driver = tx.drv
	return ua
}

// String implements the fmt.Stringer.
func (ua *UserAccount) String() string {
	var builder strings.Builder
	builder.WriteString("UserAccount(")
	builder.WriteString(fmt.Sprintf("id=%v", ua.ID))
	builder.WriteString(", username=")
	builder.WriteString(ua.Username)
	builder.WriteString(", password=")
	builder.WriteString(ua.Password)
	if v := ua.RememberToken; v != nil {
		builder.WriteString(", remember_token=")
		builder.WriteString(*v)
	}
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", ua.Active))
	if v := ua.EventChannel; v != nil {
		builder.WriteString(", event_channel=")
		builder.WriteString(*v)
	}
	builder.WriteString(", did_prefix=")
	builder.WriteString(ua.DidPrefix)
	builder.WriteString(", use_kamalio=")
	builder.WriteString(fmt.Sprintf("%v", ua.UseKamalio))
	builder.WriteByte(')')
	return builder.String()
}

// UserAccounts is a parsable slice of UserAccount.
type UserAccounts []*UserAccount

func (ua UserAccounts) config(cfg config) {
	for _i := range ua {
		ua[_i].config = cfg
	}
}
