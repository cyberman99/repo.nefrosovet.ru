// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"repo.nefrosovet.ru/go-lms/api-video/ent/webinaruser"
)

// WebinarUserCreate is the builder for creating a WebinarUser entity.
type WebinarUserCreate struct {
	config
	user_id        *int
	webinar_id     *int
	status         *webinaruser.Status
	medooze_id     *int
	old_medooze_id *int
	mic            *int16
	sound          *int16
}

// SetUserID sets the user_id field.
func (wuc *WebinarUserCreate) SetUserID(i int) *WebinarUserCreate {
	wuc.user_id = &i
	return wuc
}

// SetWebinarID sets the webinar_id field.
func (wuc *WebinarUserCreate) SetWebinarID(i int) *WebinarUserCreate {
	wuc.webinar_id = &i
	return wuc
}

// SetStatus sets the status field.
func (wuc *WebinarUserCreate) SetStatus(w webinaruser.Status) *WebinarUserCreate {
	wuc.status = &w
	return wuc
}

// SetNillableStatus sets the status field if the given value is not nil.
func (wuc *WebinarUserCreate) SetNillableStatus(w *webinaruser.Status) *WebinarUserCreate {
	if w != nil {
		wuc.SetStatus(*w)
	}
	return wuc
}

// SetMedoozeID sets the medooze_id field.
func (wuc *WebinarUserCreate) SetMedoozeID(i int) *WebinarUserCreate {
	wuc.medooze_id = &i
	return wuc
}

// SetNillableMedoozeID sets the medooze_id field if the given value is not nil.
func (wuc *WebinarUserCreate) SetNillableMedoozeID(i *int) *WebinarUserCreate {
	if i != nil {
		wuc.SetMedoozeID(*i)
	}
	return wuc
}

// SetOldMedoozeID sets the old_medooze_id field.
func (wuc *WebinarUserCreate) SetOldMedoozeID(i int) *WebinarUserCreate {
	wuc.old_medooze_id = &i
	return wuc
}

// SetNillableOldMedoozeID sets the old_medooze_id field if the given value is not nil.
func (wuc *WebinarUserCreate) SetNillableOldMedoozeID(i *int) *WebinarUserCreate {
	if i != nil {
		wuc.SetOldMedoozeID(*i)
	}
	return wuc
}

// SetMic sets the mic field.
func (wuc *WebinarUserCreate) SetMic(i int16) *WebinarUserCreate {
	wuc.mic = &i
	return wuc
}

// SetNillableMic sets the mic field if the given value is not nil.
func (wuc *WebinarUserCreate) SetNillableMic(i *int16) *WebinarUserCreate {
	if i != nil {
		wuc.SetMic(*i)
	}
	return wuc
}

// SetSound sets the sound field.
func (wuc *WebinarUserCreate) SetSound(i int16) *WebinarUserCreate {
	wuc.sound = &i
	return wuc
}

// SetNillableSound sets the sound field if the given value is not nil.
func (wuc *WebinarUserCreate) SetNillableSound(i *int16) *WebinarUserCreate {
	if i != nil {
		wuc.SetSound(*i)
	}
	return wuc
}

// Save creates the WebinarUser in the database.
func (wuc *WebinarUserCreate) Save(ctx context.Context) (*WebinarUser, error) {
	if wuc.user_id == nil {
		return nil, errors.New("ent: missing required field \"user_id\"")
	}
	if wuc.webinar_id == nil {
		return nil, errors.New("ent: missing required field \"webinar_id\"")
	}
	if wuc.status != nil {
		if err := webinaruser.StatusValidator(*wuc.status); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if wuc.mic == nil {
		v := webinaruser.DefaultMic
		wuc.mic = &v
	}
	if wuc.sound == nil {
		v := webinaruser.DefaultSound
		wuc.sound = &v
	}
	return wuc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (wuc *WebinarUserCreate) SaveX(ctx context.Context) *WebinarUser {
	v, err := wuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wuc *WebinarUserCreate) sqlSave(ctx context.Context) (*WebinarUser, error) {
	var (
		wu    = &WebinarUser{config: wuc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: webinaruser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: webinaruser.FieldID,
			},
		}
	)
	if value := wuc.user_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: webinaruser.FieldUserID,
		})
		wu.UserID = *value
	}
	if value := wuc.webinar_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: webinaruser.FieldWebinarID,
		})
		wu.WebinarID = *value
	}
	if value := wuc.status; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: webinaruser.FieldStatus,
		})
		wu.Status = value
	}
	if value := wuc.medooze_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: webinaruser.FieldMedoozeID,
		})
		wu.MedoozeID = value
	}
	if value := wuc.old_medooze_id; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: webinaruser.FieldOldMedoozeID,
		})
		wu.OldMedoozeID = value
	}
	if value := wuc.mic; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: webinaruser.FieldMic,
		})
		wu.Mic = *value
	}
	if value := wuc.sound; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: webinaruser.FieldSound,
		})
		wu.Sound = *value
	}
	if err := sqlgraph.CreateNode(ctx, wuc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	wu.ID = int(id)
	return wu, nil
}
