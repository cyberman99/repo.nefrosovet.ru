// Code generated by entc, DO NOT EDIT.

package accountkey

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"repo.nefrosovet.ru/go-lms/api-video/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.AccountKey {
	return predicate.AccountKey(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	},
	)
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	},
	)
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v int16) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	},
	)
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	},
	)
}

// Options applies equality check predicate on the "options" field. It's identical to OptionsEQ.
func Options(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptions), v))
	},
	)
}

// MetaData applies equality check predicate on the "meta_data" field. It's identical to MetaDataEQ.
func MetaData(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetaData), v))
	},
	)
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	},
	)
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	},
	)
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	},
	)
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedAt)))
	},
	)
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedAt)))
	},
	)
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	},
	)
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	},
	)
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	},
	)
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedAt)))
	},
	)
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedAt)))
	},
	)
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v int16) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	},
	)
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v int16) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	},
	)
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...int16) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountID), v...))
	},
	)
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...int16) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	},
	)
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v int16) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	},
	)
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v int16) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	},
	)
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v int16) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	},
	)
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v int16) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	},
	)
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKey), v))
	},
	)
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKey), v))
	},
	)
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...string) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKey), v...))
	},
	)
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...string) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKey), v...))
	},
	)
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKey), v))
	},
	)
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKey), v))
	},
	)
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKey), v))
	},
	)
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKey), v))
	},
	)
}

// KeyContains applies the Contains predicate on the "key" field.
func KeyContains(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldKey), v))
	},
	)
}

// KeyHasPrefix applies the HasPrefix predicate on the "key" field.
func KeyHasPrefix(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldKey), v))
	},
	)
}

// KeyHasSuffix applies the HasSuffix predicate on the "key" field.
func KeyHasSuffix(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldKey), v))
	},
	)
}

// KeyEqualFold applies the EqualFold predicate on the "key" field.
func KeyEqualFold(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldKey), v))
	},
	)
}

// KeyContainsFold applies the ContainsFold predicate on the "key" field.
func KeyContainsFold(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldKey), v))
	},
	)
}

// OptionsEQ applies the EQ predicate on the "options" field.
func OptionsEQ(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOptions), v))
	},
	)
}

// OptionsNEQ applies the NEQ predicate on the "options" field.
func OptionsNEQ(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOptions), v))
	},
	)
}

// OptionsIn applies the In predicate on the "options" field.
func OptionsIn(vs ...string) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOptions), v...))
	},
	)
}

// OptionsNotIn applies the NotIn predicate on the "options" field.
func OptionsNotIn(vs ...string) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOptions), v...))
	},
	)
}

// OptionsGT applies the GT predicate on the "options" field.
func OptionsGT(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOptions), v))
	},
	)
}

// OptionsGTE applies the GTE predicate on the "options" field.
func OptionsGTE(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOptions), v))
	},
	)
}

// OptionsLT applies the LT predicate on the "options" field.
func OptionsLT(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOptions), v))
	},
	)
}

// OptionsLTE applies the LTE predicate on the "options" field.
func OptionsLTE(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOptions), v))
	},
	)
}

// OptionsContains applies the Contains predicate on the "options" field.
func OptionsContains(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOptions), v))
	},
	)
}

// OptionsHasPrefix applies the HasPrefix predicate on the "options" field.
func OptionsHasPrefix(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOptions), v))
	},
	)
}

// OptionsHasSuffix applies the HasSuffix predicate on the "options" field.
func OptionsHasSuffix(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOptions), v))
	},
	)
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOptions)))
	},
	)
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOptions)))
	},
	)
}

// OptionsEqualFold applies the EqualFold predicate on the "options" field.
func OptionsEqualFold(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOptions), v))
	},
	)
}

// OptionsContainsFold applies the ContainsFold predicate on the "options" field.
func OptionsContainsFold(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOptions), v))
	},
	)
}

// MetaDataEQ applies the EQ predicate on the "meta_data" field.
func MetaDataEQ(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataNEQ applies the NEQ predicate on the "meta_data" field.
func MetaDataNEQ(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataIn applies the In predicate on the "meta_data" field.
func MetaDataIn(vs ...string) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMetaData), v...))
	},
	)
}

// MetaDataNotIn applies the NotIn predicate on the "meta_data" field.
func MetaDataNotIn(vs ...string) predicate.AccountKey {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AccountKey(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMetaData), v...))
	},
	)
}

// MetaDataGT applies the GT predicate on the "meta_data" field.
func MetaDataGT(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataGTE applies the GTE predicate on the "meta_data" field.
func MetaDataGTE(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataLT applies the LT predicate on the "meta_data" field.
func MetaDataLT(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataLTE applies the LTE predicate on the "meta_data" field.
func MetaDataLTE(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataContains applies the Contains predicate on the "meta_data" field.
func MetaDataContains(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataHasPrefix applies the HasPrefix predicate on the "meta_data" field.
func MetaDataHasPrefix(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataHasSuffix applies the HasSuffix predicate on the "meta_data" field.
func MetaDataHasSuffix(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataEqualFold applies the EqualFold predicate on the "meta_data" field.
func MetaDataEqualFold(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMetaData), v))
	},
	)
}

// MetaDataContainsFold applies the ContainsFold predicate on the "meta_data" field.
func MetaDataContainsFold(v string) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMetaData), v))
	},
	)
}

// HasUseraccount applies the HasEdge predicate on the "useraccount" edge.
func HasUseraccount() predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseraccountTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UseraccountTable, UseraccountColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	},
	)
}

// HasUseraccountWith applies the HasEdge predicate on the "useraccount" edge with a given conditions (other predicates).
func HasUseraccountWith(preds ...predicate.UserAccount) predicate.AccountKey {
	return predicate.AccountKey(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseraccountInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UseraccountTable, UseraccountColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.AccountKey) predicate.AccountKey {
	return predicate.AccountKey(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.AccountKey) predicate.AccountKey {
	return predicate.AccountKey(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AccountKey) predicate.AccountKey {
	return predicate.AccountKey(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
