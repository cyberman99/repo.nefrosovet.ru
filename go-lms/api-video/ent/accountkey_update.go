// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"repo.nefrosovet.ru/go-lms/api-video/ent/accountkey"
	"repo.nefrosovet.ru/go-lms/api-video/ent/predicate"
	"repo.nefrosovet.ru/go-lms/api-video/ent/useraccount"
)

// AccountKeyUpdate is the builder for updating AccountKey entities.
type AccountKeyUpdate struct {
	config
	created_at         *time.Time
	clearcreated_at    bool
	updated_at         *time.Time
	clearupdated_at    bool
	account_id         *int16
	addaccount_id      *int16
	key                *string
	options            *string
	clearoptions       bool
	meta_data          *string
	useraccount        map[int]struct{}
	clearedUseraccount bool
	predicates         []predicate.AccountKey
}

// Where adds a new predicate for the builder.
func (aku *AccountKeyUpdate) Where(ps ...predicate.AccountKey) *AccountKeyUpdate {
	aku.predicates = append(aku.predicates, ps...)
	return aku
}

// SetCreatedAt sets the created_at field.
func (aku *AccountKeyUpdate) SetCreatedAt(t time.Time) *AccountKeyUpdate {
	aku.created_at = &t
	return aku
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (aku *AccountKeyUpdate) SetNillableCreatedAt(t *time.Time) *AccountKeyUpdate {
	if t != nil {
		aku.SetCreatedAt(*t)
	}
	return aku
}

// ClearCreatedAt clears the value of created_at.
func (aku *AccountKeyUpdate) ClearCreatedAt() *AccountKeyUpdate {
	aku.created_at = nil
	aku.clearcreated_at = true
	return aku
}

// SetUpdatedAt sets the updated_at field.
func (aku *AccountKeyUpdate) SetUpdatedAt(t time.Time) *AccountKeyUpdate {
	aku.updated_at = &t
	return aku
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (aku *AccountKeyUpdate) SetNillableUpdatedAt(t *time.Time) *AccountKeyUpdate {
	if t != nil {
		aku.SetUpdatedAt(*t)
	}
	return aku
}

// ClearUpdatedAt clears the value of updated_at.
func (aku *AccountKeyUpdate) ClearUpdatedAt() *AccountKeyUpdate {
	aku.updated_at = nil
	aku.clearupdated_at = true
	return aku
}

// SetAccountID sets the account_id field.
func (aku *AccountKeyUpdate) SetAccountID(i int16) *AccountKeyUpdate {
	aku.account_id = &i
	aku.addaccount_id = nil
	return aku
}

// AddAccountID adds i to account_id.
func (aku *AccountKeyUpdate) AddAccountID(i int16) *AccountKeyUpdate {
	if aku.addaccount_id == nil {
		aku.addaccount_id = &i
	} else {
		*aku.addaccount_id += i
	}
	return aku
}

// SetKey sets the key field.
func (aku *AccountKeyUpdate) SetKey(s string) *AccountKeyUpdate {
	aku.key = &s
	return aku
}

// SetOptions sets the options field.
func (aku *AccountKeyUpdate) SetOptions(s string) *AccountKeyUpdate {
	aku.options = &s
	return aku
}

// SetNillableOptions sets the options field if the given value is not nil.
func (aku *AccountKeyUpdate) SetNillableOptions(s *string) *AccountKeyUpdate {
	if s != nil {
		aku.SetOptions(*s)
	}
	return aku
}

// ClearOptions clears the value of options.
func (aku *AccountKeyUpdate) ClearOptions() *AccountKeyUpdate {
	aku.options = nil
	aku.clearoptions = true
	return aku
}

// SetMetaData sets the meta_data field.
func (aku *AccountKeyUpdate) SetMetaData(s string) *AccountKeyUpdate {
	aku.meta_data = &s
	return aku
}

// SetUseraccountID sets the useraccount edge to UserAccount by id.
func (aku *AccountKeyUpdate) SetUseraccountID(id int) *AccountKeyUpdate {
	if aku.useraccount == nil {
		aku.useraccount = make(map[int]struct{})
	}
	aku.useraccount[id] = struct{}{}
	return aku
}

// SetNillableUseraccountID sets the useraccount edge to UserAccount by id if the given value is not nil.
func (aku *AccountKeyUpdate) SetNillableUseraccountID(id *int) *AccountKeyUpdate {
	if id != nil {
		aku = aku.SetUseraccountID(*id)
	}
	return aku
}

// SetUseraccount sets the useraccount edge to UserAccount.
func (aku *AccountKeyUpdate) SetUseraccount(u *UserAccount) *AccountKeyUpdate {
	return aku.SetUseraccountID(u.ID)
}

// ClearUseraccount clears the useraccount edge to UserAccount.
func (aku *AccountKeyUpdate) ClearUseraccount() *AccountKeyUpdate {
	aku.clearedUseraccount = true
	return aku
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (aku *AccountKeyUpdate) Save(ctx context.Context) (int, error) {
	if aku.key != nil {
		if err := accountkey.KeyValidator(*aku.key); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"key\": %v", err)
		}
	}
	if len(aku.useraccount) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"useraccount\"")
	}
	return aku.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (aku *AccountKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *AccountKeyUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *AccountKeyUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aku *AccountKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountkey.Table,
			Columns: accountkey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: accountkey.FieldID,
			},
		},
	}
	if ps := aku.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := aku.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: accountkey.FieldCreatedAt,
		})
	}
	if aku.clearcreated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: accountkey.FieldCreatedAt,
		})
	}
	if value := aku.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: accountkey.FieldUpdatedAt,
		})
	}
	if aku.clearupdated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: accountkey.FieldUpdatedAt,
		})
	}
	if value := aku.account_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: accountkey.FieldAccountID,
		})
	}
	if value := aku.addaccount_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: accountkey.FieldAccountID,
		})
	}
	if value := aku.key; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accountkey.FieldKey,
		})
	}
	if value := aku.options; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accountkey.FieldOptions,
		})
	}
	if aku.clearoptions {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: accountkey.FieldOptions,
		})
	}
	if value := aku.meta_data; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accountkey.FieldMetaData,
		})
	}
	if aku.clearedUseraccount {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountkey.UseraccountTable,
			Columns: []string{accountkey.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aku.useraccount; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountkey.UseraccountTable,
			Columns: []string{accountkey.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountKeyUpdateOne is the builder for updating a single AccountKey entity.
type AccountKeyUpdateOne struct {
	config
	id                 int
	created_at         *time.Time
	clearcreated_at    bool
	updated_at         *time.Time
	clearupdated_at    bool
	account_id         *int16
	addaccount_id      *int16
	key                *string
	options            *string
	clearoptions       bool
	meta_data          *string
	useraccount        map[int]struct{}
	clearedUseraccount bool
}

// SetCreatedAt sets the created_at field.
func (akuo *AccountKeyUpdateOne) SetCreatedAt(t time.Time) *AccountKeyUpdateOne {
	akuo.created_at = &t
	return akuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (akuo *AccountKeyUpdateOne) SetNillableCreatedAt(t *time.Time) *AccountKeyUpdateOne {
	if t != nil {
		akuo.SetCreatedAt(*t)
	}
	return akuo
}

// ClearCreatedAt clears the value of created_at.
func (akuo *AccountKeyUpdateOne) ClearCreatedAt() *AccountKeyUpdateOne {
	akuo.created_at = nil
	akuo.clearcreated_at = true
	return akuo
}

// SetUpdatedAt sets the updated_at field.
func (akuo *AccountKeyUpdateOne) SetUpdatedAt(t time.Time) *AccountKeyUpdateOne {
	akuo.updated_at = &t
	return akuo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (akuo *AccountKeyUpdateOne) SetNillableUpdatedAt(t *time.Time) *AccountKeyUpdateOne {
	if t != nil {
		akuo.SetUpdatedAt(*t)
	}
	return akuo
}

// ClearUpdatedAt clears the value of updated_at.
func (akuo *AccountKeyUpdateOne) ClearUpdatedAt() *AccountKeyUpdateOne {
	akuo.updated_at = nil
	akuo.clearupdated_at = true
	return akuo
}

// SetAccountID sets the account_id field.
func (akuo *AccountKeyUpdateOne) SetAccountID(i int16) *AccountKeyUpdateOne {
	akuo.account_id = &i
	akuo.addaccount_id = nil
	return akuo
}

// AddAccountID adds i to account_id.
func (akuo *AccountKeyUpdateOne) AddAccountID(i int16) *AccountKeyUpdateOne {
	if akuo.addaccount_id == nil {
		akuo.addaccount_id = &i
	} else {
		*akuo.addaccount_id += i
	}
	return akuo
}

// SetKey sets the key field.
func (akuo *AccountKeyUpdateOne) SetKey(s string) *AccountKeyUpdateOne {
	akuo.key = &s
	return akuo
}

// SetOptions sets the options field.
func (akuo *AccountKeyUpdateOne) SetOptions(s string) *AccountKeyUpdateOne {
	akuo.options = &s
	return akuo
}

// SetNillableOptions sets the options field if the given value is not nil.
func (akuo *AccountKeyUpdateOne) SetNillableOptions(s *string) *AccountKeyUpdateOne {
	if s != nil {
		akuo.SetOptions(*s)
	}
	return akuo
}

// ClearOptions clears the value of options.
func (akuo *AccountKeyUpdateOne) ClearOptions() *AccountKeyUpdateOne {
	akuo.options = nil
	akuo.clearoptions = true
	return akuo
}

// SetMetaData sets the meta_data field.
func (akuo *AccountKeyUpdateOne) SetMetaData(s string) *AccountKeyUpdateOne {
	akuo.meta_data = &s
	return akuo
}

// SetUseraccountID sets the useraccount edge to UserAccount by id.
func (akuo *AccountKeyUpdateOne) SetUseraccountID(id int) *AccountKeyUpdateOne {
	if akuo.useraccount == nil {
		akuo.useraccount = make(map[int]struct{})
	}
	akuo.useraccount[id] = struct{}{}
	return akuo
}

// SetNillableUseraccountID sets the useraccount edge to UserAccount by id if the given value is not nil.
func (akuo *AccountKeyUpdateOne) SetNillableUseraccountID(id *int) *AccountKeyUpdateOne {
	if id != nil {
		akuo = akuo.SetUseraccountID(*id)
	}
	return akuo
}

// SetUseraccount sets the useraccount edge to UserAccount.
func (akuo *AccountKeyUpdateOne) SetUseraccount(u *UserAccount) *AccountKeyUpdateOne {
	return akuo.SetUseraccountID(u.ID)
}

// ClearUseraccount clears the useraccount edge to UserAccount.
func (akuo *AccountKeyUpdateOne) ClearUseraccount() *AccountKeyUpdateOne {
	akuo.clearedUseraccount = true
	return akuo
}

// Save executes the query and returns the updated entity.
func (akuo *AccountKeyUpdateOne) Save(ctx context.Context) (*AccountKey, error) {
	if akuo.key != nil {
		if err := accountkey.KeyValidator(*akuo.key); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"key\": %v", err)
		}
	}
	if len(akuo.useraccount) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"useraccount\"")
	}
	return akuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *AccountKeyUpdateOne) SaveX(ctx context.Context) *AccountKey {
	ak, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ak
}

// Exec executes the query on the entity.
func (akuo *AccountKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *AccountKeyUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (akuo *AccountKeyUpdateOne) sqlSave(ctx context.Context) (ak *AccountKey, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accountkey.Table,
			Columns: accountkey.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  akuo.id,
				Type:   field.TypeInt,
				Column: accountkey.FieldID,
			},
		},
	}
	if value := akuo.created_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: accountkey.FieldCreatedAt,
		})
	}
	if akuo.clearcreated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: accountkey.FieldCreatedAt,
		})
	}
	if value := akuo.updated_at; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: accountkey.FieldUpdatedAt,
		})
	}
	if akuo.clearupdated_at {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: accountkey.FieldUpdatedAt,
		})
	}
	if value := akuo.account_id; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: accountkey.FieldAccountID,
		})
	}
	if value := akuo.addaccount_id; value != nil {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  *value,
			Column: accountkey.FieldAccountID,
		})
	}
	if value := akuo.key; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accountkey.FieldKey,
		})
	}
	if value := akuo.options; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accountkey.FieldOptions,
		})
	}
	if akuo.clearoptions {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: accountkey.FieldOptions,
		})
	}
	if value := akuo.meta_data; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: accountkey.FieldMetaData,
		})
	}
	if akuo.clearedUseraccount {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountkey.UseraccountTable,
			Columns: []string{accountkey.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := akuo.useraccount; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accountkey.UseraccountTable,
			Columns: []string{accountkey.UseraccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: useraccount.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ak = &AccountKey{config: akuo.config}
	_spec.Assign = ak.assignValues
	_spec.ScanValues = ak.scanValues()
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ak, nil
}
