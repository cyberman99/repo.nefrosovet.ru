// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"repo.nefrosovet.ru/go-lms/api-video/ent/accountkey"
	"repo.nefrosovet.ru/go-lms/api-video/ent/useraccount"
)

// AccountKey is the model entity for the AccountKey schema.
type AccountKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int16 `json:"account_id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Options holds the value of the "options" field.
	Options *string `json:"options,omitempty"`
	// MetaData holds the value of the "meta_data" field.
	MetaData string `json:"meta_data,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccountKeyQuery when eager-loading is set.
	Edges                    AccountKeyEdges `json:"edges"`
	user_account_accountkeys *int
}

// AccountKeyEdges holds the relations/edges for other nodes in the graph.
type AccountKeyEdges struct {
	// Useraccount holds the value of the useraccount edge.
	Useraccount *UserAccount
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UseraccountOrErr returns the Useraccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccountKeyEdges) UseraccountOrErr() (*UserAccount, error) {
	if e.loadedTypes[0] {
		if e.Useraccount == nil {
			// The edge useraccount was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: useraccount.Label}
		}
		return e.Useraccount, nil
	}
	return nil, &NotLoadedError{edge: "useraccount"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccountKey) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullInt64{},  // account_id
		&sql.NullString{}, // key
		&sql.NullString{}, // options
		&sql.NullString{}, // meta_data
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*AccountKey) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // user_account_accountkeys
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccountKey fields.
func (ak *AccountKey) assignValues(values ...interface{}) error {
	if m, n := len(values), len(accountkey.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ak.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		ak.CreatedAt = new(time.Time)
		*ak.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		ak.UpdatedAt = new(time.Time)
		*ak.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field account_id", values[2])
	} else if value.Valid {
		ak.AccountID = int16(value.Int64)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field key", values[3])
	} else if value.Valid {
		ak.Key = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field options", values[4])
	} else if value.Valid {
		ak.Options = new(string)
		*ak.Options = value.String
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field meta_data", values[5])
	} else if value.Valid {
		ak.MetaData = value.String
	}
	values = values[6:]
	if len(values) == len(accountkey.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_account_accountkeys", value)
		} else if value.Valid {
			ak.user_account_accountkeys = new(int)
			*ak.user_account_accountkeys = int(value.Int64)
		}
	}
	return nil
}

// QueryUseraccount queries the useraccount edge of the AccountKey.
func (ak *AccountKey) QueryUseraccount() *UserAccountQuery {
	return (&AccountKeyClient{ak.config}).QueryUseraccount(ak)
}

// Update returns a builder for updating this AccountKey.
// Note that, you need to call AccountKey.Unwrap() before calling this method, if this AccountKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (ak *AccountKey) Update() *AccountKeyUpdateOne {
	return (&AccountKeyClient{ak.config}).UpdateOne(ak)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ak *AccountKey) Unwrap() *AccountKey {
	tx, ok := ak.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccountKey is not a transactional entity")
	}
	ak.config.driver = tx.drv
	return ak
}

// String implements the fmt.Stringer.
func (ak *AccountKey) String() string {
	var builder strings.Builder
	builder.WriteString("AccountKey(")
	builder.WriteString(fmt.Sprintf("id=%v", ak.ID))
	if v := ak.CreatedAt; v != nil {
		builder.WriteString(", created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	if v := ak.UpdatedAt; v != nil {
		builder.WriteString(", updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", account_id=")
	builder.WriteString(fmt.Sprintf("%v", ak.AccountID))
	builder.WriteString(", key=")
	builder.WriteString(ak.Key)
	if v := ak.Options; v != nil {
		builder.WriteString(", options=")
		builder.WriteString(*v)
	}
	builder.WriteString(", meta_data=")
	builder.WriteString(ak.MetaData)
	builder.WriteByte(')')
	return builder.String()
}

// AccountKeys is a parsable slice of AccountKey.
type AccountKeys []*AccountKey

func (ak AccountKeys) config(cfg config) {
	for _i := range ak {
		ak[_i].config = cfg
	}
}
