// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"repo.nefrosovet.ru/go-lms/api-video/ent/webinaruser"
)

// WebinarUser is the model entity for the WebinarUser schema.
type WebinarUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// WebinarID holds the value of the "webinar_id" field.
	WebinarID int `json:"webinar_id,omitempty"`
	// Status holds the value of the "status" field.
	Status *webinaruser.Status `json:"status,omitempty"`
	// MedoozeID holds the value of the "medooze_id" field.
	MedoozeID *int `json:"medooze_id,omitempty"`
	// OldMedoozeID holds the value of the "old_medooze_id" field.
	OldMedoozeID *int `json:"old_medooze_id,omitempty"`
	// Mic holds the value of the "mic" field.
	Mic int16 `json:"mic,omitempty"`
	// Sound holds the value of the "sound" field.
	Sound int16 `json:"sound,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebinarUser) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // user_id
		&sql.NullInt64{},  // webinar_id
		&sql.NullString{}, // status
		&sql.NullInt64{},  // medooze_id
		&sql.NullInt64{},  // old_medooze_id
		&sql.NullInt64{},  // mic
		&sql.NullInt64{},  // sound
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebinarUser fields.
func (wu *WebinarUser) assignValues(values ...interface{}) error {
	if m, n := len(values), len(webinaruser.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	wu.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field user_id", values[0])
	} else if value.Valid {
		wu.UserID = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field webinar_id", values[1])
	} else if value.Valid {
		wu.WebinarID = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[2])
	} else if value.Valid {
		wu.Status = new(webinaruser.Status)
		*wu.Status = webinaruser.Status(value.String)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field medooze_id", values[3])
	} else if value.Valid {
		wu.MedoozeID = new(int)
		*wu.MedoozeID = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field old_medooze_id", values[4])
	} else if value.Valid {
		wu.OldMedoozeID = new(int)
		*wu.OldMedoozeID = int(value.Int64)
	}
	if value, ok := values[5].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field mic", values[5])
	} else if value.Valid {
		wu.Mic = int16(value.Int64)
	}
	if value, ok := values[6].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field sound", values[6])
	} else if value.Valid {
		wu.Sound = int16(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this WebinarUser.
// Note that, you need to call WebinarUser.Unwrap() before calling this method, if this WebinarUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (wu *WebinarUser) Update() *WebinarUserUpdateOne {
	return (&WebinarUserClient{wu.config}).UpdateOne(wu)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (wu *WebinarUser) Unwrap() *WebinarUser {
	tx, ok := wu.config.driver.(*txDriver)
	if !ok {
		panic("ent: WebinarUser is not a transactional entity")
	}
	wu.config.driver = tx.drv
	return wu
}

// String implements the fmt.Stringer.
func (wu *WebinarUser) String() string {
	var builder strings.Builder
	builder.WriteString("WebinarUser(")
	builder.WriteString(fmt.Sprintf("id=%v", wu.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", wu.UserID))
	builder.WriteString(", webinar_id=")
	builder.WriteString(fmt.Sprintf("%v", wu.WebinarID))
	if v := wu.Status; v != nil {
		builder.WriteString(", status=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := wu.MedoozeID; v != nil {
		builder.WriteString(", medooze_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := wu.OldMedoozeID; v != nil {
		builder.WriteString(", old_medooze_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", mic=")
	builder.WriteString(fmt.Sprintf("%v", wu.Mic))
	builder.WriteString(", sound=")
	builder.WriteString(fmt.Sprintf("%v", wu.Sound))
	builder.WriteByte(')')
	return builder.String()
}

// WebinarUsers is a parsable slice of WebinarUser.
type WebinarUsers []*WebinarUser

func (wu WebinarUsers) config(cfg config) {
	for _i := range wu {
		wu[_i].config = cfg
	}
}
