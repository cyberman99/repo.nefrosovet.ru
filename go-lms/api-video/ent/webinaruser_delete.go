// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"repo.nefrosovet.ru/go-lms/api-video/ent/predicate"
	"repo.nefrosovet.ru/go-lms/api-video/ent/webinaruser"
)

// WebinarUserDelete is the builder for deleting a WebinarUser entity.
type WebinarUserDelete struct {
	config
	predicates []predicate.WebinarUser
}

// Where adds a new predicate to the delete builder.
func (wud *WebinarUserDelete) Where(ps ...predicate.WebinarUser) *WebinarUserDelete {
	wud.predicates = append(wud.predicates, ps...)
	return wud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wud *WebinarUserDelete) Exec(ctx context.Context) (int, error) {
	return wud.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (wud *WebinarUserDelete) ExecX(ctx context.Context) int {
	n, err := wud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wud *WebinarUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: webinaruser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: webinaruser.FieldID,
			},
		},
	}
	if ps := wud.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, wud.driver, _spec)
}

// WebinarUserDeleteOne is the builder for deleting a single WebinarUser entity.
type WebinarUserDeleteOne struct {
	wud *WebinarUserDelete
}

// Exec executes the deletion query.
func (wudo *WebinarUserDeleteOne) Exec(ctx context.Context) error {
	n, err := wudo.wud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{webinaruser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wudo *WebinarUserDeleteOne) ExecX(ctx context.Context) {
	wudo.wud.ExecX(ctx)
}
